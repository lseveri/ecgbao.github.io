<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>跳跳魔王的博客</title>
  <subtitle>每天进步一点点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-04T05:55:00.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>跳跳魔王</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Swift 编程语言（Swift 3.0.1）</title>
    <link href="http://yoursite.com/2016/10/28/Swift-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%EF%BC%88Swift-3-0-1%EF%BC%89/"/>
    <id>http://yoursite.com/2016/10/28/Swift-编程语言（Swift-3-0-1）/</id>
    <published>2016-10-28T05:54:48.000Z</published>
    <updated>2016-11-04T05:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><p>Swift 是为 iOS，macOS，watchOS，和 tvOS 应用开发的一门新的开发语言，尽管如此，Swift很多部分都跟你以往从事C和Objective-C开发经验很相似。</p>
<p>基于C 和 Objective-C 的数据类型，Swift 提供了自己的版本，包括 Int， Double， Float，Bool 和 String。它同时也提供了三种集合类型，Array，Set 和 Dictionary。</p>
<p>跟C类似，Swift 通过变量名来存取值。Swift 还大量使用常量，这里的常量比C的常量更加强大。常量使用贯穿Swift，用来让代码更加安全和容易推断，特别是在你不想变量值发生改变的时候。</p>
<p>除了基本类型，Swift 还引进了objective-C中没有的高级类型，比如元组。元组让你可以创建和传递多值。你可以在一个函数里返回元组来作为一个单独的混合值。</p>
<p>Swift 还引进了可选类型，用来处理缺值的情况。可选的意思是‘这里有一个值，它等于x’ 或者‘这里没有任何值’。用可选值跟objective-C里使用nil指针有点像，不过可选类型可以服务任何类型，不仅仅是类类型。可选类型不仅仅安全而且更容易表达意思，它是Swift最重要特性里的核心特性。</p>
<p>Swift是一门类型安全的语言，这也就意味着这门语言可以让你更清晰的知道代码使用的值类型。如果你的代码需要一个String，类型安全会保护你不至于传递一个Int类型。同样，类型安全也会保护你，让你不会把非可选类型传递给需要可选类型的代码块。类型安全让你在开发阶段尽快发现问题，修复错误。</p>
<h1 id="常量和变量"><a href="#常量和变量" class="headerlink" title="常量和变量"></a>常量和变量</h1><p>常量和变量是一个有特定类型的值，带有一个名字。常量值一旦确定就不能改变，变量在可用随时改变其值。</p>
<p>定义常量和变量<br>常量和变量必须要在使用前定义，常量使用let关键字，变量使用var关键字。下面是一个例子来展示如何使用常量和变量，这个例子是跟踪用户尝试的登录次数。</p>
<p><code>let maximumNumberOfLoginAttempts = 10<br>var currentLoginAttempt = 0</code><br>这段代码可以这样解读：<br>定义个常量maximumNumberOfLoginAttempts，给它一个值10.然后定义一个变量currentLoginAttempt，给它一个值0.<br>在这个例子里，最大登录次数定义为一个常量，因为最大登录数不会改变。当前登录数定义为变量，因为这个值随着用户的登录尝试会逐渐增长。<br>你也可以定义多个常量或变量在一行，用逗号分开即可：<br><code>var x = 0.0, y = 0.0, z = 0.0</code></p>
<p>类型注释<br>当定义常量或者变量的时候，你可以提供一个类型注释，这样可以更清楚的知道存储类型是什么。在变量名或者常量名后面加一个冒号，然后一个空格，然后是要使用的类型。</p>
<p>这个例子为变量welcomeMessage提供一个类型解释，来说明这个变量可以存储String值：<br><code>var welcomeMessage: String</code><br>这段代码可以理解为：<br>定义个变量叫welcomeMessage，它的类型是String。<br>welcomeMessage变量现在可以存储任何的字符串：<br><code>welcomeMessage = “Hello”</code><br>你可以在一行定义多个相关的相同类型的变量，用逗号分开，然后再最后加上类型注释：<br><code>var red, green, blue: Double</code></p>
<p>常量和变量命名<br>常量和变量命名可以包含几乎任何的字符，包括Unicode字符：<br><code>let π = 3.14159<br>let 你好 = “你好世界”<br>let 🐶🐮 = “dogcow”</code><br>常量和变量命名不能包含空格字符，数学符号，箭头，私有（无效）的Unicode字符码，或者-等。也不能以数字开始，虽然数字可以出现在名字里的任何地方。</p>
<p>一旦你给常量或者变量确定了类型，你就不能用同样的名字来重定义它们，或者改变他们存储的值类型。你也不能把常量改为变量，或者把变量变成常量。</p>
<p>你可以把常量的值改变成同样类型的其他的值。这个例子里，变量friendlyWelcome的值从”Hello!” 变成 “Bonjour!”:<br><code>var friendlyWelcome = “Hello!”<br>friendlyWelcome = “Bonjour!”<br>// friendlyWelcome is now “Bonjour!”</code><br>与变量不同，常量值一旦确定就不能再改变。如果尝试改变编译器会报错：<br><code>let languageName = “Swift”<br>languageName = “Swift++”<br>// This is a compile-time error: languageName cannot be changed.<br></code><br>打印常量和变量<br>你可以使用print(<em>:separator:terminator:)函数打印常量或者变量的当前值：<br><code>print(friendlyWelcome)<br>// Prints “Bonjour!”</code><br>print(</em>:separator:terminator:)是一个全局函数，可以打印一个或者多个值。在XCode里，例如，print(_:separator:terminator:)打印结果会出现在控制台里。separator 和 terminator 参数都有默认值, 所以你可以忽略他们。 默认的, 这个函数打印完会加上换行符。 如果不想打印后换行, 传入一个空字符串作为终止—例如, print(someValue, terminator: “”)</p>
<p>Swift 使用 string interpolation 在长字符串里插入常量或者变量名, 同时会提示 Swift 去用当前的常量值活变量值来替换它。 用括号包含名字，然后在前面加上反斜杠:</p>
<p><code>print(“The current value of friendlyWelcome is (friendlyWelcome)”)<br>// Prints “The current value of friendlyWelcome is Bonjour!”</code></p>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>在代码中，把注释加到不执行的文本，作为一个备注或者提醒。代码编译的时候，注释会被编译器忽略。<br>Swift注释和C语言注释很像，不在赘述。</p>
<h1 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h1><p>跟其他语言不同，Swift不要求在每条语句后写分号（；），不过，在一行写很多语句的时候，还是需要带上分号的：<br><code>let cat = “🐱”; print(cat)<br>// Prints “🐱”<br></code></p>
<h1 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h1><p>Integers 意思是整个数字没有小数，比如 42 和 -23，整数要么是 signed（负数，0，正数） 要么是 unsigned（正数或者0）</p>
<p>Swift提供8，16，32 和 64位的有符号和无符号的整数。这些整数类型和C语言很像，8位的无符号的整数是UInt8，32位的有符号正数是Int32.</p>
<h1 id="整数边界"><a href="#整数边界" class="headerlink" title="整数边界"></a>整数边界</h1><p>你可以用min 和max属性来获取每个整数类型的最小值和最大值：<br><code>let minValue = UInt8.min  // minValue is equal to 0, and is of type UInt8<br>let maxValue = UInt8.max  // maxValue is equal to 255, and is of type UInt8</code></p>
<h1 id="Int"><a href="#Int" class="headerlink" title="Int"></a>Int</h1><p>大多数情况下，你不需要指定整数的位数。Swift提供了额外的整数类型Int，这个和当前平台的本地字数一样：<br>32位机器，Int等于Int32<br>64位机器，Int等于Int64<br>除非你要用规定大小的整数，否则，一般只要用Int就可以了。</p>
<h1 id="UInt"><a href="#UInt" class="headerlink" title="UInt"></a>UInt</h1><p>Swift也提供了无符号的整形，UInt，这个和当前平台的本地字数也是一样的：<br>32位机器，UInt等于UInt32<br>64位机器，UInt等于UInt64</p>
<h1 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h1><p>Floating-point 是带有小数部分的数字，比如 3.14159，0.1和-273.15.<br>浮点数类型比整数类型表达更多的值域，比存在Int中的值更大或者更小。Swift提供了两个有符号的浮点数类型：<br>Double 表示64位的浮点数。<br>Float 表示32位的浮点数。</p>
<h1 id="类型安全与推断"><a href="#类型安全与推断" class="headerlink" title="类型安全与推断"></a>类型安全与推断</h1><p>Swift是类型安全的语音。类型安全的语言鼓励你清楚知道自己代码使用的值的类型。如果你的代码需要String类型，那么你就不要传递Int给它。</p>
<p>因为Swift是类型安全的，在编译代码的时候type checks会执行来标记不匹配的类型错误。这让你可以尽可能早的发现代码中的错误。</p>
<p>类型检查帮你避免使用不同类型的时候犯错，然而，这并不意味你必须给所有的常量和变量指定类型。你不需要指定类型，Swift使用type inference来推断合适的类型。类型推断使得编译器可以在编译代码的时候自动推断表达式的类型，只是通过简单的检查你提供的值。</p>
<p>因为有类型推断，Swift 对类型声明要求的比其他语言要少的多。常量和变量依然要显示输入，但是大部分指定类型的工作都已经帮你做了。</p>
<p>类型推断在给常量或者变量赋初值的时候尤为有用。这个发生在你声明常量或者变量，并给他们指定literal value（字面量）的时候。所谓的字面量就是指直接出现在你的源码中的值，比如下面例子里的 42 和 3.14159</p>
<p>例如，如果你给一个新常量指定一个字面量是42， Swift就会推断你想要这个常量的类型是Int， 因为你给他初始化一个数字：<br><code>let meaningOfLife = 42<br>// meaningOfLife is inferred to be of type Int</code><br>同样，你也不需要给浮点数指定类型，Swift会推断说你想要一个Double：<br><code>let pi = 3.14159<br>// pi is inferred to be of type Double</code><br>Swift在推断浮点数的时候总是选择Double而不是Float<br>如果你合并整数和浮点数在一个表达式中，Double类型将会被推断出来：<br><code>let anotherPi = 3 + 0.14159<br>// anotherPi is also inferred to be of type Double</code></p>
<h1 id="数值字面量"><a href="#数值字面量" class="headerlink" title="数值字面量"></a>数值字面量</h1><p>整数字面量这可以写：<br>十进制数字，没有前缀<br>二进制数字，用0b做前缀<br>八进制数字，用0o做前缀<br>十六进制数字，用0x做前缀<br>下面所有整数字面量值都是17：<br><code>let decimalInteger = 17<br>let binaryInteger = 0b10001       // 17 in binary notation<br>let octalInteger = 0o21           // 17 in octal notation<br>let hexadecimalInteger = 0x11     // 17 in hexadecimal notation</code></p>
<p>浮点数字面量可以是十进制或者十六进制。在十进制点的两边都必须有数字。十进制浮点数也有个可选的exponent，用大小写e标明；十六进制浮点数也有exponent，用大小写的p标明。</p>
<p>用 exp 指数表示十进制数, 基础数字乘以 10exp:<br>1.25e2 意思是 1.25 x 102, 或者是 125.0.<br>1.25e-2 意思是 1.25 x 10-2, 或者是 0.0125.<br>用 exp 指数表示十六进制数, 基础数字乘以 2exp:</p>
<p>0xFp2 意思是 15 x 22, 或者是 60.0.<br>0xFp-2 意思是 15 x 2-2, 或者是 3.75.<br>下面所有这些浮点数字面量十进制数都是 12.1875:<br><code>let decimalDouble = 12.1875<br>let exponentDouble = 1.21875e1<br>let hexadecimalDouble = 0xC.3p0</code></p>
<h1 id="数值类型转换"><a href="#数值类型转换" class="headerlink" title="数值类型转换"></a>数值类型转换</h1><p>在你的代码中使用Int做为一般用途的整形常量和变量，尽快知道他们是非负数的。日常开发使用默认整形类型意味着整形变量和常量立即可以使用，而且它们匹配整形字面量的推断类型。</p>
<p>特别指定的工作才会使用其他的整形类型，因为指定大小的整形类型需要额外的开销。日常开发中，使用指定大小的类型帮助捕获特定值的溢出，同时记录被使用的数据。</p>
<h1 id="整形转换"><a href="#整形转换" class="headerlink" title="整形转换"></a>整形转换</h1><p>不同数值类型，存储在常量或变量中的数值范围是不同的。一个Int8常量或者变量可以存储 -128 到 127， UInt8 常量或者变量能存储 0 到 255 之间的数值。如果数值不适合指定大小的整形类型，编译后会报错。</p>
<p><code>let cannotBeNegative: UInt8 = -1<br>// UInt8 cannot store negative numbers, and so this will report an error<br>let tooBig: Int8 = Int8.max + 1<br>// Int8 cannot store a number larger than its maximum value,<br>// and so this will also report an error</code></p>
<p>为了转换一个特定数值类型，先用一个存在的值初始化一个新的想要类型的新数值。下面的例子，常量twoThousand的类型是UInt16， 而常量one的类型是UInt8.他们不能直接相加，因为类型不同。取而代之的是，这个例子调用UInt16（one）来创建一个新的Uint16，并用one初始化它，并在原来的位置使用这个值：</p>
<p><code>let twoThousand: UInt16 = 2_000<br>let one: UInt8 = 1<br>let twoThousandAndOne = twoThousand + UInt16(one)</code></p>
<p>因为加好两边的值类型都是UInt16，所以加法是进行的。输出常量推断是UInt16，因为它是两个UInt16值的和。</p>
<p>SomeType(ofInitialValue) 默认调用Swift类型的初始化函数，然后传递一个初始值。这个语句之前，UInt16有一个初始化器接受一个UInt8的值，所以这个初始化器就用存在的UInt8 创建了一个新的UInt16.这里你不能随便传入类型-必须传入UInt16初始化器接受的值。</p>
<h1 id="整数和浮点数转换"><a href="#整数和浮点数转换" class="headerlink" title="整数和浮点数转换"></a>整数和浮点数转换</h1><p>整数和浮点数之间的转换必须是显示的：<br><code>let three = 3<br>let pointOneFourOneFiveNine = 0.14159<br>let pi = Double(three) + pointOneFourOneFiveNine<br>// pi equals 3.14159, and is inferred to be of type Double</code></p>
<p>这里，常量three用来创建新的Double数值，现在加号两边的类型是一样的，所以可以相加。如果没有这里的转换，加法是不允许的。</p>
<p>浮点数转整数也必须是显示进行的。一个整形可以用Double 或者 Float的值来初始化：</p>
<p><code>let integerPi = Int(pi)<br>// integerPi equals 3, and is inferred to be of type Int</code><br>用这种方式初始化一个新的整形数值，浮点数会被截断。意思就是 4.75 会变成 4， -3.9会变成-3.</p>
<h1 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h1><p>type aliases 为已知类型定一个别名。定义类型别名使用typealias关键字。</p>
<p>类型别名在你想通过名字调用一个已知类型的时候很有用，这种名字在上下文中更合适，比如使用指定大小的外部数据时：<br><code>typealias AudioSample = UInt16</code><br>定义好类型别名后，你可以在任何使用原名的地方使用它：<br><code>var maxAmplitudeFound = AudioSample.min<br>// maxAmplitudeFound is now 0</code><br>这里，AudioSample就是UInt16的别名。因为是别名，调用AudioSample.min实际上就是调用UInt16.min，这给maxAmplitudeFound变量提供一个初始值0.</p>
<h1 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h1><p>Swift有个一基础布尔类型， 叫做 Bool。布尔值用作逻辑调用，因为它只能是true或者false。Swift提供了两个布尔常量值，true和falseL<br><code>let orangesAreOrange = true<br>let turnipsAreDelicious = false</code></p>
<p>orangesAreOrange 和 turnipsAreDelicious 的类型被推断是Bool。同上面的Int 和 Double 一样，你不需要声明常量或者变量为Bool</p>
<p>布尔值在if 语句这种条件语句中尤其有用：<br><code>if turnipsAreDelicious {<br>    print(“Mmm, tasty turnips!”)<br>} else {<br>    print(“Eww, turnips are horrible.”)<br>}<br>// Prints “Eww, turnips are horrible.”</code></p>
<p>Swift 类型安全防止非布尔值被替换成布尔值。下面的例子报一个编译错误：</p>
<p><code>let i = 1<br>if i {<br>    // this example will not compile, and will report an error<br>}</code></p>
<p>替代的例子如下：<br><code>let i = 1<br>if i == 1 {<br>    // this example will compile successfully<br>}</code></p>
<p>i==1比较的结果是Boo类型，所以第二个例子通过了类型检查。</p>
<p>和其他类型安全例子一样，这个方法避免了突发的错误，确保特别代码块推断总是清晰的。</p>
<h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p>Tuples 包含多值到一个单独的组合值。元组里的值可以是任何类型，彼此之间可以是不同类型。</p>
<p>在这个例子中，(404, “Not Found”)是一个元组，代表Http的错误码。一个Http错误码是访问网页时网页服务器返回的特殊数值。如果你请求的网页不存在，就会返回404 Not Found的错误码。</p>
<p><code>let http404Error = (404, “Not Found”)<br>// http404Error is of type (Int, String), and equals (404, “Not Found”)</code></p>
<p>(404, “Not Found”) 元组包含了一个Int 和一个String，一个数字和一个人工可读的描述。它可以描述成一个类型为（Int, String）的元组。</p>
<p>你可以用任何变化的类型创建元组，你可以按照需要要创建不同的元组。</p>
<p>你可以分解元组到分离的常量或者变量，通常你会访问它们：</p>
<p><code>let (statusCode, statusMessage) = http404Error<br>print(“The status code is (statusCode)”)<br>// Prints “The status code is 404”<br>print(“The status message is (statusMessage)”)<br>// Prints “The status message is Not Found”</code></p>
<p>如果你只需要元组中的某些值，当你分解元组的时候可以用下划线替换忽略的部分：<br><code>let (justTheStatusCode, _) = http404Error<br>print(“The status code is (justTheStatusCode)”)<br>// Prints “The status code is 404”</code></p>
<p>或者，通过下标访问元组中单独的元素值：</p>
<p><code>print(“The status code is (http404Error.0)”)<br>// Prints “The status code is 404”<br>print(“The status message is (http404Error.1)”)<br>// Prints “The status message is Not Found”</code></p>
<p>你可以在元组定义时，给单独的原色命名：</p>
<p><code>let http200Status = (statusCode: 200, description: “OK”)</code></p>
<p>如果你在元组中命名了元素，那么，你可以在访问元素值的时候通过名字访问它们的值：</p>
<p><code>print(“The status code is (http200Status.statusCode)”)<br>// Prints “The status code is 200”<br>print(“The status message is (http200Status.description)”)<br>// Prints “The status message is OK”</code></p>
<h1 id="可选类型"><a href="#可选类型" class="headerlink" title="可选类型"></a>可选类型</h1><p>当一个值可能缺失的时候使用optionals。一个可选值包含两种可能：或者有一个值，你可以通过拆包访问这个值，或者根本没有值。</p>
<p>这里有一个例子，说明可选类型如何在值缺失的时候使用。Swift 的Int 类型有一个初始化器，可以把String 转换为Int 值。不过，不是每一个字符串都可以转换的。“123”可以转换为123，但是“helloworld”就不可以。</p>
<p>下面的例子使用初始化器去转换String：<br><code>let possibleNumber = “123”<br>let convertedNumber = Int(possibleNumber)<br>// convertedNumber is inferred to be of type “Int?”, or “optional Int”</code></p>
<p>因为初始化器有可能失败，所以它返回一个optional Int，而不是Int。一个可选Int写作Int？，不是Int。问号表示包含的值是可选的，意思就是它可能包含某个Int值，也可能不包含任何值。</p>
<h1 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h1><p>通过赋值nil来把可选值设置成无值状态：</p>
<p><code>var serverResponseCode: Int? = 404<br>// serverResponseCode contains an actual Int value of 404<br>serverResponseCode = nil<br>// serverResponseCode now contains no value</code></p>
<p>如果如果定义一个可选变量，但是没有提供默认值，这个变量会被自动设置为nil：<br><code>var surveyAnswer: String?<br>// surveyAnswer is automatically set to nil</code></p>
<h1 id="if语句和强制拆包"><a href="#if语句和强制拆包" class="headerlink" title="if语句和强制拆包"></a>if语句和强制拆包</h1><p>用if语句，通过与nil做比较，你可以知道一个可选项是否包含一个值，用（==）或者（！=）来做比较。如果一个可选项有值，那么它不等于ni：<br><code>if convertedNumber != nil {<br>    print(“convertedNumber contains some integer value.”)<br>}<br>// Prints “convertedNumber contains some integer value.”</code></p>
<p>一旦你确定可选项包含一个值，你可以通过在可选项的名字后面加（！）来获取它的值。这个感叹号是说：我知道这个可选项一定有值；请使用它！这就是强制拆包获取可选项的值：<br><code>if convertedNumber != nil {<br>    print(“convertedNumber has an integer value of (convertedNumber!).”)<br>}<br>// Prints “convertedNumber has an integer value of 123.”</code></p>
<h1 id="可选绑定"><a href="#可选绑定" class="headerlink" title="可选绑定"></a>可选绑定</h1><p>使用optional binding找出一个可选项是否包含一个值。如果这样的话，使这个值作为一个临时常量或者变量。可选绑定用if和while语句来判断可选项的值，然后提取这个值到常量或者变量，作为操作的一部分。</p>
<p>用if语句写可选绑定像下面这样：</p>
<p><code> if let constantName = someOptional {<br>    statements<br>}<br></code></p>
<p>你可以重写possibleNumber实例，通过使用可选绑定而不是强制拆包：</p>
<p><code> if let actualNumber = Int(possibleNumber) {<br>    print(“\”(possibleNumber)\” has an integer value of (actualNumber)”)<br>} else {<br>    print(“\”(possibleNumber)\” could not be converted to an integer”)<br>}<br>// Prints “”123” has an integer value of 123”</code></p>
<p>代码可以这样解释;<br>如果Int（possibleNumber）返回的可选Int包含一个值，设置一个新的常量叫actualNumber，它的值就是包含在可选项中的值。</p>
<p>如果转换成功，actualNumber 常量变的可用，执行第一个分支的语句。因为已经初始化了可选项的值，所以不需要用感叹号去拆包。</p>
<p>你可以同时使用常量和变量，如果你想操作if语句第一个分支里的actualNumber，你可能要写 if var actualNumber来替换代码，然后可选项的值会变成变量值而不是常量值。</p>
<p>你可以在单独的if语句包括尽可能多的可选绑定和布尔条件，用逗号分开即可。如果任何可选项的值为nil或者布尔条件等于false，if条件被认为是false。下面的if语句是一样的：</p>
<p><code>if let firstNumber = Int(“4”), let secondNumber = Int(“42”), firstNumber &lt; secondNumber &amp;&amp; secondNumber &lt; 100 {<br>    print(“(firstNumber) &lt; (secondNumber) &lt; 100”)<br>}<br>// Prints “4 &lt; 42 &lt; 100”</code></p>
<p>if let firstNumber = Int(“4”) {<br>    if let secondNumber = Int(“42”) {<br>        if firstNumber &lt; secondNumber &amp;&amp; secondNumber &lt; 100 {<br>            print(“(firstNumber) &lt; (secondNumber) &lt; 100”)<br>        }<br>    }<br>}<br>// Prints “4 &lt; 42 &lt; 100”</p>
<h1 id="隐式拆包可选项"><a href="#隐式拆包可选项" class="headerlink" title="隐式拆包可选项"></a>隐式拆包可选项</h1><p>如上所述，可选项表示一个常量或者变量可以没有值。可选项可以用if语句判断是否存在值，如果不存在，可以有条件用可选绑定拆包来访问可选项的值。</p>
<p>有时候，通过程序的结构可以很清楚的知道可选项有值，然后这个值被第一次设置。这种情况，就不需要每次都判断和拆包了，因为可以安全的假设总是有值。</p>
<p>这种可选项定义为隐式拆包可选项。隐式拆包可选项的写法是，在类型后面假设感叹号而不是问号。</p>
<p>当可选项的值在首次定义后就能确定存在的事，隐式拆包可选项很有用。隐式拆包可选项主要用在类的初始化。</p>
<p>隐式拆包可选项在这种场景下，是正常可选项，但是也可以用作一个非可选项，无需每次访问都拆包。下面的例子展示了，可选字符串和隐式拆包可选项字符串作为显示String时访问它们包含的值的不同行为。</p>
<p><code>let possibleString: String? = “An optional string.”<br>let forcedString: String = possibleString! // requires an exclamation mark</code></p>
<p>let assumedString: String! = “An implicitly unwrapped optional string.”<br>let implicitString: String = assumedString // no need for an exclamation mark</p>
<p>你依然可以把隐式拆包可选项当做正常的可选项，来判断它是否包含一个值：</p>
<p><code>if assumedString != nil {<br>    print(assumedString)<br>}<br>// Prints “An implicitly unwrapped optional string.”</code></p>
<p>你可以结合可选绑定来使用隐式拆包可选项，然后在一行语句中判断和拆包它的值：</p>
<p><code>if let definiteString = assumedString {<br>    print(definiteString)<br>}<br>// Prints “An implicitly unwrapped optional string.”</code></p>
<h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><p>使用error handling 响应程序执行中错误条件。<br>与可选项做对照，可选项用有无值来表示一个函数的成功失败，错误处理允许你检测迁走的失败原因，同时如果必要的话，会把错误传递到程序的另外一部分。</p>
<p>当函数遇到一个错误情况，它就会throws 一个错误。函数调用者可以捕获这个错并正确响应。</p>
<p><code>func canThrowAnError() throws {<br>    // this function may or may not throw an error<br>}</code></p>
<p>一个函数表明它可以通过在定义中包含throws关键词来抛出一个错误。当你调用这个可以抛出错误的函数时，你要准备try关键词。</p>
<p>Swift 自动把错误往外抛知道它被一个catch语句处理。</p>
<p><code>do {<br>    try canThrowAnError()<br>    // no error was thrown<br>} catch {<br>    // an error was thrown<br>}</code></p>
<p>do 语句创建了一个代码块，它允许错误可以传递给一个或者多个catch 项。</p>
<p>这里有一个列子，展示响应不同错误条件的错误处理方式：</p>
<p><code>func makeASandwich() throws {<br>    // …<br>}</code></p>
<p>do {<br>    try makeASandwich()<br>    eatASandwich()<br>} catch SandwichError.outOfCleanDishes {<br>    washDishes()<br>} catch SandwichError.missingIngredients(let ingredients) {<br>    buyGroceries(ingredients)<br>}</p>
<p>在这个例子里，如果没有干净的餐具可用或者任何调料确实，makeASandwich将会抛出一个错误。因为makeASandwich可以抛出错误，所以函数调用包含在try表达式。经过do语句包含处理，任何抛出的错误都会传递到catch项。</p>
<p>如果没有错误抛出，eatASandwich函数会被调用。如果一个错误抛出然后匹配SandwichError.outOfCleanDishes这个条件，那么washDishes会被调用。如果一个错误抛出然后匹配SandwichError.missingIngredients条件，那么buyGroceries会被调用</p>
<h1 id="基础运算符"><a href="#基础运算符" class="headerlink" title="基础运算符"></a>基础运算符</h1><p>operator 是特殊的符号或者短语，用来检查，改变，或者合并数值。比如，加号（+）用来加两个数值，比如 let = 1 + 2，逻辑与（&amp;&amp;）合并两个布尔值，比如 enteredDoorCode &amp;&amp; passedRetinaScan<br>Swift支持大部分的C语言操作符，并且提升了消除一般编码错误的能力。赋值运算符（=）不会返回一个值，用来防止错误是使用（==）。算数运算符—（+，-，*，/，%等等）监测和拒绝值溢出，为了避免值溢出造成未知的结果。你可以用Swift的溢出运算符选择值溢出行为。</p>
<p>Swift同时提供了两个范围运算符（a..&lt;b和a…b），这在C语言里没有。这些作为表达一个范围值的快捷方式。</p>
<p>这个章节介绍Swift的普通运算符。Advanced Operators 包含了Swift的高级运算符，描述如何定义你自己的运算符，然后为你自定义的类型实现标准运算符。</p>
<h1 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h1><p>运算符是一元的，二元的，或者三元的：<br>    一元运算符操作单一目标（比如-a）。一元前缀操作费直接写在目标前（比如！b），一元后缀操作费则直接出现在目标后（比如c！）。<br>    二元运算符操作两个目标（比如2+3），并且出现在两个目标的中间。<br>    三元运算符操作三个目标，跟C语言一样，Swift 只有一个三元运算符，也就是三元条件运算符（a ？b ：c）。<br>运算符作用的值是操作数。在表达式1+2里，+号是二元运算符，两个操作数分别是1和2.</p>
<h1 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h1><p>assignment operator（a=b）用b的值初始化或者更新a的值。<br><code>let b = 10<br>var a = 5<br>a = b<br>// a is now equal to 10</code><br>如果赋值语句的右侧是多值的元组，它的元素可以一次分解为多个常量或者变量：</p>
<p><code>let (x, y) = (1, 2)<br>// x is equal to 1, and y is equal to 2</code><br>与C语言 和 Objective-C语言不同，Swift赋值运算符自身不返回值。下面的语句是无效的：</p>
<p><code>if x = y {<br>    // This is not valid, because x = y does not return a value.<br>}</code><br>这个特性防止=与==混淆。 让if x = y 无效, Swift 帮你避免这种错误。</p>
<h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><p>Swift 对所有类型支持四种标准算术运算符:</p>
<p>加号 (+)<br>减号 (-)<br>乘号 (<em>)<br>除号 (/)<br>1 + 2       // 等于 3<br>5 - 3       // 等于 2<br>2 </em> 3       // 等于 6<br>10.0 / 2.5  // 等于 4.0<br>与C语言 和 Objective-C语言不同, Swift 算术运算符默认不允许值溢出。 你可以通过Swift溢出运算符来选择值溢出行为(例如 a &amp;+ b)。</p>
<p>加号也支持字符串连接:</p>
<p><code>“hello, “ + “world”  // 等于 “hello, world”</code></p>
<h1 id="余数运算符"><a href="#余数运算符" class="headerlink" title="余数运算符"></a>余数运算符</h1><p>余数运算符 (a % b) 计算a中b的倍数，并且返回余数。</p>
<p>备注</p>
<p>余数运算符 (%) 在其他语言中作为取模运算符。 不过, 在 Swift 中对负数来说, 严格来讲, 它是余数而不是一个取模运算。</p>
<p>下面演示余数运算符是如何工作的。 计算 9 % 4, 你首先算出9里有多少个4:</p>
<div style="text-align:center"><br><img src="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Art/remainderInteger_2x.png"><br></div>

<p>你可以确定9里有两个4, 余数是 1 (橙色显示)。</p>
<p>在 Swift 里, 这个会写作:</p>
<p><code>9 % 4    // 等于 1</code><br>为了确定 a % b 的结果, % 运算符计算下面的方程式，然后返回余数作为输出:</p>
<p>a = (b x 倍数) + 余数</p>
<p>这里倍数是a里面b的最大倍数。</p>
<p>把 9 和 4 代入方程式值域:</p>
<p><code>9 = (4 x 2) + 1</code></p>
<p>计算负值a的余数也是用相同的方法:</p>
<p><code>-9 % 4   // 等于 -1</code><br>把 -9 和 4 代入方程式值域:</p>
<p><code>-9 = (4 x -2) + -1</code></p>
<p>活的余数 -1.</p>
<p>负值b被忽略。 意思就是 a % b 和 a % -b 结果是一样的。</p>
<h1 id="一元减法运算符"><a href="#一元减法运算符" class="headerlink" title="一元减法运算符"></a>一元减法运算符</h1><p>数值符号可以用前缀 - 连接, 也就是大家熟知的一元减法运算符:<br><code><br>let three = 3<br>let minusThree = -three       // minusThree equals -3<br>let plusThree = -minusThree   // plusThree equals 3, or “minus minus three”<br></code><br>一元减法运算符 (-) 直接放在操作数前, 没有空格。</p>
<h1 id="一元加法运算符"><a href="#一元加法运算符" class="headerlink" title="一元加法运算符"></a>一元加法运算符</h1><p>一元加法运算符 (+) 返回操作数值, 没有任何改变:<br><code><br>let minusSix = -6<br>let alsoMinusSix = +minusSix  // alsoMinusSix 等于 -6<br></code><br>尽管一元加法运算符实际上不做任何事, 你可以用它来提供对称的代码，当在代码中使用正负数的时候。</p>
<h1 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h1><p>和 C 语言相似, Swift 提供复合赋值运算符来合并赋值 (=) 和其他操作数。 一个例子就是加法赋值运算符 (+=):<br><code><br>var a = 1<br>a += 2<br>// a 现在等于 3<br></code><br>表达式 a += 2 是 a = a + 2 的快捷方式。 实际上, 加法和赋值合并进一个操作符，同时做了两件事。</p>
<p>备注</p>
<p>复合赋值运算符不返回值。 比如, 你不能这样写 let b = a += 2.</p>
<h1 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h1><p>Swift 支持所有标准C语言比较运算符:</p>
<p>等于 (a == b)<br>不等于 (a != b)<br>大于 (a &gt; b)<br>小于 (a &lt; b)<br>大于等于 (a &gt;= b)<br>小于等于 (a &lt;= b)</p>
<p>备注</p>
<p>Swift 同时提供两个相等运算符 (=== and !==), 你可以用来测试两个对象引用是否引用了相同的对象实例。 更多信息参考 Classes and Structures.</p>
<p>每个比较运算符都返回一个布尔值，来表明语句是否是真的:</p>
<p>1 == 1   // 真，因为1 等于 1<br>2 != 1   // 真，因为2 不等于 1<br>2 &gt; 1    // 真，因为2 大于 1<br>1 &lt; 2    // 真，因为1 小于 2<br>1 &gt;= 1   // 真，因为1大于或者等于1<br>2 &lt;= 1   // 假，因为2不小于或者等于1<br>比较运算符通常用于条件语句, 例如if语句:<br><code><br>let name = “world”<br>if name == “world” {<br>    print(“hello, world”)<br>} else {<br>    print(“I’m sorry (name), but I don’t recognize you”)<br>}<br>// Prints “hello, world”, because name is indeed equal to “world”.<br></code><br>更多if语句, 参考 Control Flow.</p>
<p>你可以比较含有相同数量值的元组, 只要元组里的值可以比较。 例如, Int 和 String 可以比较, 意思就是 (Int, String) 可以比较。 相反, Bool 不能比较, 意思就是包含布尔值的元组不能作比较。</p>
<p>元组是从左到右做比较的, 每次一个值, 直到比较发现两个值不等为止。 这两个被比较的值, 比较的结果决定了整个元组比较的结果。 如果所有元素都相等, 那么元组就是相等的。例如:<br><code><br>(1, “zebra”) &lt; (2, “apple”)   // 真，因为1小于2; “zebra” 和 “apple” 不比较<br>(3, “apple”) &lt; (3, “bird”)    // 真，以为3等于3, “apple” 小于 “bird”<br>(4, “dog”) == (4, “dog”)      // 真，因为4等于4, “dog” 等于 “dog”<br></code><br>上面这个例子, 在第一行你可以看见从左到右比较的行为。 因为1小于2, (1, “zebra”) 被认为小于 (2, “apple”), 不用管元组里的其他值。 不管 “zebra” 是不是小于 “apple”, 因为比较已经取决于元组里的第一个元素了。 不过, 当元组第一个元素相等的时候，比较就像第二行，第三行发生的那样。</p>
<h1 id="三元条件运算符"><a href="#三元条件运算符" class="headerlink" title="三元条件运算符"></a>三元条件运算符</h1><p>三元条件运算符是含有三部分的特殊运算符, 样式是 <code>问题 ? 答案1 : 答案2</code>。 这是基于问题是真假对表达式之一的判断。 如果问题是真, 求 answer1 的值并返回; 否则, 求 answer2 的值并返回。</p>
<p>三元条件运算符是下面代码的简写:<br><code><br>if question {<br>    answer1<br>} else {<br>    answer2<br>}<br></code><br>这里有一个例子, 用例计算列表行高。 如果行有头部，那么行高比内容高度加50，如果没有头部，那么高度加20:<br><code><br>let contentHeight = 40<br>let hasHeader = true<br>let rowHeight = contentHeight + (hasHeader ? 50 : 20)<br>// rowHeight is equal to 90<br></code></p>
<p><code><br>let contentHeight = 40<br>let hasHeader = true<br>let rowHeight: Int<br>if hasHeader {<br>    rowHeight = contentHeight + 50<br>} else {<br>    rowHeight = contentHeight + 20<br>}<br>// rowHeight is equal to 90<br></code><br>第一个例子使用三元条件运算符，意味着行高可以在一行代码里正确设置, 这个比第二个例子的代码要简洁。</p>
<p>三元条件运算符提供一个简写，来决定使用两个表达式中的哪一个。 小心使用三元条件运算符。 过度使用，代码就是很难理解。 尽量避免把三元条件运算符的多个实例合并到一个符合语句。</p>
<h1 id="Nil-联合运算符"><a href="#Nil-联合运算符" class="headerlink" title="Nil-联合运算符"></a>Nil-联合运算符</h1><p>nil-联合运算符 (a ?? b) 展开一个可选项 a 如果它包含一个值的话, 或者返回一个默认值 b 如果 a 是 nil。 表达式 a 总是一个可选类型。 表达式 b 必须匹配存储在a里的值类型。</p>
<p>nil-联合运算符是下面代码的简写:</p>
<p><code>a != nil ? a! : b</code><br>上面的代码使用三元条件运算符,然后强制展开 (a!) 来获取a中的值，如果这个值不空的话, 否则返回 b 。 nil-联合运算符提供了更优雅简洁的方式来压缩这个条件判断和展开。</p>
<p>备注</p>
<p>如果值非空, b的值不会得到。 这就是人们熟知的短路估算。</p>
<p>下面的例子使用 nil-联合运算符在默认颜色名称和可选用户定义的颜色名称之间做选择:<br><code><br>let defaultColorName = “red”<br>var userDefinedColorName: String?   // 默认是 nil</code></p>
<p>var colorNameToUse = userDefinedColorName ?? defaultColorName<br>// userDefinedColorName 是 nil, 所以colorNameToUse 设置成默认值 “red”<br><br>userDefinedColorName 变量定义成可选的 String, 默认值是 nil. 因为 userDefinedColorName 是个可选类型, 你可以使用nil-联合运算符来获取它的值。 上面的例子, 运算符用来决定变量 colorNameToUse 的一个初始值。 因为 userDefinedColorName 是 nil,  userDefinedColorName ?? defaultColorName 表达式返回了defaultColorName 的值, 或者 “red”.</p>
<p>如果你给 userDefinedColorName 赋了一个非空的值，然后执行 nil-联合运算符再次判断, userDefinedColorName 中包含的值 就取代了默认值:<br><code><br>userDefinedColorName = “green”<br>colorNameToUse = userDefinedColorName ?? defaultColorName<br>// userDefinedColorName is not nil, so colorNameToUse is set to “green”<br></code></p>
<h1 id="范围运算符"><a href="#范围运算符" class="headerlink" title="范围运算符"></a>范围运算符</h1><p>Swift 有两个范围运算符, 是表达值范围的简写。</p>
<h1 id="闭合区间运算符"><a href="#闭合区间运算符" class="headerlink" title="闭合区间运算符"></a>闭合区间运算符</h1><p>闭合区间运算符 (a…b) 定义从a到b的范围, 包含a和b的值。 a的值不能比b大。</p>
<p>闭合区间运算符在范围迭代很有用，特别是你想使用所有的值的时候。例如 for-in 循环:<br><code><br>for index in 1…5 {<br>    print(“(index) times 5 is (index * 5)”)<br>}<br>// 1 times 5 is 5<br>// 2 times 5 is 10<br>// 3 times 5 is 15<br>// 4 times 5 is 20<br>// 5 times 5 is 25<br></code><br>更多 for-in 循环, 参考 Control Flow.</p>
<h1 id="半开区间运算符"><a href="#半开区间运算符" class="headerlink" title="半开区间运算符"></a>半开区间运算符</h1><p>半开区间运算符 (a..&lt;b) 定义了从a到b的范围, 但是不包含b， 之所以成为半开是因为它包含初值, 但是不包含终值。 正如闭合区间运算符, a的值不能大于b。 如果a的值等于b的值, 这个范围就会是空的。</p>
<p>半开区间在你使用类似数组这种基于零的列表时非常有用, 计算列表长度 (但是不包括) 很有帮助:<br><code><br>let names = [“Anna”, “Alex”, “Brian”, “Jack”]<br>let count = names.count<br>for i in 0..<count 1="" 2="" 3="" 4="" {="" print("person="" \(i="" +="" 1)="" is="" called="" \(names[i])")="" }="" person="" anna="" alex="" brian="" jack="" <="" code=""><br>数组包含4项, 不过 0..&lt;count 只计算到3 (数组最后一项的索引), 因为是半开区间。 更多数组, 参见 Arrays.</count></code></p>
<h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><p>逻辑运算符改变或者合并布尔值真和假。 Swift 支持三种基于C语言的标准逻辑运算符:</p>
<p>逻辑非 (!a)<br>逻辑与 (a &amp;&amp; b)<br>逻辑或 (a || b)</p>
<h1 id="逻辑非运算符"><a href="#逻辑非运算符" class="headerlink" title="逻辑非运算符"></a>逻辑非运算符</h1><p>逻辑非运算符 (!a) 反转布尔值，这样真就变成假, 假变成了真。</p>
<p>逻辑非运算符是个前缀运算符, 直接写在操作数前面, 没有任何空格。 可以读作 “not a”, 下面的例子可以看到:<br><code><br>let allowedEntry = false<br>if !allowedEntry {<br>    print(“ACCESS DENIED”)<br>}<br>// Prints “ACCESS DENIED”<br></code><br>语句 if !allowedEntry 可以读作 “if not allowed entry.” 后面一行仅执行 “not allowed entry” 是 true; 也就是, if allowedEntry 是 false.</p>
<p>在这个例子中, 谨慎定义布尔常量和变量名，可以让代码具有可读性和简洁性, 同时避免双重否定或者混乱的逻辑语句。</p>
<h1 id="逻辑与运算符"><a href="#逻辑与运算符" class="headerlink" title="逻辑与运算符"></a>逻辑与运算符</h1><p>逻辑与运算符 (a &amp;&amp; b) 创建逻辑表达式，这个表达式中两个值为真，表达式也要为真。</p>
<p>如果任何一个值为假, 表达式的结果也将是假。 事实上, 如果第一个值为假, 第二个值不会再计算, 因为它不会让所有表达式都等于真。 这就是人们熟知的短路估值。</p>
<p>这个例子有两个布尔值，只有两个值都是真的时候才允许访问:<br><code><br>let enteredDoorCode = true<br>let passedRetinaScan = false<br>if enteredDoorCode &amp;&amp; passedRetinaScan {<br>    print(“Welcome!”)<br>} else {<br>    print(“ACCESS DENIED”)<br>}<br>// Prints “ACCESS DENIED”<br></code></p>
<h1 id="逻辑或运算符"><a href="#逻辑或运算符" class="headerlink" title="逻辑或运算符"></a>逻辑或运算符</h1><p>逻辑或运算符 (a || b) 是两个竖线组成的中间运算符。 用来创建逻辑表达式，这个表达式中只要有一个值为真，表达式的结果就是真。</p>
<p>跟上面逻辑与类似, 逻辑或使用短路估值去计算表达式。 如果逻辑或的左侧是真, 右侧就不再估值, 因为它不会改变整个表达式的结果。</p>
<p>下面的例子, 第一个布尔值 (hasDoorKey) 是假, 但是第二个布尔值 (knowsOverridePassword) 是真。 因为一个值为真, 表达式结果就是真, 所以允许访问:<br><code><br>let hasDoorKey = false<br>let knowsOverridePassword = true<br>if hasDoorKey || knowsOverridePassword {<br>    print(“Welcome!”)<br>} else {<br>    print(“ACCESS DENIED”)<br>}<br>// Prints “Welcome!”<br></code></p>
<h1 id="合并逻辑运算符"><a href="#合并逻辑运算符" class="headerlink" title="合并逻辑运算符"></a>合并逻辑运算符</h1><p>你可以合并多个逻辑运算符来创建更长的复合表达式:<br><code><br>if enteredDoorCode &amp;&amp; passedRetinaScan || hasDoorKey || knowsOverridePassword {<br>    print(“Welcome!”)<br>} else {<br>    print(“ACCESS DENIED”)<br>}<br>// Prints “Welcome!”<br></code><br>这个例子使用了多个 &amp;&amp; 和 || 运算符来创建一个更长的复合表达式。 不过, &amp;&amp; 和 || 运算符依然只能操作两个值, 所以，这实际上是三个小表达式链接起来的。 </p>
<p>备注</p>
<p>Swift 逻辑运算符 &amp;&amp; 和 || 是左联想的, 意思就是多个逻辑运算符的复合表达式，首先计算最左边的子表达式。</p>
<h1 id="显示括号"><a href="#显示括号" class="headerlink" title="显示括号"></a>显示括号</h1><p>虽然不是严格需要，但是包含括号还是有用的, 使得复杂表达式的意图很容易理解。 上述实例, 给第一部分加上括号很有用，会让它的意图很明显:<br><code><br>if (enteredDoorCode &amp;&amp; passedRetinaScan) || hasDoorKey || knowsOverridePassword {<br>    print(“Welcome!”)<br>} else {<br>    print(“ACCESS DENIED”)<br>}<br>// Prints “Welcome!”<br></code><br>括号让第一部分作为独立可能的状态，这样在整个逻辑中就很清晰。 符合表达式的输出不变, 但是整体意图很清晰。 比起简洁，可读性是首选的。使用括号会让你的意图清晰明了。</p>
<h1 id="字符串和字符"><a href="#字符串和字符" class="headerlink" title="字符串和字符"></a>字符串和字符</h1><p>字符串是字符集合, 比如 “hello, world” 或者 “albatross”. Swift 字符串用 String 类型表示。 字符串内容有多种访问方法, 包括字符值的集合。</p>
<p>Swift的 String 和 Character 类型提供一个快速的, Unicode 方式来作用于你的文本。 字符串创建和操作的语法是轻量和可读的, 字面语法跟C类似。 字符串连接和使用加号运算符一样简单, 字符的可变性由选择常量还是变量来管理, 就像Swift中其他值。 你还可以使用字符串把常量,变量,字面量,和表达式插入更长的字符串, 在一个众所周知的字符串插值。 这让显示自定义字符串变得容易。</p>
<p>尽快语法简单, Swift的 String 类型是个快速, 现代化的字符串实现。 每个字符串有独立编码的 Unicode 字符组成, 提供用多种Unicode形式访问这些字符的支持。</p>
<h1 id="字符串字面量"><a href="#字符串字面量" class="headerlink" title="字符串字面量"></a>字符串字面量</h1><p>你可以在代码中为字符串预定义字符值。 字符串字面量是由（””）包围的固定的文字字符序列。</p>
<p>用字符串值作为一个常量或者变量的初始值:</p>
<p><code>let someString = “Some string literal value”</code><br>注意 Swift 推断someString 常量是一个 String 类型, 因为它用字符串值初始化。</p>
<h1 id="初始化空字符串"><a href="#初始化空字符串" class="headerlink" title="初始化空字符串"></a>初始化空字符串</h1><p>创建空字符串值作为更长字符串的起点, 或者给一个变量赋一个空字符串值, 或者用初始化方法来初始化一个新的字符串实例:<br><code><br>var emptyString = “”               // empty string literal<br>var anotherEmptyString = String()  // initializer syntax<br>// these two strings are both empty, and are equivalent to each other<br>Find out whether a String value is empty by checking its Boolean isEmpty property:</code></p>
<p>if emptyString.isEmpty {<br>    print(“Nothing to see here”)<br>}<br>// Prints “Nothing to see here”<br></p>
<h1 id="字符串易变性"><a href="#字符串易变性" class="headerlink" title="字符串易变性"></a>字符串易变性</h1><p>你来指定一个特定字符串能不能改变（或者突变），这种变化通过把它赋给一个变量实现。 (这种情况它是可以改变的), 或者赋值给一个常量实现 (这种情况它不能被改变):<br><code><br>var variableString = “Horse”<br>variableString += “ and carriage”<br>// variableString is now “Horse and carriage”</code></p>
<p>let constantString = “Highlander”<br>constantString += “ and another Highlander”<br>// this reports a compile-time error - a constant string cannot be modified<br></p>
<h1 id="字符串是值类型"><a href="#字符串是值类型" class="headerlink" title="字符串是值类型"></a>字符串是值类型</h1><p>Swift 的字符串类型是值类型。 如果你创建了一个新的字符串值, 这个字符串值在传给函数或者方法的时候被复制, 或者当它被赋值给一个常量或者变量的时候。这两种情况, 已存在字符串值的拷贝被创建, 新的拷贝被传递或者赋值, 而不是原来的字符串。 值类型在 Structures and Enumerations Are Value Types 中有描述。</p>
<p>很清楚你拥有精确的字符串值，而不用关心它从哪里来的。你可以确信传给你的字符串不会被改变,除非你自己改变它。</p>
<p>在幕后, Swift 的编译器优化了字符串的使用，这使得实际的拷贝只有真正需要的时候才会占用空间。 这就意味你使用字符串作为值类型总可以获得高性能。</p>
<h1 id="使用字符"><a href="#使用字符" class="headerlink" title="使用字符"></a>使用字符</h1><p>你可以用for-in 循环语句,通过它的字符属性来迭代访问每一个单独的字符:<br><code><br>for character in “Dog!🐶”.characters {<br>    print(character)<br>}<br>// D<br>// o<br>// g<br>// !<br>// 🐶<br></code></p>
<p>或者, 你可以创建一个单独的字符常量或者变量，这变量通过提供一个字符类型注释的单字符字符串值。:<br><code><br>let exclamationMark: Character = “!”<br>String values can be constructed by passing an array of Character values as an argument to its initializer:</code></p>
<p>let catCharacters: [Character] = [“C”, “a”, “t”, “!”, “🐱”]<br>let catString = String(catCharacters)<br>print(catString)<br>// Prints “Cat!🐱”<br></p>
<h1 id="连接字符串和字符"><a href="#连接字符串和字符" class="headerlink" title="连接字符串和字符"></a>连接字符串和字符</h1><p>字符串值可以通过加号连接成新的字符串:<br><code><br>let string1 = “hello”<br>let string2 = “ there”<br>var welcome = string1 + string2<br>// welcome now equals “hello there”<br></code><br>你也可以通过赋值运算符（+=）把字符串添加到已存在的字符串变量:<br><code><br>var instruction = “look over”<br>instruction += string2<br>// instruction now equals “look over there”<br>You can append a Character value to a String variable with the String type’s append() method:</code></p>
<p>let exclamationMark: Character = “!”<br>welcome.append(exclamationMark)<br>// welcome now equals “hello there!”<br></p>
<h1 id="字符串插入"><a href="#字符串插入" class="headerlink" title="字符串插入"></a>字符串插入</h1><p>String 字符串插入是构建新字符串的一种方法，这种方法通过混合常量,变量,字面量,表达式中的字面量来实现。每个你要插入的值都包括在括弧里,前面是一个反斜杠:<br><code><br>let multiplier = 3<br>let message = “(multiplier) times 2.5 is (Double(multiplier) * 2.5)”<br>// message is “3 times 2.5 is 7.5”<br></code><br>上面这个例子,  multiplier 的值以 (multiplier) 的形式插入到一个字符串。 这个占位符会被 multiplier 的实际值取代，当插值被计算创建新字符串的时候。</p>
<p>multiplier 的值是字符串后面大表达式的一部分。 这个表达式计算 Double(multiplier) <em> 2.5 的值，然后把结果 (7.5) 插入字符串。 这种情况下, 当它被包括进字符串字面量的时候，表达式就写作 (Double(multiplier) </em> 2.5) .</p>
<h1 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h1><p>Unicode 是在不同写作体系中用作编码,表达,处理文字的一种国际标准。 让你可以用一种标准形式表示任何语言的任何字符, 在诸如文本文件或者网页等外部资源,去读写这些字符。 Swift 的字符串和字符是完全 Unicode 编译的。</p>
<h1 id="Unicode-标量"><a href="#Unicode-标量" class="headerlink" title="Unicode 标量"></a>Unicode 标量</h1><p>背后, Swift 的本地字符串类型建立于 Unicode 标量值。对应字符或者修饰符来说, 一个 Unicode 标量是唯一的一个21位数字, 例如 U+0061 是 LATIN SMALL LETTER A (“a”), 或者 U+1F425 是 FRONT-FACING BABY CHICK (“🐥”).<br>注意并非所有 21-位 Unicode 标量都会被赋值给一些给未来预留的字符标量。 分配给字符的标量通常有一个名字, 比如 LATIN SMALL LETTER A 和 FRONT-FACING BABY CHICK .</p>
<h1 id="字符串字面量里的特殊字符"><a href="#字符串字面量里的特殊字符" class="headerlink" title="字符串字面量里的特殊字符"></a>字符串字面量里的特殊字符</h1><p>字符串字面量可以包括下面的特殊字符:</p>
<p>转义字符 \0 (空字符), \ (反斜杠), \t (水平制表符), \n (换行), \r (回车), \” (双引号) and \’ (单引号)<br>任意一个 Unicode 标量, 写作 \u{n}, n 是 一个 1–8 位十六进制数字，这个数字有个和 有效的Unicode 编码点相等的值。<br>下面四个例子显示了特殊字符的编码。wiseWords 常量包括两个转义的双引号字符。 dollarSign, blackHeart, 和sparklingHeart 常量展示了Unicode 标量的格式:<br><code><br>let wiseWords = “\”Imagination is more important than knowledge\” - Einstein”<br>// “Imagination is more important than knowledge” - Einstein<br>let dollarSign = “\u{24}”        // $,  Unicode scalar U+0024<br>let blackHeart = “\u{2665}”      // ♥,  Unicode scalar U+2665<br>let sparklingHeart = “\u{1F496}” // 💖, Unicode scalar U+1F496<br></code></p>
<h1 id="扩展字形集"><a href="#扩展字形集" class="headerlink" title="扩展字形集"></a>扩展字形集</h1><p>Swift的每个字符类型的实例带包一个单独的扩展字形集。 一个扩展字形集是一个或者多个 Unicode 标量，这些标量（当合并时）生成一个人可读的字符。</p>
<p>这里有个例子。 字符 é 可以表示成单独的 Unicode 标量 é (LATIN SMALL LETTER E WITH ACUTE, 或者 U+00E9). 不过, 相同的字母也可以表示成标量集的一部分，字母 e (LATIN SMALL LETTER E, or U+0065), 后面跟着 COMBINING ACUTE ACCENT 标量 (U+0301).COMBINING ACUTE ACCENT 标量 应用于之前的标量, 在一个Unicode识别 文本渲染系统渲染的时候，把 e 变成 é.</p>
<p>在这两个例子里, 字符 é 表示为一个单独的Swift 字符值，这个值表示一个扩展字形集。 第一个例子, 集合包含一个单独的标量; 第二个例子, 是两个标量的集合:<br><code><br>let eAcute: Character = “\u{E9}”                         // é<br>let combinedEAcute: Character = “\u{65}\u{301}”          // e followed by ́<br>// eAcute is é, combinedEAcute is é<br></code><br>扩展字形集是一种灵活的方式去表示很多复杂脚本字符作为单独字符值。 比如, 来自朝鲜字母的朝鲜语音节可以表示成复合或者分离的序列。 在Swift里,这些表达都是合格的字符值:<br><code><br>let precomposed: Character = “\u{D55C}”                  // 한<br>let decomposed: Character = “\u{1112}\u{1161}\u{11AB}”   // ᄒ, ᅡ, ᆫ<br>// precomposed is 한, decomposed is 한<br></code><br>扩展字形集使得封闭标志的标量 (比如 COMBINING ENCLOSING CIRCLE, 或者 U+20DD) 可以装入其他 Unicode 标量作为一个单独字符值的一部分:<br><code><br>let enclosedEAcute: Character = “\u{E9}\u{20DD}”<br>// enclosedEAcute is é⃝<br></code><br>Unicode 局部指示器符号标量可以成对组合来生成一个单独的字符值, 比如 REGIONAL INDICATOR SYMBOL LETTER U (U+1F1FA) 和 REGIONAL INDICATOR SYMBOL LETTER S (U+1F1F8) 的组合:<br><code><br>let regionalIndicatorForUS: Character = “\u{1F1FA}\u{1F1F8}”<br>// regionalIndicatorForUS is 🇺🇸<br></code></p>
<h1 id="计算字符"><a href="#计算字符" class="headerlink" title="计算字符"></a>计算字符</h1><p>在字符串中获取字符值的数量, 可以使用字符串字符属性中的计数属性:<br><code><br>let unusualMenagerie = “Koala 🐨, Snail 🐌, Penguin 🐧, Dromedary 🐪”<br>print(“unusualMenagerie has (unusualMenagerie.characters.count) characters”)<br>// Prints “unusualMenagerie has 40 characters”<br></code><br>注意 Swift 对字符值使用扩展字形集，意味着字符拼接和修改可能不会总是影响字符串的字符数。</p>
<p>例如, 如果你用四个字符的单词咖啡来初始化一个新字符串, 然后添加 COMBINING ACUTE ACCENT (U+0301) 到字符串的尾部, 最后字符的数量还是4, 第四个字符是 é, 而不是 e:<br><code><br>var word = “cafe”<br>print(“the number of characters in (word) is (word.characters.count)”)<br>// Prints “the number of characters in cafe is 4”</code></p>
<p>word += “\u{301}”    // COMBINING ACUTE ACCENT, U+0301</p>
<p>print(“the number of characters in (word) is (word.characters.count)”)<br>// Prints “the number of characters in café is 4”<br></p>
<h1 id="访问和修改字符串"><a href="#访问和修改字符串" class="headerlink" title="访问和修改字符串"></a>访问和修改字符串</h1><p>你可以通过方法和属性来访问和修改字符串, 或者用下标语法。</p>
<h1 id="字符串索引"><a href="#字符串索引" class="headerlink" title="字符串索引"></a>字符串索引</h1><p>每个字符串值都有一个对应的索引类型, String.Index, 代表每个字符在字符串中的位置。</p>
<p>上面提到的,不同字符要求不等数量的内存, 所以为了决定哪个字符在一个特定的位置, 你必须从头到尾枚举每个 Unicode 标量。 因为这个原因, Swift 字符串不能通过整数值来索引。</p>
<p>使用 startIndex 属性访问字符串的首字符位置。 endIndex 属性是字符串中最后一个字符的位置。 因此, endIndex 属性不是一个字符串下标的有效参数。 如果一个字符串是空的, startIndex 和 endIndex 相等。</p>
<p>你可以用 index(before:) 和 index(after:) 字符串方法访问给定索引前后的索引, 你可以使用 index(_:offsetBy:) 方法代替多次调用这些方法。</p>
<p>你可以使用下标语法访问特定索引位置的字符。<br><code><br>let greeting = “Guten Tag!”<br>greeting[greeting.startIndex]<br>// G<br>greeting[greeting.index(before: greeting.endIndex)]<br>// !<br>greeting[greeting.index(after: greeting.startIndex)]<br>// u<br>let index = greeting.index(greeting.startIndex, offsetBy: 7)<br>greeting[index]<br>// a<br></code><br>尝试访问越界的索引和字符都会引发运行时的错误。<br><code><br>greeting[greeting.endIndex] // Error<br>greeting.index(after: greeting.endIndex) // Error<br></code><br>用字符属性中的索引属性获取字符串中的所有字符。<br><code><br>for index in greeting.characters.indices {<br>    print(“(greeting[index]) “, terminator: “”)<br>}<br>// Prints “G u t e n   T a g ! “<br></code></p>
<h1 id="插入和移除"><a href="#插入和移除" class="headerlink" title="插入和移除"></a>插入和移除</h1><p>在特定位置向字符串插入一个字符, 使用 insert(_:at:) 方法, 插入其他字符串内容到制定索引使用 insert(contentsOf:at:) 方法。<br><code><br>var welcome = “hello”<br>welcome.insert(“!”, at: welcome.endIndex)<br>// welcome now equals “hello!”</code></p>
<p>welcome.insert(contentsOf:” there”.characters, at: welcome.index(before: welcome.endIndex))<br>// welcome now equals “hello there!”<br><br>从指定索引移除字符, 使用 remove(at:) 方法, 在指定范围移除一个字串, 用 removeSubrange(_:) 方法:<br><code><br>welcome.remove(at: welcome.index(before: welcome.endIndex))<br>// welcome now equals “hello there”</code></p>
<p>let range = welcome.index(welcome.endIndex, offsetBy: -6)..<welcome.endindex welcome.removesubrange(range)="" welcome="" now="" equals="" "hello"="" <="" code=""><br>备注</welcome.endindex></p>
<p>你可以使用 insert(<em>:at:), insert(contentsOf:at:), remove(at:), and removeSubrange(</em>:) 这些方法,只要符合 RangeReplaceableCollection 协议的任何类型。 这包括 String, 还有集合类型 Array, Dictionary, 和 Set.</p>
<h1 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h1><p>Swift 提供三种方式来比较文本值: 字符串和字符等式, 前缀等式, 和后缀等式。</p>
<h1 id="字符串和字符等式"><a href="#字符串和字符等式" class="headerlink" title="字符串和字符等式"></a>字符串和字符等式</h1><p>字符串和字符等式用“equal to” 运算符 (==) 和 “not equal to” 运算符 (!=) 来判断, 在 Comparison Operators 中描述:<br><code><br>let quotation = “We’re a lot alike, you and I.”<br>let sameQuotation = “We’re a lot alike, you and I.”<br>if quotation == sameQuotation {<br>    print(“These two strings are considered equal”)<br>}<br>// Prints “These two strings are considered equal”<br></code><br>两个字符串的值 (或者两个字符的值) 如果他们的扩展字形集相同,就被认为是相等的。 扩展字形集如果有相同的语义和表现形式，就是相等的, 即使他们背后是由不同 Unicode 标量组成。</p>
<p>比如, LATIN SMALL LETTER E WITH ACUTE (U+00E9) 常规等于 LATIN SMALL LETTER E (U+0065) 加上 COMBINING ACUTE ACCENT (U+0301). 两种扩展字形集都是有效的方式来表示字符 é, 隐藏它们被认为相等:<br><code><br>// “Voulez-vous un café?” using LATIN SMALL LETTER E WITH ACUTE<br>let eAcuteQuestion = “Voulez-vous un caf\u{E9}?”</code></p>
<p>// “Voulez-vous un café?” using LATIN SMALL LETTER E and COMBINING ACUTE ACCENT<br>let combinedEAcuteQuestion = “Voulez-vous un caf\u{65}\u{301}?”</p>
<p>if eAcuteQuestion == combinedEAcuteQuestion {<br>    print(“These two strings are considered equal”)<br>}<br>// Prints “These two strings are considered equal”<br><br>相反, LATIN CAPITAL LETTER A (U+0041, 或者 “A”), 英语中使用, 不等于俄语中使用的 CYRILLIC CAPITAL LETTER A (U+0410, 或者 “А”)。 这两个字符看上去相似, 但是语义不同:<br><code><br>let latinCapitalLetterA: Character = “\u{41}”</code></p>
<p>let cyrillicCapitalLetterA: Character = “\u{0410}”</p>
<p>if latinCapitalLetterA != cyrillicCapitalLetterA {<br>    print(“These two characters are not equivalent.”)<br>}<br>// Prints “These two characters are not equivalent.”<br><br>备注</p>
<p>字符串和字符比较在Swift中不是地区敏感的。</p>
<h1 id="前缀和后缀等式"><a href="#前缀和后缀等式" class="headerlink" title="前缀和后缀等式"></a>前缀和后缀等式</h1><p>判断字符串是否有一个特定前缀或者后缀, 调用字符串的 hasPrefix(<em>:) and hasSuffix(</em>:) 方法, 两个方法都一个 String 类型，然后返回一个布尔值。 </p>
<p>下面这个例子有一个字符串数组，用来表示场景的位置,它们来自莎士比亚的罗密欧与朱丽叶的前两个表演:<br><code><br>let romeoAndJuliet = [<br>    “Act 1 Scene 1: Verona, A public place”,<br>    “Act 1 Scene 2: Capulet’s mansion”,<br>    “Act 1 Scene 3: A room in Capulet’s mansion”,<br>    “Act 1 Scene 4: A street outside Capulet’s mansion”,<br>    “Act 1 Scene 5: The Great Hall in Capulet’s mansion”,<br>    “Act 2 Scene 1: Outside Capulet’s mansion”,<br>    “Act 2 Scene 2: Capulet’s orchard”,<br>    “Act 2 Scene 3: Outside Friar Lawrence’s cell”,<br>    “Act 2 Scene 4: A street in Verona”,<br>    “Act 2 Scene 5: Capulet’s mansion”,<br>    “Act 2 Scene 6: Friar Lawrence’s cell”<br>]<br></code><br>你可以用 hasPrefix(<em>:) 方法用 romeoAndJuliet 数组来技术表演1中的场景数:<br><code><br>var act1SceneCount = 0<br>for scene in romeoAndJuliet {<br>    if scene.hasPrefix(“Act 1 “) {<br>        act1SceneCount += 1<br>    }<br>}<br>print(“There are (act1SceneCount) scenes in Act 1”)<br>// Prints “There are 5 scenes in Act 1”<br></code><br>相似的, 用 hasSuffix(</em>:) 方法来计算发生在 Capulet’s mansion 和 Friar Lawrence’s cell 的场景数:<br><code><br>var mansionCount = 0<br>var cellCount = 0<br>for scene in romeoAndJuliet {<br>    if scene.hasSuffix(“Capulet’s mansion”) {<br>        mansionCount += 1<br>    } else if scene.hasSuffix(“Friar Lawrence’s cell”) {<br>        cellCount += 1<br>    }<br>}<br>print(“(mansionCount) mansion scenes; (cellCount) cell scenes”)<br>// Prints “6 mansion scenes; 2 cell scenes”<br></code></p>
<h1 id="Unicode-字符串表示"><a href="#Unicode-字符串表示" class="headerlink" title="Unicode 字符串表示"></a>Unicode 字符串表示</h1><p>当一个 Unicode 字符串写入文本文件或者别的存储时,字符串里的 Unicode 标量会以一些Unicode 定义的编码形式进行编码。 每种字符串编码在人们熟知的代码单元块中。 包括 UTF-8 编码 (把字符串编码成一个 8-位的代码单元), UTF-16 编码 (把字符串编码成一个16-位的代码单元), 和 UTF-32 编码 (把字符串编码成 32-位代码单元)</p>
<p>Swift 提供了几种不同的方式去访问字符串的Unicode 形式。你可以用for-in语句遍历字符串, 访问作为Unicode 扩展字形集的单个字符值。这个过程在 Working with Characters 描述。</p>
<p>或者, 或者用以下三种形式来访问字符串的值:</p>
<p>UTF-8 代码单元集合 (用字符串的utf8属性来访问)<br>UTF-16 代码单元集合 (用字符串的utf16属性来访问)<br>21-位 Unicode 标量值的集合, 等于字符串的 UTF-32 编码方式 (用字符串的 unicodeScalars 属性访问)<br>下面的例子展示字符串的不同表现形式,字符串由字符 D, o, g, ‼ (DOUBLE EXCLAMATION MARK, 或者 Unicode scalar U+203C), 和 🐶 字符 (DOG FACE, 或者 Unicode scalar U+1F436)组成:</p>
<p>let dogString = “Dog‼🐶”</p>
<h1 id="UTF-8-形式"><a href="#UTF-8-形式" class="headerlink" title="UTF-8 形式"></a>UTF-8 形式</h1><p>你可以通过遍历字符串的utf8属性来访问它的 UTF-8 表现形式。 这是属性是 String.UTF8View, 这是无符号的 8-位 (UInt8)值的集合, 每个字节一个:</p>
<p><div style="text-align:center"><br><img src="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Art/UTF8_2x.png"><br></div><br><code><br>for codeUnit in dogString.utf8 {<br>    print(“(codeUnit) “, terminator: “”)<br>}<br>print(“”)<br>// 68 111 103 226 128 188 240 159 144 182<br></code><br>上面这个例子, 前三个十进制 codeUnit 值 (68, 111, 103) 代表字符 D, o, 和 g, 它们的 UTF-8 形式和它们的 ASCII 表现形式一样。 接下来三个十进制 codeUnit 值 (226, 128, 188) 是双感叹号的三个字节的 UTF-8 形式。 最后四个 codeUnit 值 (240, 159, 144, 182) 是个四个字节的 UTF-8 形式，代表小狗的脸字符。</p>
<h1 id="UTF-16-形式"><a href="#UTF-16-形式" class="headerlink" title="UTF-16 形式"></a>UTF-16 形式</h1><p>你可以通过遍历字符串的utf16属性来访问它的 UTF-16 形式。 这个属性是 String.UTF16View, 它是无符号16-位 (UInt16)的值的集合, 每个16-位代码单元一个:</p>
<p><div style="text-align:center"><br><img src="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Art/UTF16_2x.png"><br></div><br><code><br>for codeUnit in dogString.utf16 {<br>    print(“(codeUnit) “, terminator: “”)<br>}<br>print(“”)<br>// Prints “68 111 103 8252 55357 56374 “<br></code><br>同样, 前三个 codeUnit 值 (68, 111, 103) 代表字符 D, o, 和 g, 它们的 UTF-16 代码单元和它们的 UTF-8 形式一样(因为这些 Unicode 标量表示 ASCII 字符).</p>
<p>第四个 codeUnit 值 (8252) 是十六进制 203C的十进制数值, 用 Unicode 标量 U+203C表示双感叹号字符。 在 UTF-16 里表示为一个单独的编码单元。</p>
<p>第五六个 codeUnit 值 (55357 和 56374) 狗脸字符。 这些值是高八位 U+D83D (十进制值是 55357) 和一个第八位 U+DC36 (十进制值 56374)。</p>
<h1 id="Unicode-标量形式"><a href="#Unicode-标量形式" class="headerlink" title="Unicode 标量形式"></a>Unicode 标量形式</h1><p>你可以通过遍历字符串的 unicodeScalars 属性来访问它的Unicode 标量形式。 这个是属性是 UnicodeScalarView,它是类型 UnicodeScalar 值的集合。</p>
<p>每个 UnicodeScalar 有一个值属性，它返回这个标量的 21-位值, 用一个 UInt32 值表示:</p>
<p><div style="text-align:center"><br><img src="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Art/UnicodeScalar_2x.png"><br></div><br><code><br>for scalar in dogString.unicodeScalars {<br>    print(“(scalar.value) “, terminator: “”)<br>}<br>print(“”)<br>// Prints “68 111 103 8252 128054 “<br></code><br>前三个 UnicodeScalar 值 (68, 111, 103) 再次代表 D, o, 和 g.</p>
<p>第四个 codeUnit 值 (8252) 是十六进制 203C 的十进制值, 是双感叹的 Unicode 标量 U+203C 。</p>
<p>第五个和最后一个 UnicodeScalar 值, 128054, 是十六进制 1F436的十进制值, 是狗脸字符的的 Unicode 标量 U+1F436。</p>
<p>作为查询它们值属性的替代, 每个 UnicodeScalar 值也可以用来构建新的字符串, 例如用做字符串插值:<br><code><br>for scalar in dogString.unicodeScalars {<br>    print(“(scalar) “)<br>}<br>// D<br>// o<br>// g<br>// ‼<br>// 🐶<br></code></p>
<h1 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h1><p>Swift 提供了三个主要的集合类型, 数组, 集合, 和字典, 用来存储值的集合。 数组是有序的。 集合是唯一值的无序集。 字典是健值匹配的无序集合。</p>
<p><div style="text-align:center"><br><img src="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Art/CollectionTypes_intro_2x.png"><br></div><br>数组, 集合, 和字典在 Swift 里总是清楚的知道存储的值的类型和能够存储的健。 这就意味着你不能往集合里插入错误类型的值。也意味着 你知道可以从集合里或者的值的类型。</p>
<p>备注</p>
<p>Swift 的数组, 集合, 和字典类型是用泛型集合实现的。更多泛型和集合, 参见 Generics.</p>
<h1 id="集合的不稳定性"><a href="#集合的不稳定性" class="headerlink" title="集合的不稳定性"></a>集合的不稳定性</h1><p>如果你创建了一个数组, 一个集合, 或者一个字典, 然后赋给一个变量。创建的这个集合就是可变的。这就意味着你可以改变这个集合，方式是通过添加, 移除, 或者改变集合里的项。如果把它们赋给一个常量, 这个集合就是不可改变的, 它的大小和内容都不能改变。</p>
<p>备注</p>
<p>如果集合不需要变化，在所有情况下创建不可变的集合是个好的实践。这样做的好处是让你容易理解自己的代码,同时让编译器可以优化你创建的集合。</p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组有序存储同类型的值。 相同的值可以多次出现在数组的不同位置。</p>
<p>备注</p>
<p>Swift的数组类型跟 Foundation的 NSArray 类相桥接。</p>
<h1 id="数组类型缩写语法"><a href="#数组类型缩写语法" class="headerlink" title="数组类型缩写语法"></a>数组类型缩写语法</h1><p>T数组类型的全写法是 Array<element>, 这里Element是数组运行存储的值类型。 你可以缩写数组类型为[Element]. 尽管这两种形式功能一样, 缩写是优先考虑的而且这个教程后面一直这么写。</element></p>
<h1 id="创建空数组"><a href="#创建空数组" class="headerlink" title="创建空数组"></a>创建空数组</h1><p>你可以用初始化语法创建一个特定类的空数组:<br><code><br>var someInts = <a href="">Int</a><br>print(“someInts is of type [Int] with (someInts.count) items.”)<br>// Prints “someInts is of type [Int] with 0 items.”<br></code><br>注意 someInts 变量的类型经过初始化类型被推断为 [Int]</p>
<p>或者, 如果上下文已经提供类型信息, 例如一个函数参数或者一个确定类型的变量或者常量, 你可以用空的字面量来创建空数组, 这个数组通常写作 [] (一个空的中括号对):<br><code><br>someInts.append(3)<br>// someInts now contains 1 value of type Int<br>someInts = []<br>// someInts is now an empty array, but is still of type [Int]<br></code></p>
<h1 id="用默认值创建数组"><a href="#用默认值创建数组" class="headerlink" title="用默认值创建数组"></a>用默认值创建数组</h1><p>Swift的数组类型也提供了一初始化器来创建相同默认值固定大小的数组。 给初始化器传一个匹配类型的默认值 (调用 repeating): 然后是在新数组中需要重复的值的个数 (调用 count):<br><code><br>var threeDoubles = Array(repeating: 0.0, count: 3)<br>// threeDoubles is of type [Double], and equals [0.0, 0.0, 0.0]<br></code></p>
<h1 id="通过合并数组创建数组"><a href="#通过合并数组创建数组" class="headerlink" title="通过合并数组创建数组"></a>通过合并数组创建数组</h1><p>你可以通过合并两个已存在的数组来创建新的数组,这两个数组只要类型匹配就可以通过加法运算符 (+)来合并。 新数组的类型从合并的数组可以推断出来:<br><code><br>var anotherThreeDoubles = Array(repeating: 2.5, count: 3)<br>// anotherThreeDoubles is of type [Double], and equals [2.5, 2.5, 2.5]</code></p>
<p>var sixDoubles = threeDoubles + anotherThreeDoubles<br>// sixDoubles is inferred as [Double], and equals [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]<br></p>
<h1 id="用字面量创建数组"><a href="#用字面量创建数组" class="headerlink" title="用字面量创建数组"></a>用字面量创建数组</h1><p>你也可以用字面量来初始化数组, 这是种快速写一个或者多个数组值的方式。 一个数组字面量写作一列值, 用逗号分开, 一对方括号包括起来:<br><code><br>[value 1, value 2, value 3]<br></code><br>下面的的例子创建了一个购物列表来存储字符串值:<br><code><br>var shoppingList: [String] = [“Eggs”, “Milk”]<br>// shoppingList has been initialized with two initial items<br>/code&gt;<br>购物列表变量定义为 “字符串值的数组”, 写作 [String]. 因为这个数组已经指定一个字符串类型值, 它就值运行存储字符串值。 这里, 购物列表数组用两个字符串值 (“Eggs” 和 “Milk”)来初始化, 写在数字字面量里。</code></p>
<p>备注</p>
<p>这个数组被声明为一个变量而不是一个常量，是因为在下面的例子将有更多的项目加入这个购物列表。</p>
<p>这种情况, 数组字面量只包含两个字符串值。 这个匹配购物列表变量的声明类型 (只能包括字符串值的数组), 用数组字面量赋值来初始化购物列表是被允许的一种方式。</p>
<p>由于 Swift 的类型推断, 如果你用相同类型的字面量来初始化数组,就不需要写出数组的类型。购物列表的初始化可以简写成以下形式:<br><code><br>var shoppingList = [“Eggs”, “Milk”]<br></code><br>因为数组里所有的值都是同样的类型, Swift 能够推断出 [String] 用作购物列表变量是正确的类型。</p>
<h1 id="访问和修改数组"><a href="#访问和修改数组" class="headerlink" title="访问和修改数组"></a>访问和修改数组</h1><p>你可以通过数组的方法,属性或者下标语法来访问和修改一个数组。</p>
<p>为了确定数组的项数, 使用只读属性count:<br><code><br>print(“The shopping list contains (shoppingList.count) items.”)<br>// Prints “The shopping list contains 2 items.”<br></code><br>使用布尔属性 isEmpty 来判断数量属性是否0:<br><code><br>if shoppingList.isEmpty {<br>    print(“The shopping list is empty.”)<br>} else {<br>    print(“The shopping list is not empty.”)<br>}<br>// Prints “The shopping list is not empty.”<br></code><br>通过调用 append(_:) 方法你可以在数组最后添加新项:<br><code><br>shoppingList.append(“Flour”)<br>// shoppingList now contains 3 items, and someone is making pancakes<br></code><br>或者, 使用赋值运算 (+=) 添加一个或多个符合的项:<br><code><br>shoppingList += [“Baking Powder”]<br>// shoppingList now contains 4 items<br>shoppingList += [“Chocolate Spread”, “Cheese”, “Butter”]<br>// shoppingList 现在包含 7项<br></code><br>用下标语法从数组中获取一个值, 在数组后的方括号里传入你想得到值的索引:<br><code><br>var firstItem = shoppingList[0]<br>// firstItem is equal to “Eggs”<br></code><br>备注</p>
<p>数组第一项的索引是0,不是1。 Swift 数组总是基于0开始索引。</p>
<p>你可以使用下标语法去改变给定索引下的值:<br><code><br>shoppingList[0] = “Six eggs”<br>// 第一项现在是 “Six eggs” 而不是 “Eggs”<br></code><br>你还可以通过下标语法一次改变一个范围的值, 尽管取代值跟被取代的长度不同。 下面的例子用 “Bananas” 和 “Apples” 取代了 “Chocolate Spread”, “Cheese”, 和 “Butter”:<br><code><br>shoppingList[4…6] = [“Bananas”, “Apples”]<br>// shoppingList 现在包含 6项<br></code><br>备注</p>
<p>你不能用下标语法添加新的项到数组最后。</p>
<p>在特定位置插入新项, 调用数组插入方法 insert(<em>:at:):<br><code><br>shoppingList.insert(“Maple Syrup”, at: 0)<br>// shoppingList now contains 7 items<br>// “Maple Syrup” is now the first item in the list<br></code><br>调用 insert(</em>:at:) 方法在购物列表头插入一个新的项 “Maple Syrup”, 用索引0标明。</p>
<p>类似的, 移除一项使用 remove(at:) 方法。 这个方法移除指定索引的项然后返回这个移除项 (尽管你可能无视这个返回值):<br><code><br>let mapleSyrup = shoppingList.remove(at: 0)<br>// 位于索引0的项被移除<br>// 购物列表现在包含6项, 没有 Maple Syrup<br>// mapleSyrup 常量现在等于被移除的 “Maple Syrup” 字符串<br></code><br>备注</p>
<p>如果越界访问数组的值, 你会触发运行时错误。 You can check that an index is valid before using it by comparing it to the array’s count property. Except when count is 0 (meaning the array is empty), the largest valid index in an array will always be count - 1, because arrays are indexed from zero.</p>
<p>Any gaps in an array are closed when an item is removed, and so the value at index 0 is once again equal to “Six eggs”:</p>
<p>firstItem = shoppingList[0]<br>// firstItem is now equal to “Six eggs”<br>If you want to remove the final item from an array, use the removeLast() method rather than the remove(at:) method to avoid the need to query the array’s count property. Like the remove(at:) method, removeLast() returns the removed item:</p>
<p>let apples = shoppingList.removeLast()<br>// the last item in the array has just been removed<br>// shoppingList now contains 5 items, and no apples<br>// the apples constant is now equal to the removed “Apples” string<br>Iterating Over an Array</p>
<p>You can iterate over the entire set of values in an array with the for-in loop:</p>
<p>for item in shoppingList {<br>    print(item)<br>}<br>// Six eggs<br>// Milk<br>// Flour<br>// Baking Powder<br>// Bananas<br>If you need the integer index of each item as well as its value, use the enumerated() method to iterate over the array instead. For each item in the array, the enumerated() method returns a tuple composed of an integer and the item. The integers start at zero and count up by one for each item; if you enumerate over a whole array, these integers match the items’ indices. You can decompose the tuple into temporary constants or variables as part of the iteration:</p>
<p>for (index, value) in shoppingList.enumerated() {<br>    print(“Item (index + 1): (value)”)<br>}<br>// Item 1: Six eggs<br>// Item 2: Milk<br>// Item 3: Flour<br>// Item 4: Baking Powder<br>// Item 5: Bananas<br>For more about the for-in loop, see For-In Loops.</p>
<p>Sets</p>
<p>A set stores distinct values of the same type in a collection with no defined ordering. You can use a set instead of an array when the order of items is not important, or when you need to ensure that an item only appears once.</p>
<p>NOTE</p>
<p>Swift’s Set type is bridged to Foundation’s NSSet class.</p>
<p>For more information about using Set with Foundation and Cocoa, see Working with Cocoa Data Types in Using Swift with Cocoa and Objective-C (Swift 3.0.1).</p>
<p>Hash Values for Set Types</p>
<p>A type must be hashable in order to be stored in a set—that is, the type must provide a way to compute a hash value for itself. A hash value is an Int value that is the same for all objects that compare equally, such that if a == b, it follows that a.hashValue == b.hashValue.</p>
<p>All of Swift’s basic types (such as String, Int, Double, and Bool) are hashable by default, and can be used as set value types or dictionary key types. Enumeration case values without associated values (as described in Enumerations) are also hashable by default.</p>
<p>NOTE</p>
<p>You can use your own custom types as set value types or dictionary key types by making them conform to the Hashable protocol from Swift’s standard library. Types that conform to the Hashable protocol must provide a gettable Int property called hashValue. The value returned by a type’s hashValue property is not required to be the same across different executions of the same program, or in different programs.</p>
<p>Because the Hashable protocol conforms to Equatable, conforming types must also provide an implementation of the equals operator (==). The Equatable protocol requires any conforming implementation of == to be an equivalence relation. That is, an implementation of == must satisfy the following three conditions, for all values a, b, and c:</p>
<p>a == a (Reflexivity)</p>
<p>a == b implies b == a (Symmetry)</p>
<p>a == b &amp;&amp; b == c implies a == c (Transitivity)</p>
<p>For more information about conforming to protocols, see Protocols.</p>
<p>Set Type Syntax</p>
<p>The type of a Swift set is written as Set<element>, where Element is the type that the set is allowed to store. Unlike arrays, sets do not have an equivalent shorthand form.</element></p>
<p>Creating and Initializing an Empty Set</p>
<p>You can create an empty set of a certain type using initializer syntax:</p>
<p>var letters = Set<character>()<br>print(“letters is of type Set<character> with (letters.count) items.”)<br>// Prints “letters is of type Set<character> with 0 items.”<br>NOTE</character></character></character></p>
<p>The type of the letters variable is inferred to be Set<character>, from the type of the initializer.</character></p>
<p>Alternatively, if the context already provides type information, such as a function argument or an already typed variable or constant, you can create an empty set with an empty array literal:</p>
<p>letters.insert(“a”)<br>// letters now contains 1 value of type Character<br>letters = []<br>// letters is now an empty set, but is still of type Set<character><br>Creating a Set with an Array Literal</character></p>
<p>You can also initialize a set with an array literal, as a shorthand way to write one or more values as a set collection.</p>
<p>The example below creates a set called favoriteGenres to store String values:</p>
<p>var favoriteGenres: Set<string> = [“Rock”, “Classical”, “Hip hop”]<br>// favoriteGenres has been initialized with three initial items<br>The favoriteGenres variable is declared as “a set of String values”, written as Set<string>. Because this particular set has specified a value type of String, it is only allowed to store String values. Here, the favoriteGenres set is initialized with three String values (“Rock”, “Classical”, and “Hip hop”), written within an array literal.</string></string></p>
<p>NOTE</p>
<p>The favoriteGenres set is declared as a variable (with the var introducer) and not a constant (with the let introducer) because items are added and removed in the examples below.</p>
<p>A set type cannot be inferred from an array literal alone, so the type Set must be explicitly declared. However, because of Swift’s type inference, you don’t have to write the type of the set if you’re initializing it with an array literal containing values of the same type. The initialization of favoriteGenres could have been written in a shorter form instead:</p>
<p>var favoriteGenres: Set = [“Rock”, “Classical”, “Hip hop”]<br>Because all values in the array literal are of the same type, Swift can infer that Set<string> is the correct type to use for the favoriteGenres variable.</string></p>
<p>Accessing and Modifying a Set</p>
<p>You access and modify a set through its methods and properties.</p>
<p>To find out the number of items in a set, check its read-only count property:</p>
<p>print(“I have (favoriteGenres.count) favorite music genres.”)<br>// Prints “I have 3 favorite music genres.”<br>Use the Boolean isEmpty property as a shortcut for checking whether the count property is equal to 0:</p>
<p>if favoriteGenres.isEmpty {<br>    print(“As far as music goes, I’m not picky.”)<br>} else {<br>    print(“I have particular music preferences.”)<br>}<br>// Prints “I have particular music preferences.”<br>You can add a new item into a set by calling the set’s insert(_:) method:</p>
<p>favoriteGenres.insert(“Jazz”)<br>// favoriteGenres now contains 4 items<br>You can remove an item from a set by calling the set’s remove(_:) method, which removes the item if it’s a member of the set, and returns the removed value, or returns nil if the set did not contain it. Alternatively, all items in a set can be removed with its removeAll() method.</p>
<p>if let removedGenre = favoriteGenres.remove(“Rock”) {<br>    print(“(removedGenre)? I’m over it.”)<br>} else {<br>    print(“I never much cared for that.”)<br>}<br>// Prints “Rock? I’m over it.”<br>To check whether a set contains a particular item, use the contains(_:) method.</p>
<p>if favoriteGenres.contains(“Funk”) {<br>    print(“I get up on the good foot.”)<br>} else {<br>    print(“It’s too funky in here.”)<br>}<br>// Prints “It’s too funky in here.”<br>Iterating Over a Set</p>
<p>You can iterate over the values in a set with a for-in loop.</p>
<p>for genre in favoriteGenres {<br>    print(“(genre)”)<br>}<br>// Jazz<br>// Hip hop<br>// Classical<br>For more about the for-in loop, see For-In Loops.</p>
<p>Swift’s Set type does not have a defined ordering. To iterate over the values of a set in a specific order, use the sorted() method, which returns the set’s elements as an array sorted using the &lt; operator.</p>
<p>for genre in favoriteGenres.sorted() {<br>    print(“(genre)”)<br>}<br>// Classical<br>// Hip hop<br>// Jazz<br>Performing Set Operations</p>
<p>You can efficiently perform fundamental set operations, such as combining two sets together, determining which values two sets have in common, or determining whether two sets contain all, some, or none of the same values.</p>
<p>Fundamental Set Operations</p>
<p>The illustration below depicts two sets—a and b—with the results of various set operations represented by the shaded regions.</p>
<p><div style="text-align:center"><br><img src="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Art/setVennDiagram_2x.png"><br></div><br>Use the intersection(<em>:) method to create a new set with only the values common to both sets.<br>Use the symmetricDifference(</em>:) method to create a new set with values in either set, but not both.<br>Use the union(<em>:) method to create a new set with all of the values in both sets.<br>Use the subtracting(</em>:) method to create a new set with values not in the specified set.<br>let oddDigits: Set = [1, 3, 5, 7, 9]<br>let evenDigits: Set = [0, 2, 4, 6, 8]<br>let singleDigitPrimeNumbers: Set = [2, 3, 5, 7]</p>
<p>oddDigits.union(evenDigits).sorted()<br>// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]<br>oddDigits.intersection(evenDigits).sorted()<br>// []<br>oddDigits.subtracting(singleDigitPrimeNumbers).sorted()<br>// [1, 9]<br>oddDigits.symmetricDifference(singleDigitPrimeNumbers).sorted()<br>// [1, 2, 9]<br>Set Membership and Equality</p>
<p>The illustration below depicts three sets—a, b and c—with overlapping regions representing elements shared among sets. Set a is a superset of set b, because a contains all elements in b. Conversely, set b is a subset of set a, because all elements in b are also contained by a. Set b and set c are disjoint with one another, because they share no elements in common.<br>div style=”text-align:center”&gt;<br><img src="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Art/setEulerDiagram_2x.png"><br><br>Use the “is equal” operator (==) to determine whether two sets contain all of the same values.<br>Use the isSubset(of:) method to determine whether all of the values of a set are contained in the specified set.<br>Use the isSuperset(of:) method to determine whether a set contains all of the values in a specified set.<br>Use the isStrictSubset(of:) or isStrictSuperset(of:) methods to determine whether a set is a subset or superset, but not equal to, a specified set.<br>Use the isDisjoint(with:) method to determine whether two sets have any values in common.<br>let houseAnimals: Set = [“🐶”, “🐱”]<br>let farmAnimals: Set = [“🐮”, “🐔”, “🐑”, “🐶”, “🐱”]<br>let cityAnimals: Set = [“🐦”, “🐭”]</p>
<p>houseAnimals.isSubset(of: farmAnimals)<br>// true<br>farmAnimals.isSuperset(of: houseAnimals)<br>// true<br>farmAnimals.isDisjoint(with: cityAnimals)<br>// true<br>Dictionaries</p>
<p>A dictionary stores associations between keys of the same type and values of the same type in a collection with no defined ordering. Each value is associated with a unique key, which acts as an identifier for that value within the dictionary. Unlike items in an array, items in a dictionary do not have a specified order. You use a dictionary when you need to look up values based on their identifier, in much the same way that a real-world dictionary is used to look up the definition for a particular word.</p>
<p>NOTE</p>
<p>Swift’s Dictionary type is bridged to Foundation’s NSDictionary class.</p>
<p>For more information about using Dictionary with Foundation and Cocoa, see Working with Cocoa Data Types in Using Swift with Cocoa and Objective-C (Swift 3.0.1).</p>
<p>Dictionary Type Shorthand Syntax</p>
<p>The type of a Swift dictionary is written in full as Dictionary<key, value="">, where Key is the type of value that can be used as a dictionary key, and Value is the type of value that the dictionary stores for those keys.</key,></p>
<p>NOTE</p>
<p>A dictionary Key type must conform to the Hashable protocol, like a set’s value type.</p>
<p>You can also write the type of a dictionary in shorthand form as [Key: Value]. Although the two forms are functionally identical, the shorthand form is preferred and is used throughout this guide when referring to the type of a dictionary.</p>
<p>Creating an Empty Dictionary</p>
<p>As with arrays, you can create an empty Dictionary of a certain type by using initializer syntax:</p>
<p>var namesOfIntegers = <a href="">Int: String</a><br>// namesOfIntegers is an empty [Int: String] dictionary<br>This example creates an empty dictionary of type [Int: String] to store human-readable names of integer values. Its keys are of type Int, and its values are of type String.</p>
<p>If the context already provides type information, you can create an empty dictionary with an empty dictionary literal, which is written as [:] (a colon inside a pair of square brackets):</p>
<p>namesOfIntegers[16] = “sixteen”<br>// namesOfIntegers now contains 1 key-value pair<br>namesOfIntegers = [:]<br>// namesOfIntegers is once again an empty dictionary of type [Int: String]<br>Creating a Dictionary with a Dictionary Literal</p>
<p>You can also initialize a dictionary with a dictionary literal, which has a similar syntax to the array literal seen earlier. A dictionary literal is a shorthand way to write one or more key-value pairs as a Dictionary collection.</p>
<p>A key-value pair is a combination of a key and a value. In a dictionary literal, the key and value in each key-value pair are separated by a colon. The key-value pairs are written as a list, separated by commas, surrounded by a pair of square brackets:</p>
<p>[key 1: value 1, key 2: value 2, key 3: value 3]<br>The example below creates a dictionary to store the names of international airports. In this dictionary, the keys are three-letter International Air Transport Association codes, and the values are airport names:</p>
<p>var airports: [String: String] = [“YYZ”: “Toronto Pearson”, “DUB”: “Dublin”]<br>The airports dictionary is declared as having a type of [String: String], which means “a Dictionary whose keys are of type String, and whose values are also of type String”.</p>
<p>NOTE</p>
<p>The airports dictionary is declared as a variable (with the var introducer), and not a constant (with the let introducer), because more airports are added to the dictionary in the examples below.</p>
<p>The airports dictionary is initialized with a dictionary literal containing two key-value pairs. The first pair has a key of “YYZ” and a value of “Toronto Pearson”. The second pair has a key of “DUB” and a value of “Dublin”.</p>
<p>This dictionary literal contains two String: String pairs. This key-value type matches the type of the airports variable declaration (a dictionary with only String keys, and only String values), and so the assignment of the dictionary literal is permitted as a way to initialize the airports dictionary with two initial items.</p>
<p>As with arrays, you don’t have to write the type of the dictionary if you’re initializing it with a dictionary literal whose keys and values have consistent types. The initialization of airports could have been written in a shorter form instead:</p>
<p>var airports = [“YYZ”: “Toronto Pearson”, “DUB”: “Dublin”]<br>Because all keys in the literal are of the same type as each other, and likewise all values are of the same type as each other, Swift can infer that [String: String] is the correct type to use for the airports dictionary.</p>
<p>Accessing and Modifying a Dictionary</p>
<p>You access and modify a dictionary through its methods and properties, or by using subscript syntax.</p>
<p>As with an array, you find out the number of items in a Dictionary by checking its read-only count property:</p>
<p>print(“The airports dictionary contains (airports.count) items.”)<br>// Prints “The airports dictionary contains 2 items.”<br>Use the Boolean isEmpty property as a shortcut for checking whether the count property is equal to 0:</p>
<p>if airports.isEmpty {<br>    print(“The airports dictionary is empty.”)<br>} else {<br>    print(“The airports dictionary is not empty.”)<br>}<br>// Prints “The airports dictionary is not empty.”<br>You can add a new item to a dictionary with subscript syntax. Use a new key of the appropriate type as the subscript index, and assign a new value of the appropriate type:</p>
<p>airports[“LHR”] = “London”<br>// the airports dictionary now contains 3 items<br>You can also use subscript syntax to change the value associated with a particular key:</p>
<p>airports[“LHR”] = “London Heathrow”<br>// the value for “LHR” has been changed to “London Heathrow”<br>As an alternative to subscripting, use a dictionary’s updateValue(<em>:forKey:) method to set or update the value for a particular key. Like the subscript examples above, the updateValue(</em>:forKey:) method sets a value for a key if none exists, or updates the value if that key already exists. Unlike a subscript, however, the updateValue(_:forKey:) method returns the old value after performing an update. This enables you to check whether or not an update took place.</p>
<p>The updateValue(_:forKey:) method returns an optional value of the dictionary’s value type. For a dictionary that stores String values, for example, the method returns a value of type String?, or “optional String”. This optional value contains the old value for that key if one existed before the update, or nil if no value existed:</p>
<p>if let oldValue = airports.updateValue(“Dublin Airport”, forKey: “DUB”) {<br>    print(“The old value for DUB was (oldValue).”)<br>}<br>// Prints “The old value for DUB was Dublin.”<br>You can also use subscript syntax to retrieve a value from the dictionary for a particular key. Because it is possible to request a key for which no value exists, a dictionary’s subscript returns an optional value of the dictionary’s value type. If the dictionary contains a value for the requested key, the subscript returns an optional value containing the existing value for that key. Otherwise, the subscript returns nil:</p>
<p>if let airportName = airports[“DUB”] {<br>    print(“The name of the airport is (airportName).”)<br>} else {<br>    print(“That airport is not in the airports dictionary.”)<br>}<br>// Prints “The name of the airport is Dublin Airport.”<br>You can use subscript syntax to remove a key-value pair from a dictionary by assigning a value of nil for that key:</p>
<p>airports[“APL”] = “Apple International”<br>// “Apple International” is not the real airport for APL, so delete it<br>airports[“APL”] = nil<br>// APL has now been removed from the dictionary<br>Alternatively, remove a key-value pair from a dictionary with the removeValue(forKey:) method. This method removes the key-value pair if it exists and returns the removed value, or returns nil if no value existed:</p>
<p>if let removedValue = airports.removeValue(forKey: “DUB”) {<br>    print(“The removed airport’s name is (removedValue).”)<br>} else {<br>    print(“The airports dictionary does not contain a value for DUB.”)<br>}<br>// Prints “The removed airport’s name is Dublin Airport.”<br>Iterating Over a Dictionary</p>
<p>You can iterate over the key-value pairs in a dictionary with a for-in loop. Each item in the dictionary is returned as a (key, value) tuple, and you can decompose the tuple’s members into temporary constants or variables as part of the iteration:</p>
<p>for (airportCode, airportName) in airports {<br>    print(“(airportCode): (airportName)”)<br>}<br>// YYZ: Toronto Pearson<br>// LHR: London Heathrow<br>For more about the for-in loop, see For-In Loops.</p>
<p>You can also retrieve an iterable collection of a dictionary’s keys or values by accessing its keys and values properties:</p>
<p>for airportCode in airports.keys {<br>    print(“Airport code: (airportCode)”)<br>}<br>// Airport code: YYZ<br>// Airport code: LHR</p>
<p>for airportName in airports.values {<br>    print(“Airport name: (airportName)”)<br>}<br>// Airport name: Toronto Pearson<br>// Airport name: London Heathrow<br>If you need to use a dictionary’s keys or values with an API that takes an Array instance, initialize a new array with the keys or values property:</p>
<p>let airportCodes = <a href="airports.keys">String</a><br>// airportCodes is [“YYZ”, “LHR”]</p>
<p>let airportNames = <a href="airports.values">String</a><br>// airportNames is [“Toronto Pearson”, “London Heathrow”]<br>Swift’s Dictionary type does not have a defined ordering. To iterate over the keys or values of a dictionary in a specific order, use the sorted() method on its keys or values property.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h1&gt;&lt;p&gt;Swift 是为 iOS，macOS，watchOS，和 tvOS 应用开发的一门新的开发语言，尽管如此，Swift很多部分
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>熙健-掌上心电获千万元A轮融资</title>
    <link href="http://yoursite.com/2016/09/21/%E7%86%99%E5%81%A5-%E6%8E%8C%E4%B8%8A%E5%BF%83%E7%94%B5%E8%8E%B7%E5%8D%83%E4%B8%87%E5%85%83A%E8%BD%AE%E8%9E%8D%E8%B5%84/"/>
    <id>http://yoursite.com/2016/09/21/熙健-掌上心电获千万元A轮融资/</id>
    <published>2016-09-21T03:02:14.000Z</published>
    <updated>2016-09-21T03:09:36.000Z</updated>
    
    <content type="html"><![CDATA[<div style="text-align:center"><br><img src="http://cdn.lieyunwang.com/wp-content/uploads/2016/09/150a5329e5b8ae6.png?imageMogr2/strip/interlace/0/quality/85/format/jpg" width="500" height="300"><br></div>

<p>据悉，<a href="http://www.mhealth365.cn/" target="_blank" rel="external"><em>掌上心电</em></a>已获得由先声药业投资的数千万元A轮融资。融资将主要用于市场开发和运营。</p>
<p>掌上心电的创始人<em>王长津</em>有20多年传统医疗器械从业经验，他在2013年创办了公司，专注于医疗健康领域，提供个性化、及时性的移动医疗保健服务。</p>
<p>熙健掌上心电（<em>SnapECG-RUN</em>）是一款心脏保健设备，通过与智能设备连接，即可随时随地采集心电信息，把复杂难懂的心电图呈现为人人能看懂的健康提示。</p>
<p>通过用户端和医生端APP以及网页管理端，与专业人员建立服务关系，全方位提供心脏保健服务。这将大幅度减少心脑血管疾病的突发状况，也将为慢性病患者掌握自身健康状况、控制疾病发展提供支持。目前掌上心电已获得CFDA和CE认证。</p>
<p>据国家心血管病中心的数据显示，中国心血管病患者约为2.9亿，每年约有350万人死于心血管病，5个成年人中就有1个患有心血管病。</p>
<p>不过，目前在政策和利益分配方式等问题没得到有限解决的前提下，医生（特别是三甲医院的医生）很难通过这些移动医疗设备及App为客户提供详细充足的专业建议。所以，lei’si企业需要花更多心血打磨硬件设备的后端服务，</p>
<p>据悉，掌上心电已经和十多家企业、数十家医院达成了合作。</p>
<p>2014年9月掌上心电曾获得创新工场数百万美元的天使轮融资。</p>
<p><a href="http://www.lieyunwang.com/archives/214041" target="_blank" rel="external"><em>原文链接</em></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;text-align:center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://cdn.lieyunwang.com/wp-content/uploads/2016/09/150a5329e5b8ae6.png?imageMogr2/strip/inter
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>XCode 8 新特性</title>
    <link href="http://yoursite.com/2016/09/21/XCode-8-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2016/09/21/XCode-8-新特性/</id>
    <published>2016-09-21T00:56:17.000Z</published>
    <updated>2016-09-21T02:56:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Xcode-8"><a href="#Xcode-8" class="headerlink" title="Xcode 8"></a>Xcode 8</h1><p>Xcode 8 包含了创建 <em>iPhone, iPad, Mac, Apple Watch, and Apple TV </em> 应用你所需要的的一切。 这是最快的IDE版本, 新的编辑器扩展特性使你可以完全定制你的编码习惯。 新的运行时问题提醒你内存泄露引起的隐藏bug, 一个新的 <em>Memory Debugger</em> 深入你的对象图形。 Swift 3 包含了更自然一致的 API 命名, 你可以在iPad上尝试新的 Playgrounds 应用程序。</p>
<div style="text-align:center"><br><img src="http://a3.qpic.cn/psb?/V13UfvND3TZFZo/RNcaIoqMXSQ7nCoBRioXM8W7CL0bYZ*kQLUL3LHhsw0!/b/dPgAAAAAAAAA&bo=IAPeAQAAAAADB94!&rf=viewer_4" width="500" height="300"><br></div>



<h1 id="更快的Interface-Builder"><a href="#更快的Interface-Builder" class="headerlink" title="更快的Interface Builder"></a>更快的Interface Builder</h1><p><em>Interface Builder</em> 重新设计了画布, 让你能更快的工作和有更多的控制权。 任何苹果设备都可以看到实时精确的程序预览。 当你在不同设备间快速切换为<em>size classes</em> 定制UI时, 你会看到相同的界面。 拖动放缩非常快, 甚至当你完全缩小鸟瞰故事板视图时还可以编辑你的界面。</p>
<div style="text-align:center"><br><img src="http://a1.qpic.cn/psb?/V13UfvND3TZFZo/z99xQxqCq4XHoOHAb*asuoJ7SBPNlgG3Vu2CaEkKprs!/b/dK4AAAAAAAAA&bo=IAPSAQAAAAADB9I!&rf=viewer_4" width="500" height="300"><br></div>

<h1 id="编辑器扩展"><a href="#编辑器扩展" class="headerlink" title="编辑器扩展"></a>编辑器扩展</h1><p>新的 Xcode 源编辑器扩展让你可以定制编码习惯。 使用扩展在你的编辑器文字区导航, 选择, 修改, 转换代码。 绑定你最喜欢的扩展到快捷键, 让格式化工作易如反掌。 Xcode 包含了一个新的模板，让你可以轻松创建编辑器扩展并在Mac应用商店发布, 或者用你的开发者账号签名扩展然后在线分享。 因为扩展是独立进程运行的,  所以Xcode 会很安全稳定。</p>
<p></p><p>新的 Xcode 8 编辑器还包括下面一些特性:</p><p></p>
<ol><br><li><code>San Francisco Mono 字体的新主题</code></li><br><li><code>自动生成快速帮助文档</code></li><br><li><code>高亮显示当前行</code> </li><br><li><code>Swift 代码里的图片和颜色值</code></li><br><li><code>图片名代码补全</code></li><br></ol>

<div style="text-align:center"><br><img src="http://a4.qpic.cn/psb?/V13UfvND3TZFZo/AB*sU2gRXg7wXjFzf.VS0cpYirSYVpJ1PI7m.18VQZo!/m/dP8AAAAAAAAA&bo=qwChAAAAAAADByg!&rf=photolist" width="150" height="150"><br></div>

<h1 id="Swift-3"><a href="#Swift-3" class="headerlink" title="Swift 3"></a>Swift 3</h1><p>Swift 3 是创新编程语言的首次重大发布， 对 <em>Swift.org</em> 社区开发者完全开放。 这个版本基于一个新的API命名指导文档统一了核心API的命名规则，这让书写  Swift 代码更加自然。 <code>Core Graphics</code> 和 <code>Grand Central Dispatch</code> 这些流行的系统API 更有表现力，与 Swift 更加协调。 你可以在<em>iPad Playgrounds</em> 应用程序里体验 Swift 3 。</p>
<h1 id="运行时问题"><a href="#运行时问题" class="headerlink" title="运行时问题"></a>运行时问题</h1><p>运行程序时，新特性报告的问题是 Xcode 自动识别的, 捕获那些难以发现的bug，这些bug通常难以发现直到应用到了用户手中。 新的 <em>Thread Sanitizer </em>用于竞态数据变化和其他线程相关的bug。 监测UI约束问题使用最新的 <em>View Debugger</em>，它具有更高的保真度和视觉精度, 在新的 <em>Memory Debugger</em> 跟踪内存泄露.</p>
<div style="text-align:center"><br><img src="http://a2.qpic.cn/psb?/V13UfvND3TZFZo/cf4dXQphPBVKKEWM7x58NOpuMKHlDJ*WxB2rwMOn*p8!/m/dK0AAAAAAAAA&bo=IAPdAQAAAAADB90!&rf=photolist" width="500" height="300"><br></div>

<h1 id="容易和强大的签名"><a href="#容易和强大的签名" class="headerlink" title="容易和强大的签名"></a>容易和强大的签名</h1><p>设备设置和代码签名极大的简化了, 你需要的时候提供更多的控制。 新的自动管理代码签名会生成你需要正确配置的所有东西。 只需选择你的开发团队，其他 Xcode 帮你做了。 你可以手动配置一切。 如果你遇见问题, 改进的错误信息和日志可以在 <em>Report Navigator</em> 查看。 如果你有多台 Mac 电脑, Xcode 会自动为每台 Mac 生成一个唯一的开发证书。</p>
<p>在你的苹果设备上开发和运行您的应用程序和进入Xcode的偏好设置输入Apple ID一样容易。苹果开发者账号不是必需的。</p>
<p>Provisioning Profile 文件选取，已经从Buiid Settings移动到了General中,Buiid Settings中已经标识了 Deprecated。</p>
<div style="text-align:center"><br><img src="http://cc.cocimg.com/api/uploads/20160615/1465977531625569.jpg" width="400" height="300"><br></div><br><div style="text-align:center"><br><img src="http://cc.cocimg.com/api/uploads/20160615/1465977537567515.jpg" width="600" height="300"><br></div>

<p>使用Xcode 8创建新项目的时候，会让你选择开发者团队为了自动生成对应的证书。</p>
<p>在新老项目的<em>General</em>中也可以对签名进行设置,勾选自动管理证书(可选的)，Xcode 会自动替你生成调试证书和描述问题，证书与描述文件有效期为6天，避免了大量的垃圾冗余证书占用问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Xcode-8&quot;&gt;&lt;a href=&quot;#Xcode-8&quot; class=&quot;headerlink&quot; title=&quot;Xcode 8&quot;&gt;&lt;/a&gt;Xcode 8&lt;/h1&gt;&lt;p&gt;Xcode 8 包含了创建 &lt;em&gt;iPhone, iPad, Mac, Apple Watch, 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CALayer开发指南</title>
    <link href="http://yoursite.com/2016/09/19/CALayer%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2016/09/19/CALayer开发指南/</id>
    <published>2016-09-19T07:16:18.000Z</published>
    <updated>2016-10-28T05:28:54.000Z</updated>
    
    <content type="html"><![CDATA[<html lang="en-US" class="no-js windows"><br><br><link rel="stylesheet" id="wpsqt-main-css" href="https://cdn3.raywenderlich.com/wp-content/plugins/wp-survey-and-quiz-tool/css/main.css?ver=4.5.2" type="text/css" media="all"><br><link rel="stylesheet" id="style-main-css" href="https://cdn4.raywenderlich.com/wp-content/themes/raywenderlich/style.min.css?ver=1471520796" type="text/css" media="all"><br><br><div id="attachment_114189" style="width: 260px" class="wp-caption alignright"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/LayersScreenshot-316x320.png" width="316" height="320" class="alignright size-medium wp-image-91873" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/LayersScreenshot-316x320.png 316w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/LayersScreenshot-494x500.png 494w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/LayersScreenshot-32x32.png 32w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/LayersScreenshot-64x64.png 64w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/LayersScreenshot-96x96.png 96w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/LayersScreenshot.png 608w" sizes="(max-width: 316px) 100vw, 316px"></div><br><br><p>也许你知道, 你在iOS程序上看到的一切都是视图。 有按钮视图, 列表视图, 滑块视图, 甚至是包含其他视图的父视图。</p><br><p>不过你可能不知道,每个视图都由一个叫做图层的类支持 – 一个特定的 CALayer 。 </p><br><p>通过这篇文章, 你会了解 CALayer 是什么, 如何工作的。 你还会看到10个用 CALayers 实现的炫酷效果, 比如几何图形, 渐变, 甚至是粒子系统。</p><br><p>这篇文章假设你会用Swift开发iOS应用程序, 包括用故事板构造界面。 </p><br><br><h2>开始</h2><br><p>理解图层到底是什么的最容易的方法就是看他们怎么运行。 所以让我们从头创建一个简单的工程来玩转图层。</p><br><p>准备好写代码了吗? 不错! 启动 Xcode 并且:</p><br><ol><br><li>从菜单选择 <em>File\New\Project&#8230;</em> . </li><br><li>从对话框中选择 <em>iOS\Application\Single View Application</em> . </li><br><li>点击 <em>Next</em>, 输入 <em>CALayerPlayground</em> 作为产品名,输入机构名和标识符。 </li><br><li>选择 <em>Swift</em>作为开发语言同时选择  <em>Universal</em> . </li><br><li>不要选中 <em>Core Data</em> , 然后点击 <em>Next</em>. </li><br><li>给你的工程找个好位置 (我把工程放在一个叫 Source 的用户文件夹), 然后点击 <em>Create</em>.</li><br><p>好了, 现在文件创建好了,下一步是创建一个视图:</p><br><li>在 Project navigator, 选择 <em>Main.storyboard</em>. </li><br><li>从菜单中选择 <em>View\Assistant Editor\Show Assistant Editor</em> , 如果没有显示出来就选择 <em>View\Utilities\Show Object Library</em> . </li><br><li>也可以选择 <em>Editor\Canvas\Show Bounds Rectangles</em>, 这样你会看到将要加入scene的视图边界轮廓。 </li><br><li>从 Object library 中, 拖一个视图到 View Controller Scene. 选中它, 去 Size inspector (<em>View\Utilities\Show Size Inspector</em>)设置 <em>x</em> 和 <em>y</em> 为 <em>150</em> , <em>width</em> 和 <em>height</em> 为 <em>300</em>. </li><br><li>保持视图选中, 点击自动布局工具条上的 <em>Align</em> 按钮 (故事板右下方) 选中 <em>Horizontal Center in Container</em> 和 <em>Vertical Center in Container</em>, 两个值都设为 <em>0</em>, 然后点击 <em>Add 2 Constraints</em>. </li><br><li>点击 <em>Pin</em> 按钮, 选中 <em>Width</em> 和 <em>Height</em>, 确保两个值都设成 <em>300</em>, 点击 <em>Add 2 Constraints</em>.</li><br></ol><br><p>最后, 按住control拖住在 <em>ViewController.swift</em> 创建的视图, 拖到 <code>viewDidLoad()</code> 方法上面。 弹出提示给出的outlet 名字是 <em>viewForLayer</em>. 你的 Xcode 看起来是这样:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/Xcode-CreateOutlet.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/Xcode-CreateOutlet-700x215.png" width="700" height="215" class="aligncenter size-large wp-image-90649" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/Xcode-CreateOutlet-700x215.png 700w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/Xcode-CreateOutlet-480x147.png 480w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/Xcode-CreateOutlet.png 1404w" sizes="(max-width: 700px) 100vw, 700px"></a></p><br><p>点击 <em>Connect</em> 创建 outlet. </p><br><p>用下面的代码替换 <em>ViewController.swift</em> 的内容:</p><br><br><div class="wp_codebox"><table><tr id="p904881"><td class="code" id="p90488code1"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">import</span> UIKit<br>&nbsp;<br><span style="color: #a61390;">class</span> ViewController<span style="color: #002200;">:</span> <span style="color: #400080;">UIViewController</span> <span style="color: #002200;">&#123;</span><br>&nbsp;<br>  @IBOutlet weak <span style="color: #a61390;">var</span> viewForLayer<span style="color: #002200;">:</span> <span style="color: #400080;">UIView</span><span style="color: #002200;">!</span><br>&nbsp;<br>  <span style="color: #a61390;">var</span> l<span style="color: #002200;">:</span> <span style="color: #400080;">CALayer</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">return</span> viewForLayer.layer<br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">super</span>.viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    setUpLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #a61390;">func</span> setUpLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    l.backgroundColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.blueColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.<span style="color: #400080;">CGColor</span><br>    l.borderWidth <span style="color: #002200;">=</span> <span style="color: #2400d9;">100.0</span><br>    l.borderColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.redColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.<span style="color: #400080;">CGColor</span><br>    l.shadowOpacity <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.7</span><br>    l.shadowRadius <span style="color: #002200;">=</span> <span style="color: #2400d9;">10.0</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>正如前面提到的, 每个视图都有一个图层, 你可以用 <code>yourView.layer</code> 获取这个图层。 这个代码首先做的是创建一个计算属性”l” (小写的 L) 来访问 <code>viewForLayer</code> 的图层, 这个可以节省你写后续代码的敲击。 </p><br><p> <code>setUpLayer</code> 负责给图层设置一些属性; 阴影, 蓝色的背景, 红色大边框。 稍后你会了解更多 <code>setUpLayer()</code> , 不过先编译运行模拟器来查看你的自定义图层 (我选的是 <em>iPhone 6</em>) :</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-1.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-1-179x320.png" width="179" height="320" class="aligncenter size-medium wp-image-90653 bordered" srcset="https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-1-179x320.png 179w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-1-281x500.png 281w" sizes="(max-width: 179px) 100vw, 179px"></a></p><br><p>几行代码的效果很酷吧,  因为每个视图背后都有图层, 你可以在程序 <i>任意</i> 视图中做这些。 我们来仔细看一下。</p><br><h2>基本的 CALayer 属性</h2><br><p>CALayer 有几个属让你可以自定义它的外观。 回想一下你前面做过的:</p><br><ul><br><li>背景色从无到蓝色<br></li><li>把边框宽度从0改成100<br></li><li>把边框色从黑色变成红色<br></li><li>最后, 改变阴影透明度的值到0.7; 这会产生阴影效果, 你可以进一步把它的阴影半径从3改成10。</li><br></ul><br><p>CALayer 仅有几个属性可以设置。 我们再试两个。 在<code>setUpLayer()</code> 下添加下面几行代码:</p><br><br><div class="wp_codebox"><table><tr id="p904882"><td class="code" id="p90488code2"><pre class="swift" style="font-family:monospace;">l.contents <span style="color: #002200;">=</span> <span style="color: #400080;">UIImage</span><span style="color: #002200;">&#40;</span>named<span style="color: #002200;">:</span> <span style="color: #bf1d1a;">&quot;star&quot;</span><span style="color: #002200;">&#41;</span>?.CGImage<br>l.contentsGravity <span style="color: #002200;">=</span> kCAGravityCenter</pre></td></tr></table></div><br><br><p> <code>contents</code> 属性允许你给图层内容设置图片, 所以这里你给它设了图片叫 &#8220;star&#8221;. 对于这个工作, 你要先把图片加到你的工程里,  <a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/star.png" title="Star image" download="star.png" target="_blank" rel="external">下载我做的星星图片</a> 然后添加到你的工程里。</p><br><p>编译运行程序, 欣赏一会这件艺术品: </p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-2.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-2-179x320.png" width="179" height="320" class="aligncenter size-medium wp-image-90655 bordered" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-2-179x320.png 179w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-2-281x500.png 281w" sizes="(max-width: 179px) 100vw, 179px"></a></p><br><p>注意星星是如何居中的 &#8211; 这是你因为把 <code>contentsGravity</code> 属性设置成了 <code>kCAGravityCenter</code>. 如你所愿, 你可以改变它的重心为上, 右上, 右, 右下, 下,左下, 左和左上。 </p><br><h2>改变图层的外观</h2><br><p>仅仅为了好玩, 我们添加一些手势来操作图层的外观。 在 Xcode 里, 拖一个点击手势到 <code>viewForLayer</code> . 仅供参考, 添加点击手势应该是这个样子的:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/Xcode-AddTapGestureRecognizer.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/Xcode-AddTapGestureRecognizer-700x478.png" width="700" height="478" class="aligncenter size-large wp-image-90656" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/Xcode-AddTapGestureRecognizer-700x478.png 700w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/Xcode-AddTapGestureRecognizer-468x320.png 468w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/Xcode-AddTapGestureRecognizer.png 1109w" sizes="(max-width: 700px) 100vw, 700px"></a></p><br><div class="note"><br><p><em>备注</em>: 如果你不熟悉手势, 可以查看 <a href="http://www.raywenderlich.com/76020/using-uigesturerecognizer-with-swift-tutorial" title="Using UIGestureRecognizer with Swift" target="_blank" rel="external"> Using UIGestureRecognizer with Swift</a>. </p><br></div><br><p>重复步骤添加一个捏合手势到 <code>viewForLayer</code> .</p><br><p>然后按住 control拖动每个手势到<em>ViewController.swift</em>, 一个接着一个, 把它们放<code>setUpLayer()</code> 和类的大括号之间。 </p><br><p>在弹出框里, 把连接按钮改成 <em>Action</em> 命名点击手势名为 <code>tapGestureRecognized</code> , 捏合手势名为 <code>pinchGestureRecognized</code>. 例如:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/Xcode-CreateAction.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/Xcode-CreateAction-700x253.png" width="700" height="253" class="aligncenter size-large wp-image-90658" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/Xcode-CreateAction-700x253.png 700w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/Xcode-CreateAction-480x173.png 480w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/Xcode-CreateAction.png 1102w" sizes="(max-width: 700px) 100vw, 700px"></a></p><br><p>修改 <code>tapGestureRecognized(_:)</code> 像这样:</p><br><br><div class="wp_codebox"><table><tr id="p904883"><td class="code" id="p90488code3"><pre class="swift" style="font-family:monospace;">@IBAction <span style="color: #a61390;">func</span> tapGestureRecognized<span style="color: #002200;">&#40;</span>sender<span style="color: #002200;">:</span> <span style="color: #400080;">UITapGestureRecognizer</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>  l.shadowOpacity <span style="color: #002200;">=</span> l.shadowOpacity <span style="color: #002200;">==</span> <span style="color: #2400d9;">0.7</span> ? <span style="color: #2400d9;">0.0</span> <span style="color: #002200;">:</span> <span style="color: #2400d9;">0.7</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>这是告诉 <code>viewForLayer</code> 点击时在0.7和0的阴影不透明度之间切换图层的阴影。 </p><br><p>你说的这个视图? 重写 CALayer&#8217;的 <code>hitTest(<em>:)</em></code> 方法也可以实现, 实际上在文章的后面你会看到这个方法。 不过这里是上面方法的逻辑:  hit testing 是图层唯一可以做的, 因为它不响应手势。 这就是为什么你要在视图上添加手势T。 </p><br><p>现在修改 <code>pinchGestureRecognized(:)</code> 像这样:</p><br><br><div class="wp_codebox"><table><tr id="p904884"><td class="code" id="p90488code4"><pre class="swift" style="font-family:monospace;">@IBAction <span style="color: #a61390;">func</span> pinchGestureRecognized<span style="color: #002200;">&#40;</span>sender<span style="color: #002200;">:</span> UIPinchGestureRecognizer<span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #a61390;">let</span> offset<span style="color: #002200;">:</span> <span style="color: #400080;">CGFloat</span> <span style="color: #002200;">=</span> sender.scale &lt; <span style="color: #2400d9;">1</span> ? <span style="color: #2400d9;">5.0</span> <span style="color: #002200;">:</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">5.0</span><br>  <span style="color: #a61390;">let</span> oldFrame <span style="color: #002200;">=</span> l.frame<br>  <span style="color: #a61390;">let</span> oldOrigin <span style="color: #002200;">=</span> oldFrame.origin<br>  <span style="color: #a61390;">let</span> newOrigin <span style="color: #002200;">=</span> <span style="color: #400080;">CGPoint</span><span style="color: #002200;">&#40;</span>x<span style="color: #002200;">:</span> oldOrigin.x <span style="color: #002200;">+</span> offset, y<span style="color: #002200;">:</span> oldOrigin.y <span style="color: #002200;">+</span> offset<span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">let</span> newSize <span style="color: #002200;">=</span> <span style="color: #400080;">CGSize</span><span style="color: #002200;">&#40;</span>width<span style="color: #002200;">:</span> oldFrame.width <span style="color: #002200;">+</span> <span style="color: #002200;">&#40;</span>offset <span style="color: #002200;"><em></em></span> <span style="color: #002200;">-</span><span style="color: #2400d9;">2.0</span><span style="color: #002200;">&#41;</span>, height<span style="color: #002200;">:</span> oldFrame.height <span style="color: #002200;">+</span> <span style="color: #002200;">&#40;</span>offset <span style="color: #002200;"></span> <span style="color: #002200;">-</span><span style="color: #2400d9;">2.0</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">let</span> newFrame <span style="color: #002200;">=</span> <span style="color: #400080;">CGRect</span><span style="color: #002200;">&#40;</span>origin<span style="color: #002200;">:</span> newOrigin, size<span style="color: #002200;">:</span> newSize<span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">if</span> newFrame.width &gt;<span style="color: #002200;">=</span> <span style="color: #2400d9;">100.0</span> <span style="color: #002200;">&amp;&amp;</span> newFrame.width &lt;<span style="color: #002200;">=</span> <span style="color: #2400d9;">300.0</span> <span style="color: #002200;">&#123;</span><br>    l.borderWidth <span style="color: #002200;">-=</span> offset<br>    l.cornerRadius <span style="color: #002200;">+=</span> <span style="color: #002200;">&#40;</span>offset <span style="color: #002200;">/</span> <span style="color: #2400d9;">2.0</span><span style="color: #002200;">&#41;</span><br>    l.frame <span style="color: #002200;">=</span> newFrame<br>  <span style="color: #002200;">&#125;</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>你在这里基于用户捏合创建了正负偏移量, 然后调整图层区域的尺寸,边框的宽度和圆角半径。 </p><br><p>图层的圆角半径默认为0, 是个90度圆角的标准矩形。 增加半径创建圆角。 想把正方形变成圆吗? 把圆角半径设置为宽度的一半就可以了。 </p><br><p>注意,调整圆角半径并不会裁剪图层的内容 (星星图片) 除非图层的 <code>masksToBounds</code> 属性设置成 <code>true</code>.</p><br><p>编译运行, 试着单击和捏合视图:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-3.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-3-179x320.png" width="179" height="320" class="aligncenter size-medium wp-image-90661 bordered" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-3-179x320.png 179w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-3-281x500.png 281w" sizes="(max-width: 179px) 100vw, 179px"></a></p><br><p>嗨, 慢慢打磨,你可以成为一个不错的头像制造商! :]</p><br><h2>伟大的 CALayer 之旅</h2><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2015/01/CaLayerTour-e1421621716326.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2015/01/CaLayerTour-e1421621716326.png" width="441" height="423" class="aligncenter size-full wp-image-93973" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/01/CaLayerTour-e1421621716326.png 441w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/01/CaLayerTour-e1421621716326-334x320.png 334w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/01/CaLayerTour-e1421621716326-32x32.png 32w" sizes="(max-width: 441px) 100vw, 441px"></a> </p><br><p>CALayer 已经多了一些属性和方法, 以及一些拥有特定属性和方法的子类。 </p><br><p>对于剩下的文章, 你会需要下面的:</p><br><ul><br><li><a href="http://bit.ly/AppStoreLayerPlayer" title="Layer Player on App Store" target="_blank">The Layer Player App</a></li><br><li><a href="http://bit.ly/LayerPlayer" title="Layer Player at GitHub" target="_blank">The Layer Player Source Code</a></li><br></ul><br><p>这个程序包含10种不同 CALayers 的示例, 这些示例你会在文章里学到。 这是10个示例的预览:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayerTourScenes.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayerTourScenes-700x415.png" width="700" height="415" class="aligncenter size-large wp-image-92164 bordered" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CALayerTourScenes-700x415.png 700w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CALayerTourScenes-480x284.png 480w" sizes="(max-width: 700px) 100vw, 700px"></a></p><br><p>通过下面的例子, 我建议你在 CALayer 程序中玩玩,选择性的看一些源码。 剩余的文章你不需要编码, 坐下来阅读吧 :]</p><br><p>这里有一些很棒的示例你可以添加不同类型 CALayers 到你的工程。 希望你喜欢!</p><br><h2>示例1: CALayer</h2><br><p>你已经看过一个使用 CALayer 的示例, 并且设置了一些属性。 </p><br><p>这里有一些关于 CALayers 的事我还没有提及:</p><br><ul><br><li><em>图层可以有子图层</em>. 就像视图有子视图, 图层也有子图层。 你可以用这个实现一些炫酷的效果!</li><br><li><em>图层属性是动画的</em>. 当你改变一个图层的属性时, 默认它会随着时间产生动画。 你也可以按照自己的时机定制动画。</li><br><li><em>图层是轻量级的</em>. 图层比视图轻量级, 因此它们可以帮你实现更好的效果。</li><br><li><em>图层有很多有用的属性.</em> 你已经看到一些了, 不过让我们再看一些!</li><br></ul><br><p>如你早前看到的, 图层有很多有用的属性。 让我浏览完整的 CALayer 属性列表 &#8211; 一些你没有看过的但是很便捷的!</p><br><br><div class="wp_codebox"><table><tr id="p904885"><td class="code" id="p90488code5"><pre class="swift" style="font-family:monospace;"><span style="color: #11740a; font-style: italic;">// 1</span><br><span style="color: #a61390;">let</span> layer <span style="color: #002200;">=</span> <span style="color: #400080;">CALayer</span><span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>layer.frame <span style="color: #002200;">=</span> someView.bounds<br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 2</span><br>layer.contents <span style="color: #002200;">=</span> <span style="color: #400080;">UIImage</span><span style="color: #002200;">&#40;</span>named<span style="color: #002200;">:</span> <span style="color: #bf1d1a;">&quot;star&quot;</span><span style="color: #002200;">&#41;</span>?.CGImage<br>layer.contentsGravity <span style="color: #002200;">=</span> kCAGravityCenter<br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 3</span><br>layer.magnificationFilter <span style="color: #002200;">=</span> kCAFilterLinear<br>layer.geometryFlipped <span style="color: #002200;">=</span> <span style="color: #a61390;">false</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 4</span><br>layer.backgroundColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span><span style="color: #002200;">&#40;</span>red<span style="color: #002200;">:</span> <span style="color: #2400d9;">11</span><span style="color: #002200;">/</span><span style="color: #2400d9;">255.0</span>, green<span style="color: #002200;">:</span> <span style="color: #2400d9;">86</span><span style="color: #002200;">/</span><span style="color: #2400d9;">255.0</span>, blue<span style="color: #002200;">:</span> <span style="color: #2400d9;">14</span><span style="color: #002200;">/</span><span style="color: #2400d9;">255.0</span>, alpha<span style="color: #002200;">:</span> <span style="color: #2400d9;">1.0</span><span style="color: #002200;">&#41;</span>.<span style="color: #400080;">CGColor</span><br>layer.opacity <span style="color: #002200;">=</span> <span style="color: #2400d9;">1.0</span><br>layer.hidden <span style="color: #002200;">=</span> <span style="color: #a61390;">false</span><br>layer.masksToBounds <span style="color: #002200;">=</span> <span style="color: #a61390;">false</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 5</span><br>layer.cornerRadius <span style="color: #002200;">=</span> <span style="color: #2400d9;">100.0</span><br>layer.borderWidth <span style="color: #002200;">=</span> <span style="color: #2400d9;">12.0</span><br>layer.borderColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.whiteColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.<span style="color: #400080;">CGColor</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 6</span><br>layer.shadowOpacity <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.75</span><br>layer.shadowOffset <span style="color: #002200;">=</span> <span style="color: #400080;">CGSize</span><span style="color: #002200;">&#40;</span>width<span style="color: #002200;">:</span> <span style="color: #2400d9;">0</span>, height<span style="color: #002200;">:</span> <span style="color: #2400d9;">3</span><span style="color: #002200;">&#41;</span><br>layer.shadowRadius <span style="color: #002200;">=</span> <span style="color: #2400d9;">3.0</span><br>someView.layer.addSublayer<span style="color: #002200;">&#40;</span>layer<span style="color: #002200;">&#41;</span></pre></td></tr></table></div><br><br><p>在上面的代码里:</p><br><ol><br><li>创建一个 CALayer 实例并把他设置成 <code>someView</code> 的边界.</li><br><li>给图层设置一张图片作为内容并居中。 注意用下面的图片数据  (<code>CGImage</code>) 赋值. </li><br><li>通过<code>contentsGravity</code>放大图片时使用过滤器, 可以同时改变大小 (resize, resize aspect, and resize aspect fill) 和 位置 (center, top, top-right, right, etc.). </li><br><p>前面的变化没有动画效果, 如果 <code>geometryFlipped</code> 没有设置成 <code>true</code>, 几何位置和阴影会是颠倒的。继续: </p><br><li>你设置了背景色是蕾最喜欢的绿色阴影 :] 并且让图层变的不透明可见。 同时, 你让视图不要遮挡它的内容, 意思是如果它的尺寸小于它的内容 (星星图), 图片不会被裁剪。 </li><br><li>图层的圆角半径设成宽度的一半可以创造圆形边框的视觉效果; 注意图层颜色用 Quartz 颜色赋值 (<code>CGColor</code>).</li><br><li>创建阴影同时设置 <code>shouldRasterize</code> 为 <code>true</code> (下面讨论), 然后把图层添加到视图结构。</li><br></ol><br><p>这是运行结果:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayer-250x250.png" width="250" height="250" class="aligncenter size-thumbnail wp-image-90712" srcset="https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CALayer-250x250.png 250w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CALayer-320x320.png 320w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CALayer-500x500.png 500w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CALayer-32x32.png 32w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CALayer-64x64.png 64w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CALayer-96x96.png 96w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CALayer-128x128.png 128w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CALayer.png 800w" sizes="(max-width: 250px) 100vw, 250px"></p><br><p>CALayer 有两个额外的属性可以提高性能: <code>shouldRasterize</code> 和 <code>drawsAsynchronously</code>. </p><br><p><code>shouldRasterize</code> 默认是 <code>false</code> , 当被设置成 <code>true</code> 它可以提升性能高, 因为图层内容只需要渲染一次就够了。 对于在屏幕上展示动画而又不需要改变外观的对象来说这是完美的。 </p><br><p><code>drawsAsynchronously</code> 是 <code>shouldRasterize</code> 相反的一种属性。 它的值默认也是 <code>false</code> . 把它设置成 <code>true</code> ,在内容必须重复绘制时能提升性能, 比如当你使用发射器图层不断渲染动画颗粒的时候。) </p><br><div class="note"><br><p><em>一个警告</em>: 把图层的 <code>shouldRasterize</code> 或者 <code>drawsAsynchronously</code> 值设置成true 之前要考虑清楚它的影响。 比较值为真假时候的性能,这样你会明白是否需要开启这些特性去提升性能。 如果滥用, 性能可能会急剧下降。<br></p></div><br><p>现在暂时转移注意力到 Layer Player. 它包含可以操作CALayer 属性的很多控件:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayer_5.5.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayer_5.5-180x320.png" width="180" height="320" class="aligncenter size-medium wp-image-91212 bordered" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CALayer_5.5-180x320.png 180w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CALayer_5.5-281x500.png 281w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CALayer_5.5.png 1242w" sizes="(max-width: 180px) 100vw, 180px"></a></p><br><p>玩玩这些控件; 这是感受 CALayer 可以做什么的一种很好的方式!</p><br><div class="note"><em>备注:</em> 图层不是响应链的一部分,所以它不能响应触碰或者视图那种手势, 就像你在 CALayerPlayground 示例中看到的那样。 <p></p><br><p>不过, 你可以敲击测试它们, 你会在 CATransformLayer 中看到示例代码。 你也可以往图层添加自定义动画, 这些动画会在 CAReplicatorLayer 中看到。</p></div><br><h2>示例2: CAScrollLayer</h2><br><p>CAScrollLayer 显示滚动图层的一部分。 它很基础,不能响应用户的触摸甚至不能确定滚动图层的边界, 所以它可以无限做类似防止滚出边界这种很酷的事! :] </p><br><p>UIScrollView 不用 CAScrollLayer 来做这件事, 取而代之的直接改变它的图层边界。 </p><br><p>用 CAScrollLayer 可以做的是设置它的滚动模式为水平或者垂直, 你可以编程让它滚动到特定的位置或区域:</p><br><br><div class="wp_codebox"><table><tr id="p904886"><td class="code" id="p90488code6"><pre class="swift" style="font-family:monospace;"><span style="color: #11740a; font-style: italic;">// In ScrollingView.swift</span><br><span style="color: #a61390;">import</span> UIKit<br>&nbsp;<br><span style="color: #a61390;">class</span> ScrollingView<span style="color: #002200;">:</span> <span style="color: #400080;">UIView</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #11740a; font-style: italic;">// 1</span><br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">class</span> <span style="color: #a61390;">func</span> layerClass<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; AnyClass <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">return</span> CAScrollLayer.<span style="color: #a61390;">self</span><br>  <span style="color: #002200;">&#125;</span><br><span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// In CAScrollLayerViewController.swift</span><br><span style="color: #a61390;">import</span> UIKit<br>&nbsp;<br><span style="color: #a61390;">class</span> CAScrollLayerViewController<span style="color: #002200;">:</span> <span style="color: #400080;">UIViewController</span> <span style="color: #002200;">&#123;</span><br>  @IBOutlet weak <span style="color: #a61390;">var</span> scrollingView<span style="color: #002200;">:</span> ScrollingView<span style="color: #002200;">!</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 2</span><br>  <span style="color: #a61390;">var</span> scrollingViewLayer<span style="color: #002200;">:</span> CAScrollLayer <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">return</span> scrollingView.layer <span style="color: #a61390;">as</span> CAScrollLayer<br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">super</span>.viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    <span style="color: #11740a; font-style: italic;">// 3</span><br>    scrollingViewLayer.scrollMode <span style="color: #002200;">=</span> kCAScrollBoth<br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  @IBAction <span style="color: #a61390;">func</span> tapRecognized<span style="color: #002200;">&#40;</span>sender<span style="color: #002200;">:</span> <span style="color: #400080;">UITapGestureRecognizer</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #11740a; font-style: italic;">// 4</span><br>    <span style="color: #a61390;">var</span> newPoint <span style="color: #002200;">=</span> <span style="color: #400080;">CGPoint</span><span style="color: #002200;">&#40;</span>x<span style="color: #002200;">:</span> <span style="color: #2400d9;">250</span>, y<span style="color: #002200;">:</span> <span style="color: #2400d9;">250</span><span style="color: #002200;">&#41;</span><br>    <span style="color: #400080;">UIView</span>.animateWithDuration<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">0.3</span>, delay<span style="color: #002200;">:</span> <span style="color: #2400d9;">0</span>, options<span style="color: #002200;">:</span> .CurveEaseInOut, animations<span style="color: #002200;">:</span> <span style="color: #002200;">&#123;</span><br>      <span style="color: #002200;">&#91;</span>unowned <span style="color: #a61390;">self</span><span style="color: #002200;">&#93;</span> <span style="color: #a61390;">in</span><br>      <span style="color: #a61390;">self</span>.scrollingViewLayer.scrollToPoint<span style="color: #002200;">&#40;</span>newPoint<span style="color: #002200;">&#41;</span><br>      <span style="color: #002200;">&#125;</span>, completion<span style="color: #002200;">:</span> <span style="color: #a61390;">nil</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>上面的代码:</p><br><ol><br><li>自定义 <code>UIView</code> 子类通过重写 <code>layerClass()</code> 来返回 <code>CAScrollLayer</code>; 这是创建一个新图层并且添加它作为一个子图层的一种选择, 就像示例做的一样。 </li><br><li>一个计算属性用来组织和自定义视图滚动图层的工作。</li><br><li>滚动设置为支持水平和垂直。 </li><br><li>当一个点击被识别后, 新的位置被创建, 滚动图层在一个 <code>UIView</code> 动画中滚动到那个位置。 备注: <code>scrollToPoint(<em>:)</em></code> 和 <code>scrollToRect(:)</code> 不会自动发生动画。 </li><br></ol><br><p>案例学习: 一个ScrollingView 实例, 它包含一个图片视图,这个视图的图片比滚动视图的边界还大。 当你执行上面的代码并单击视图, 可能是这样:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAScrollLayer.gif" width="250" height="250" class="aligncenter size-full wp-image-90738" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAScrollLayer.gif 250w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAScrollLayer-32x32.gif 32w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAScrollLayer-64x64.gif 64w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAScrollLayer-96x96.gif 96w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAScrollLayer-128x128.gif 128w" sizes="(max-width: 250px) 100vw, 250px"></p><br><p>Layer Player 包含很多锁定水平和垂直滚动的控件。 </p><br><p>有一些经验规则决定用或不用 CAScrollLayer:</p><br><ul><br><li><em>如果只是想要轻量级并且需要编程实现滚动</em>: 考虑使用 CAScrollLayer.</li><br><li><em>如果你想让用户滚动</em>: 最好用 UIScrollView. 想了解更多, 查看 <a href="http://www.raywenderlich.com/93104/video-tutorial-swift-scroll-view-school-part-0-introduction" target="_blank" rel="external">18-part video tutorial series</a> .</li><br><li><em>如果你在滚动一个很大的图</em>: 考虑使用 CATiledLayer (更多信息在下面)。</li><br></ul><br><h2>示例3: CATextLayer</h2><br><p>CATextLayer 提供简单快速的纯文本或者属性字符串渲染。 不像 UILabel, CATextLayer 没有指定的 UIFont, 只有 CTFontRef 或 CGFontRef. </p><br><p>下面这块代码一样, 像动态变化一样去操作字体，字体大小，颜色，对齐方式，包围和截断:</p><br><br><div class="wp_codebox"><table><tr id="p904887"><td class="code" id="p90488code7"><pre class="swift" style="font-family:monospace;"><span style="color: #11740a; font-style: italic;">// 1</span><br><span style="color: #a61390;">let</span> textLayer <span style="color: #002200;">=</span> CATextLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>textLayer.frame <span style="color: #002200;">=</span> someView.bounds<br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 2</span><br><span style="color: #a61390;">var</span> string <span style="color: #002200;">=</span> <span style="color: #bf1d1a;">&quot;&quot;</span><br><span style="color: #a61390;">for</span> _ <span style="color: #a61390;">in</span> <span style="color: #2400d9;">1</span>…20 <span style="color: #002200;">&#123;</span><br>  string <span style="color: #002200;">+=</span> <span style="color: #bf1d1a;">&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce auctor arcu quis velit congue dictum. &quot;</span><br><span style="color: #002200;">&#125;</span><br>&nbsp;<br>textLayer.string <span style="color: #002200;">=</span> string<br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 3</span><br><span style="color: #a61390;">let</span> fontName<span style="color: #002200;">:</span> CFStringRef <span style="color: #002200;">=</span> <span style="color: #bf1d1a;">&quot;Noteworthy-Light&quot;</span><br>textLayer.font <span style="color: #002200;">=</span> CTFontCreateWithName<span style="color: #002200;">&#40;</span>fontName, fontSize, <span style="color: #a61390;">nil</span><span style="color: #002200;">&#41;</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 4</span><br>textLayer.foregroundColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.darkGrayColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.<span style="color: #400080;">CGColor</span><br>textLayer.wrapped <span style="color: #002200;">=</span> <span style="color: #a61390;">true</span><br>textLayer.alignmentMode <span style="color: #002200;">=</span> kCAAlignmentLeft<br>textLayer.contentsScale <span style="color: #002200;">=</span> UIScreen.mainScreen<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.scale<br>someView.layer.addSublayer<span style="color: #002200;">&#40;</span>textLayer<span style="color: #002200;">&#41;</span></pre></td></tr></table></div><br><br><p>解释上面的代码:</p><br><ol><br><li>创建一个 CATextLayer 实例并把它的区域设置成<code>someView</code>的区域。 </li><br><li>创建一个重复的字符串并把它设置到文字层。 </li><br><li>创建一个字体并把设置到文字层。 </li><br><li>设置文字层包围和左对齐, (你可以选择设成 natural, right, center 和 justified.),  <code>contentsScale</code> 设置成跟随屏幕, 然后把图层添加到视图层级中。</li><br></ol><br><p>所有图层类, 不仅仅是 CATextLayer, 默认按照1倍因子渲染。 连接到视图的时候, 图层按照当前屏幕自动设置 <code>contentsScale</code> 合适的比例。 手动创建的图层需要显示设置 <code>contentsScale</code> , 否则缩放比例是1，你在视网膜屏幕看到的是模糊的文字。</p><br><p>如果添加到正方形的 <code>someView</code>, 创建的文字图层会像下面这样:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-250x250.png" width="250" height="250" class="aligncenter size-thumbnail wp-image-90750" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-250x250.png 250w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-320x320.png 320w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-500x500.png 500w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-32x32.png 32w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-64x64.png 64w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-96x96.png 96w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-128x128.png 128w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer.png 800w" sizes="(max-width: 250px) 100vw, 250px"></p><br><p>你可以玩玩截断设置, 当你想用省略号切断文本的时候它表现很好。 默认没有设置截断，当然你可以设置成首部截断，末尾截断和中间截断:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-MiddleTruncation.png.png" width="250" height="26" class="aligncenter size-full wp-image-90764"></p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-StartTruncation.png.png" width="250" height="26" class="aligncenter size-full wp-image-90765"></p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-EndTruncation.png" width="250" height="26" class="aligncenter size-full wp-image-90763"></p><br><p>Layer Player 有很多控件来改变 CATextLayer 的属性:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer_5.5.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer_5.5-180x320.png" width="180" height="320" class="aligncenter size-medium wp-image-91214 bordered" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer_5.5-180x320.png 180w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer_5.5-281x500.png 281w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer_5.5.png 1242w" sizes="(max-width: 180px) 100vw, 180px"></a></p><br><h2>示例4: AVPlayerLayer</h2><br><p>AVPlayerLayer 向 AVFoundation 添加了一个图层。 它拥有一个 AVPlayer 来播放 AV 媒体文件 (AVPlayerItems). 这里有个创建 AVPlayerLayer 的例子:</p><br><br><div class="wp_codebox"><table><tr id="p904888"><td class="code" id="p90488code8"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #a61390;">super</span>.viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #11740a; font-style: italic;">// 1</span><br>  <span style="color: #a61390;">let</span> playerLayer <span style="color: #002200;">=</span> AVPlayerLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  playerLayer.frame <span style="color: #002200;">=</span> someView.bounds<br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 2</span><br>  <span style="color: #a61390;">let</span> url <span style="color: #002200;">=</span> <span style="color: #400080;">NSBundle</span>.mainBundle<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.URLForResource<span style="color: #002200;">&#40;</span><span style="color: #bf1d1a;">&quot;someVideo&quot;</span>, withExtension<span style="color: #002200;">:</span> <span style="color: #bf1d1a;">&quot;m4v&quot;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">let</span> player <span style="color: #002200;">=</span> AVPlayer<span style="color: #002200;">&#40;</span>URL<span style="color: #002200;">:</span> url<span style="color: #002200;">&#41;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 3</span><br>  player.actionAtItemEnd <span style="color: #002200;">=</span> .None<br>  playerLayer.player <span style="color: #002200;">=</span> player<br>  someView.layer.addSublayer<span style="color: #002200;">&#40;</span>playerLayer<span style="color: #002200;">&#41;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 4</span><br>  <span style="color: #400080;">NSNotificationCenter</span>.defaultCenter<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.addObserver<span style="color: #002200;">&#40;</span><span style="color: #a61390;">self</span>, selector<span style="color: #002200;">:</span> <span style="color: #bf1d1a;">&quot;playerDidReachEndNotificationHandler:&quot;</span>, name<span style="color: #002200;">:</span> <span style="color: #bf1d1a;">&quot;AVPlayerItemDidPlayToEndTimeNotification&quot;</span>, object<span style="color: #002200;">:</span> player.currentItem<span style="color: #002200;">&#41;</span><br><span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #a61390;">deinit</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #400080;">NSNotificationCenter</span>.defaultCenter<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.removeObserver<span style="color: #002200;">&#40;</span><span style="color: #a61390;">self</span><span style="color: #002200;">&#41;</span><br><span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 5</span><br>@IBAction <span style="color: #a61390;">func</span> playButtonTapped<span style="color: #002200;">&#40;</span>sender<span style="color: #002200;">:</span> <span style="color: #400080;">UIButton</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #a61390;">if</span> playButton.titleLabel?.text <span style="color: #002200;">==</span> <span style="color: #bf1d1a;">&quot;Play&quot;</span> <span style="color: #002200;">&#123;</span><br>    player.play<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    playButton.setTitle<span style="color: #002200;">&#40;</span><span style="color: #bf1d1a;">&quot;Pause&quot;</span>, forState<span style="color: #002200;">:</span> .Normal<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span> <span style="color: #a61390;">else</span> <span style="color: #002200;">&#123;</span><br>    player.pause<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    playButton.setTitle<span style="color: #002200;">&#40;</span><span style="color: #bf1d1a;">&quot;Play&quot;</span>, forState<span style="color: #002200;">:</span> .Normal<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  updatePlayButtonTitle<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  updateRateSegmentedControl<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br><span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 6</span><br><span style="color: #a61390;">func</span> playerDidReachEndNotificationHandler<span style="color: #002200;">&#40;</span>notification<span style="color: #002200;">:</span> <span style="color: #400080;">NSNotification</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #a61390;">let</span> playerItem <span style="color: #002200;">=</span> notification.object <span style="color: #a61390;">as</span> AVPlayerItem<br>  playerItem.seekToTime<span style="color: #002200;">&#40;</span>kCMTimeZero<span style="color: #002200;">&#41;</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>分解上面的代码:</p><br><ol><br><li>创建新的播放器图层并设置它的区域。</li><br><li>用 AV 库创建一个播放器。 </li><br><li>告诉播放器播放完成前什么都不做; 添加附加选项，包括暂停，切换到下一首。 </li><br><li>给 AVPlayer 注册播放结束的通知 (在 deinit 移除通知)。 </li><br><li>当播放按钮被点击, 它会触发控件去播放歌曲并设置按钮的标题。</li><br></ol><br><p>注意这只是一个简单的示例帮助你开始。 在真实的项目里, 以按钮文字为中心是不可取的。</p><br><p>AVPlayerLayer 和 上面创建的 AVPlayer 视觉表现为 AVPlayerItem 实例的第一帧, 像这样:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/AVPlayerItem.png" width="250" height="141" class="aligncenter size-full wp-image-91221"></p><br><p>AVPlayerLayer 有两个附加的属性:</p><br><ul><br><li><code>videoGravity</code> 设置视频显示大小。 </li><br><li><code>readyForDisplay</code> 检测视频是否准备好播放。 </li><br></ul><br><p><code>AVPlayer</code>, 另一方面, 只有很少的附加属性和方法。 有一个要注意的是 <code>rate</code>, 包含从 0 到 1的回放速率。 零代表暂停，1代表正常速率播放视频 (1倍速)。 </p><br><p>然而, 设置 <code>rate</code> 也会指示回放按照这个速度开始。 换种说法, 调用 <code>pause()</code> 和 设置 <code>rate</code> 为 0 效果是一样的, 跟调用 <code>play()</code> 和把 <code>rate</code> 设置成 1是一回事</p><br><p>那么快进，慢镜或者反向播放呢? AVPlayerLayer 也已经包含。 设置 <code>rate</code> 比1大就等于要求播放器以这个倍数的速率开始播放, 例如, 设置 <code>rate</code> 为 2 意味着双倍速。 </p><br><p>你可能会想, 把 <code>rate</code> 设置成负数就会指示播放器按照对应的倍速开始倒着播放。 </p><br><p>当比正常倍速更快回放前 (快进), 不管怎样, AVPlayerItem 实例会调用适当的方法来验证它可以以这个速度回放: </p><br><ul><br><li><code>canPlayFastForward()</code> 针对比 1 大的情况</li><br><li><code>canPlaySlowForward()</code> 针对 0 和 1 之间的情况</li><br><li><code>canPlayReverse()</code> 针对 -1</li><br><li><code>canPlaySlowReverse()</code> 针对 -1 和 0 之间的情况</li><br><li><code>canPlayFastReverse()</code> 针对小于 -1 的情况 </li><br></ul><br><p>大多数视频都可以各种快进, 但是很少有可以倒着播放的。 Layer Player 也包含回放控件:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/AVLayerPlayer_5.5.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/AVLayerPlayer_5.5-180x320.png" width="180" height="320" class="aligncenter size-medium wp-image-91216 bordered" srcset="https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/AVLayerPlayer_5.5-180x320.png 180w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/AVLayerPlayer_5.5-281x500.png 281w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/AVLayerPlayer_5.5.png 1242w" sizes="(max-width: 180px) 100vw, 180px"></a></p><br><h2>示例5: CAGradientLayer</h2><br><p>CAGradientLayer 使得混合两种或多种颜色变得容易, 这样尤其适合做背景。 要配置它, 你要指定 CGColors 数组, 也要指定 <code>startPoint</code> 和 <code>endPoint</code> 来指定梯度图层哪里开始和结束。 </p><br><p>记住, <code>startPoint</code> 和 <code>endPoint</code> 不是明确的点。 相反, 他们在单元坐标空间定义然后在绘制时映射到图层边界。 换句话说,  x 值为1表示这个点在图层的右边界, y 值为1表示这个点在图层的底边界。 </p><br><p>CAGradientLayer 有个 <code>type</code> 属性, 尽管 <code>kCAGradientLayerAxial</code> 是唯一的选项, 它通过数组中的颜色进行线性转换。 </p><br><p>这意味着如果你在 <code>startPoint</code> 和 <code>endPoint</code> 之间绘制一条线 (A), 渐变沿着一条虚拟的线 (B) 发生，这条线垂直于 A, 所有沿着 B 的点都是同样的颜色:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/AxialGradientLayerType.gif" width="300" class="aligncenter size-full wp-image-91240"></p><br><p>或者, 你可以用0和1之间的数组控制 <code>locations</code> 属性，指定相对停止的位置，在这里梯度图层应该使用 <code>colors</code> 数组里的下一个颜色。 </p><br><p>如果未指定，默认停止位置是均匀分布的。 如果 <code>locations</code> 被设置, 那么它的的数量必须匹配 <code>colors</code> 的数量, 否则坏事要发生。 :[</p><br><p>这里有一个创建梯度图层的例子:</p><br><br><div class="wp_codebox"><table><tr id="p904889"><td class="code" id="p90488code9"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">let</span> gradientLayer <span style="color: #002200;">=</span> CAGradientLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>gradientLayer.frame <span style="color: #002200;">=</span> someView.bounds<br>gradientLayer.colors <span style="color: #002200;">=</span> <span style="color: #002200;">&#91;</span>cgColorForRed<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">209.0</span>, green<span style="color: #002200;">:</span> <span style="color: #2400d9;">0.0</span>, blue<span style="color: #002200;">:</span> <span style="color: #2400d9;">0.0</span><span style="color: #002200;">&#41;</span>,<br>  cgColorForRed<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">255.0</span>, green<span style="color: #002200;">:</span> <span style="color: #2400d9;">102.0</span>, blue<span style="color: #002200;">:</span> <span style="color: #2400d9;">34.0</span><span style="color: #002200;">&#41;</span>,<br>  cgColorForRed<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">255.0</span>, green<span style="color: #002200;">:</span> <span style="color: #2400d9;">218.0</span>, blue<span style="color: #002200;">:</span> <span style="color: #2400d9;">33.0</span><span style="color: #002200;">&#41;</span>,<br>  cgColorForRed<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">51.0</span>, green<span style="color: #002200;">:</span> <span style="color: #2400d9;">221.0</span>, blue<span style="color: #002200;">:</span> <span style="color: #2400d9;">0.0</span><span style="color: #002200;">&#41;</span>,<br>  cgColorForRed<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">17.0</span>, green<span style="color: #002200;">:</span> <span style="color: #2400d9;">51.0</span>, blue<span style="color: #002200;">:</span> <span style="color: #2400d9;">204.0</span><span style="color: #002200;">&#41;</span>,<br>  cgColorForRed<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">34.0</span>, green<span style="color: #002200;">:</span> <span style="color: #2400d9;">0.0</span>, blue<span style="color: #002200;">:</span> <span style="color: #2400d9;">102.0</span><span style="color: #002200;">&#41;</span>,<br>  cgColorForRed<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">51.0</span>, green<span style="color: #002200;">:</span> <span style="color: #2400d9;">0.0</span>, blue<span style="color: #002200;">:</span> <span style="color: #2400d9;">68.0</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#93;</span><br>gradientLayer.startPoint <span style="color: #002200;">=</span> <span style="color: #400080;">CGPoint</span><span style="color: #002200;">&#40;</span>x<span style="color: #002200;">:</span> <span style="color: #2400d9;">0</span>, y<span style="color: #002200;">:</span> <span style="color: #2400d9;">0</span><span style="color: #002200;">&#41;</span><br>gradientLayer.endPoint <span style="color: #002200;">=</span> <span style="color: #400080;">CGPoint</span><span style="color: #002200;">&#40;</span>x<span style="color: #002200;">:</span> <span style="color: #2400d9;">0</span>, y<span style="color: #002200;">:</span> <span style="color: #2400d9;">1</span><span style="color: #002200;">&#41;</span><br>someView.layer.addSublayer<span style="color: #002200;">&#40;</span>gradientLayer<span style="color: #002200;">&#41;</span><br>&nbsp;<br><span style="color: #a61390;">func</span> cgColorForRed<span style="color: #002200;">&#40;</span>red<span style="color: #002200;">:</span> <span style="color: #400080;">CGFloat</span>, green<span style="color: #002200;">:</span> <span style="color: #400080;">CGFloat</span>, blue<span style="color: #002200;">:</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; <span style="color: #a61390;">AnyObject</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #a61390;">return</span> <span style="color: #400080;">UIColor</span><span style="color: #002200;">&#40;</span>red<span style="color: #002200;">:</span> red<span style="color: #002200;">/</span><span style="color: #2400d9;">255.0</span>, green<span style="color: #002200;">:</span> green<span style="color: #002200;">/</span><span style="color: #2400d9;">255.0</span>, blue<span style="color: #002200;">:</span> blue<span style="color: #002200;">/</span><span style="color: #2400d9;">255.0</span>, alpha<span style="color: #002200;">:</span> <span style="color: #2400d9;">1.0</span><span style="color: #002200;">&#41;</span>.<span style="color: #400080;">CGColor</span> <span style="color: #a61390;">as</span> <span style="color: #a61390;">AnyObject</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>上面的代码, 你创建了一个梯度图层, 区域跟 <code>someView</code> 边界相匹配, 赋值了一个颜色数组, 设置了开始结束的坐标点, 并且把梯度图层添加到视图层级。 效果如下:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer-250x250.png" width="250" height="250" class="aligncenter size-thumbnail wp-image-91248 bordered" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer-250x250.png 250w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer-320x320.png 320w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer-500x500.png 500w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer-32x32.png 32w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer-64x64.png 64w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer-96x96.png 96w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer-128x128.png 128w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer.png 609w" sizes="(max-width: 250px) 100vw, 250px"></p><br><p>色彩缤纷! 下一步, 你要编一个蝴蝶的程序，然后飞出app，来到你的面前。 :]</p><br><p>Layer Player 提供控件来改变起始位置，颜色和位置:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer_5.5.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer_5.5-180x320.png" width="180" height="320" class="aligncenter size-medium wp-image-91244 bordered" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer_5.5-180x320.png 180w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer_5.5-281x500.png 281w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer_5.5.png 1242w" sizes="(max-width: 180px) 100vw, 180px"></a></p><br><h2>示例6: CAReplicatorLayer</h2><br><p>CAReplicatorLayer 复制图层指定的次数, 用来创建一些很酷的效果。 </p><br><p>每个图层拷贝都有自己的颜色和定位改变, 并且它的绘制可以推迟到给所有的复制器图层一个动画效果。 深度可以保存给复制器图层一个3D效果。 这里是一个例子:</p><br><br><div class="wp_codebox"><table><tr id="p9048810"><td class="code" id="p90488code10"><pre class="swift" style="font-family:monospace;"><span style="color: #11740a; font-style: italic;">// 1</span><br><span style="color: #a61390;">let</span> replicatorLayer <span style="color: #002200;">=</span> CAReplicatorLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>replicatorLayer.frame <span style="color: #002200;">=</span> someView.bounds<br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 2</span><br>replicatorLayer.instanceCount <span style="color: #002200;">=</span> <span style="color: #2400d9;">30</span><br>replicatorLayer.instanceDelay <span style="color: #002200;">=</span> CFTimeInterval<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">1</span> <span style="color: #002200;">/</span> <span style="color: #2400d9;">30.0</span><span style="color: #002200;">&#41;</span><br>replicatorLayer.preservesDepth <span style="color: #002200;">=</span> <span style="color: #a61390;">false</span><br>replicatorLayer.instanceColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.whiteColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.<span style="color: #400080;">CGColor</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 3</span><br>replicatorLayer.instanceRedOffset <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.0</span><br>replicatorLayer.instanceGreenOffset <span style="color: #002200;">=</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">0.5</span><br>replicatorLayer.instanceBlueOffset <span style="color: #002200;">=</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">0.5</span><br>replicatorLayer.instanceAlphaOffset <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.0</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 4</span><br><span style="color: #a61390;">let</span> angle <span style="color: #002200;">=</span> <span style="color: #a61390;">Float</span><span style="color: #002200;">&#40;</span>M_PI <span style="color: #002200;"><em></em></span> <span style="color: #2400d9;">2.0</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">/</span> <span style="color: #2400d9;">30</span><br>replicatorLayer.instanceTransform <span style="color: #002200;">=</span> CATransform3DMakeRotation<span style="color: #002200;">&#40;</span><span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>angle<span style="color: #002200;">&#41;</span>, <span style="color: #2400d9;">0.0</span>, <span style="color: #2400d9;">0.0</span>, <span style="color: #2400d9;">1.0</span><span style="color: #002200;">&#41;</span><br>someView.layer.addSublayer<span style="color: #002200;">&#40;</span>replicatorLayer<span style="color: #002200;">&#41;</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 5</span><br><span style="color: #a61390;">let</span> instanceLayer <span style="color: #002200;">=</span> <span style="color: #400080;">CALayer</span><span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br><span style="color: #a61390;">let</span> layerWidth<span style="color: #002200;">:</span> <span style="color: #400080;">CGFloat</span> <span style="color: #002200;">=</span> <span style="color: #2400d9;">10.0</span><br><span style="color: #a61390;">let</span> midX <span style="color: #002200;">=</span> CGRectGetMidX<span style="color: #002200;">&#40;</span>someView.bounds<span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span> layerWidth <span style="color: #002200;">/</span> <span style="color: #2400d9;">2.0</span><br>instanceLayer.frame <span style="color: #002200;">=</span> <span style="color: #400080;">CGRect</span><span style="color: #002200;">&#40;</span>x<span style="color: #002200;">:</span> midX, y<span style="color: #002200;">:</span> <span style="color: #2400d9;">0.0</span>, width<span style="color: #002200;">:</span> layerWidth, height<span style="color: #002200;">:</span> layerWidth <span style="color: #002200;"></span> <span style="color: #2400d9;">3.0</span><span style="color: #002200;">&#41;</span><br>instanceLayer.backgroundColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.whiteColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.<span style="color: #400080;">CGColor</span><br>replicatorLayer.addSublayer<span style="color: #002200;">&#40;</span>instanceLayer<span style="color: #002200;">&#41;</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 6</span><br><span style="color: #a61390;">let</span> fadeAnimation <span style="color: #002200;">=</span> <span style="color: #400080;">CABasicAnimation</span><span style="color: #002200;">&#40;</span>keyPath<span style="color: #002200;">:</span> <span style="color: #bf1d1a;">&quot;opacity&quot;</span><span style="color: #002200;">&#41;</span><br>fadeAnimation.fromValue <span style="color: #002200;">=</span> <span style="color: #2400d9;">1.0</span><br>fadeAnimation.toValue <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.0</span><br>fadeAnimation.duration <span style="color: #002200;">=</span> <span style="color: #2400d9;">1</span><br>fadeAnimation.repeatCount <span style="color: #002200;">=</span> <span style="color: #a61390;">Float</span><span style="color: #002200;">&#40;</span><span style="color: #a61390;">Int</span>.<span style="color: #a61390;">max</span><span style="color: #002200;">&#41;</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 7</span><br>instanceLayer.opacity <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.0</span><br>instanceLayer.addAnimation<span style="color: #002200;">&#40;</span>fadeAnimation, forKey<span style="color: #002200;">:</span> <span style="color: #bf1d1a;">&quot;FadeAnimation&quot;</span><span style="color: #002200;">&#41;</span></pre></td></tr></table></div><br><br><p>上面的代码做了下面这些事:</p><br><ol><br><li>创建一个 CAReplicatorLayer 实例并且把区域设成 <code>someView</code> 的边界。 </li><br><li>设置复制器图层拷贝数 (<code>instanceCount</code>) 并且推迟绘制。设置复制器图层为 2D (<code>preservesDepth = false</code>) 同时设置它的实例颜色为白色。 </li><br><li>给连续的重复实例添加红绿蓝颜色值偏移量。 默认值都是0, 在所有实例有效保留颜色值。 然而, 这种情况下, 实例颜色最初设置为白色, 以为意味着红绿蓝都是 1.0 。 所以, 设置红色为 0 同时绿蓝偏移值为负数可以突出红色调。 同样的, 把alpha 偏移量设置到连续重复图层的 alpha 。 </li><br><li>创建一个变换实现圆形旋转。 </li><br><li>为复制器图层创建一个实例图层同时设置区域， 第一个实例会在中心 x 和  <code>someView</code>区域的顶部绘制。 这块代码同时设置实例的颜色，然后把实例图层添加到复制器图层。 </li><br><li>产生一个淡入淡出的动画，透明度从 1 到 0 。 </li><br><li>设置实例图层不透明度为0， 那么它就是透明的，直到每个实例被绘制，同时它的颜色和 alpha 值被设置。</li><br></ol><br><p>代码执行结果结果如下:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer.gif" width="250" height="250" class="aligncenter size-full wp-image-91334" srcset="https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer.gif 250w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer-32x32.gif 32w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer-64x64.gif 64w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer-96x96.gif 96w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer-128x128.gif 128w" sizes="(max-width: 250px) 100vw, 250px"></p><br><p>Layer Player 包含了控件去操作大多的属性:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer_5.5.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer_5.5-180x320.png" width="180" height="320" class="aligncenter size-medium wp-image-91349 bordered" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer_5.5-180x320.png 180w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer_5.5-281x500.png 281w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer_5.5.png 1242w" sizes="(max-width: 180px) 100vw, 180px"></a></p><br><h2>示例7: CATiledLayer</h2><br><p>CATiledLayer 以瓷砖形式异步绘制图层内容。 对于大图或者内容很多你每次只需要看很小一块，这很有用, 因为你可以开始看你的内容而不是一次性把它们加入内存。</p><br><p>有个两个方式来处理绘制。 一种是重写 UIView ，使用 CATiledLayer 重复绘制瓷砖来填满视图的背景, 像这样:</p><br><br><div class="wp_codebox"><table><tr id="p9048811"><td class="code" id="p90488code11"><pre class="swift" style="font-family:monospace;"><span style="color: #11740a; font-style: italic;">// In ViewController.swift</span><br><span style="color: #a61390;">import</span> UIKit<br>&nbsp;<br><span style="color: #a61390;">class</span> ViewController<span style="color: #002200;">:</span> <span style="color: #400080;">UIViewController</span> <span style="color: #002200;">&#123;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 1</span><br>  @IBOutlet weak <span style="color: #a61390;">var</span> tiledBackgroundView<span style="color: #002200;">:</span> TiledBackgroundView<span style="color: #002200;">!</span><br>&nbsp;<br><span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// In TiledBackgroundView.swift</span><br><span style="color: #a61390;">import</span> UIKit<br>&nbsp;<br><span style="color: #a61390;">class</span> TiledBackgroundView<span style="color: #002200;">:</span> <span style="color: #400080;">UIView</span> <span style="color: #002200;">&#123;</span><br>&nbsp;<br>  <span style="color: #a61390;">let</span> sideLength <span style="color: #002200;">=</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span><span style="color: #2400d9;">50.0</span><span style="color: #002200;">&#41;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 2</span><br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">class</span> <span style="color: #a61390;">func</span> layerClass<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; AnyClass <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">return</span> CATiledLayer.<span style="color: #a61390;">self</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 3</span><br>  required <span style="color: #a61390;">init</span><span style="color: #002200;">&#40;</span>coder aDecoder<span style="color: #002200;">:</span> <span style="color: #400080;">NSCoder</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">super</span>.<span style="color: #a61390;">init</span><span style="color: #002200;">&#40;</span>coder<span style="color: #002200;">:</span> aDecoder<span style="color: #002200;">&#41;</span><br>    srand48<span style="color: #002200;">&#40;</span><span style="color: #a61390;">Int</span><span style="color: #002200;">&#40;</span><span style="color: #400080;">NSDate</span><span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.timeIntervalSince1970<span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">let</span> layer <span style="color: #002200;">=</span> <span style="color: #a61390;">self</span>.layer <span style="color: #a61390;">as</span> CATiledLayer<br>    <span style="color: #a61390;">let</span> scale <span style="color: #002200;">=</span> UIScreen.mainScreen<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.scale<br>    layer.contentsScale <span style="color: #002200;">=</span> scale<br>    layer.tileSize <span style="color: #002200;">=</span> <span style="color: #400080;">CGSize</span><span style="color: #002200;">&#40;</span>width<span style="color: #002200;">:</span> sideLength <span style="color: #002200;"><em></em></span> scale, height<span style="color: #002200;">:</span> sideLength <span style="color: #002200;"></span> scale<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 4</span><br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> drawRect<span style="color: #002200;">&#40;</span>rect<span style="color: #002200;">:</span> <span style="color: #400080;">CGRect</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">let</span> context <span style="color: #002200;">=</span> <span style="color: #400080;">UIGraphicsGetCurrentContext</span><span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">var</span> red <span style="color: #002200;">=</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>drand48<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">var</span> green <span style="color: #002200;">=</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>drand48<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">var</span> blue <span style="color: #002200;">=</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>drand48<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    CGContextSetRGBFillColor<span style="color: #002200;">&#40;</span>context, red, green, blue, <span style="color: #2400d9;">1.0</span><span style="color: #002200;">&#41;</span><br>    CGContextFillRect<span style="color: #002200;">&#40;</span>context, rect<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>代码解释:</p><br><ol><br><li><code>tiledBackgroundView</code> 放置在 (150, 150) ，宽高都是 300. </li><br><li><code>layerClass()</code> 重写，视图图层被创建为 CATiledLayer 的实例。 </li><br><li><code>rand48()</code> 方法用来产生随机颜色用在 <code>drawRect()</code> 里。 然后扩展图层内容 (转换为 CATiledLayer) 来匹配屏幕的尺寸，接着设置大小。 </li><br><li>重写 <code>drawRect()</code> 来用随机颜色填充视图。</li><br></ol><br><p>最后, 上面的代码绘制了一个 6&#215;6 随机色的瓷砖, 像这样:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer-250x250.png" width="250" height="250" class="aligncenter size-thumbnail wp-image-91465" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer-250x250.png 250w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer-320x320.png 320w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer-32x32.png 32w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer-64x64.png 64w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer-96x96.png 96w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer-128x128.png 128w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer.png 451w" sizes="(max-width: 250px) 100vw, 250px"></p><br><p>Layer Player 在瓷砖背景图上绘制了一条路径来详细说明这个用法:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer_5.5.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer_5.5-180x320.png" width="180" height="320" class="aligncenter size-medium wp-image-91469 bordered" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer_5.5-180x320.png 180w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer_5.5-281x500.png 281w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer_5.5.png 1242w" sizes="(max-width: 180px) 100vw, 180px"></a></p><br><p>上面截图的星星在放大显示时会变的模糊不清:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomedBlurry-250x250.png" width="250" height="250" class="aligncenter size-thumbnail wp-image-91473" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomedBlurry-250x250.png 250w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomedBlurry-320x320.png 320w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomedBlurry-32x32.png 32w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomedBlurry-64x64.png 64w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomedBlurry-96x96.png 96w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomedBlurry-128x128.png 128w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomedBlurry.png 374w" sizes="(max-width: 250px) 100vw, 250px"></p><br><p>模糊度是细节色阶的结果，这个是图层维护的。 CATiledLayer 有两个属性 <code>levelsOfDetail</code> 和 <code>levelsOfDetailBias</code>. </p><br><p><code>levelsOfDetail</code>, 如它名字所说, 是图层维护的细节色阶数。 默认为0, 并且每次提升色阶会按以前色阶的一半的分辨率缓存。 <code>levelsOfDetail</code> 最大值是最低细节色阶至少是一个像素。 </p><br><p><code>levelsOfDetailBias</code>, 换种说法, 是图层缓存的 <i>magnified</i> 细节色阶的数量。 默认为0, 意味着没有额外的放大的色阶被缓存, 并且每次提升色阶将会按照先前色阶分辨率的两倍缓存。 </p><br><p>例如, 把上面模糊的瓷砖图层的 <code>levelsOfDetailBias</code> 值增加到 5，将会导致缓存色阶按照 2x, 4x, 8x, 16x 和 32x 放大, 缩放效果如下:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomed-250x250.png" width="250" height="250" class="aligncenter size-thumbnail wp-image-91475" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomed-250x250.png 250w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomed-320x320.png 320w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomed-32x32.png 32w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomed-64x64.png 64w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomed-96x96.png 96w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomed-128x128.png 128w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomed.png 374w" sizes="(max-width: 250px) 100vw, 250px"></p><br><p>很酷, 是不是? 不过等一等，还有更酷的! </p><br><p>Layer Player 包含了一个图形扩展，文件叫 <a href="https://github.com/scotteg/LayerPlayer/blob/master/LayerPlayer/UIImage%2BTileCutter.swift" title="UIImage+TileCutter.swift" target="_blank">UIImage+TileCutter.swift</a>. 辅导团队成员 <a href="http://www.raywenderlich.com/u/nicklockwood" title="Nick Lockwood" target="_blank" rel="external">Nick Lockwood</a> 为他的终端app改造了这个代码, 这个在他的书里提供了, <i>iOS Core Animation: Advanced Techniques</i>. </p><br><p>它的工作就是把源图像分成若干指定大小的方形图块, 根据每块图的行列位置命名; 例如, windingRoad_6_2.png 在 7列， 3行 (索引从0开始):</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/windingRoad.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/windingRoad-480x300.png" width="480" height="300" class="aligncenter size-medium wp-image-91653" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/windingRoad-480x300.png 480w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/windingRoad-700x437.png 700w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/windingRoad.png 1200w" sizes="(max-width: 480px) 100vw, 480px"></a></p><br><p>给这些图块放置位置, 自定义一个 UIView 子类可以用来绘制这些图块:</p><br><br><div class="wp_codebox"><table><tr id="p9048812"><td class="code" id="p90488code12"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">import</span> UIKit<br>&nbsp;<br><span style="color: #a61390;">class</span> TilingViewForImage<span style="color: #002200;">:</span> <span style="color: #400080;">UIView</span> <span style="color: #002200;">&#123;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 1</span><br>  <span style="color: #a61390;">let</span> sideLength <span style="color: #002200;">=</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span><span style="color: #2400d9;">640.0</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">let</span> fileName <span style="color: #002200;">=</span> <span style="color: #bf1d1a;">&quot;windingRoad&quot;</span><br>  <span style="color: #a61390;">let</span> cachesPath <span style="color: #002200;">=</span> NSSearchPathForDirectoriesInDomains<span style="color: #002200;">&#40;</span>.CachesDirectory, .UserDomainMask, <span style="color: #a61390;">true</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#91;</span><span style="color: #2400d9;">0</span><span style="color: #002200;">&#93;</span> <span style="color: #a61390;">as</span> <span style="color: #a61390;">String</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 2</span><br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">class</span> <span style="color: #a61390;">func</span> layerClass<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; AnyClass <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">return</span> CATiledLayer.<span style="color: #a61390;">self</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 3</span><br>  required <span style="color: #a61390;">init</span><span style="color: #002200;">&#40;</span>coder aDecoder<span style="color: #002200;">:</span> <span style="color: #400080;">NSCoder</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">super</span>.<span style="color: #a61390;">init</span><span style="color: #002200;">&#40;</span>coder<span style="color: #002200;">:</span> aDecoder<span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">let</span> layer <span style="color: #002200;">=</span> <span style="color: #a61390;">self</span>.layer <span style="color: #a61390;">as</span> CATiledLayer<br>    layer.tileSize <span style="color: #002200;">=</span> <span style="color: #400080;">CGSize</span><span style="color: #002200;">&#40;</span>width<span style="color: #002200;">:</span> sideLength, height<span style="color: #002200;">:</span> sideLength<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 4</span><br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> drawRect<span style="color: #002200;">&#40;</span>rect<span style="color: #002200;">:</span> <span style="color: #400080;">CGRect</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">let</span> firstColumn <span style="color: #002200;">=</span> <span style="color: #a61390;">Int</span><span style="color: #002200;">&#40;</span>CGRectGetMinX<span style="color: #002200;">&#40;</span>rect<span style="color: #002200;">&#41;</span> <span style="color: #002200;">/</span> sideLength<span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">let</span> lastColumn <span style="color: #002200;">=</span> <span style="color: #a61390;">Int</span><span style="color: #002200;">&#40;</span>CGRectGetMaxX<span style="color: #002200;">&#40;</span>rect<span style="color: #002200;">&#41;</span> <span style="color: #002200;">/</span> sideLength<span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">let</span> firstRow <span style="color: #002200;">=</span> <span style="color: #a61390;">Int</span><span style="color: #002200;">&#40;</span>CGRectGetMinY<span style="color: #002200;">&#40;</span>rect<span style="color: #002200;">&#41;</span> <span style="color: #002200;">/</span> sideLength<span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">let</span> lastRow <span style="color: #002200;">=</span> <span style="color: #a61390;">Int</span><span style="color: #002200;">&#40;</span>CGRectGetMaxY<span style="color: #002200;">&#40;</span>rect<span style="color: #002200;">&#41;</span> <span style="color: #002200;">/</span> sideLength<span style="color: #002200;">&#41;</span><br>&nbsp;<br>    <span style="color: #a61390;">for</span> row <span style="color: #a61390;">in</span> firstRow…lastRow <span style="color: #002200;">&#123;</span><br>      <span style="color: #a61390;">for</span> column <span style="color: #a61390;">in</span> firstColumn…lastColumn <span style="color: #002200;">&#123;</span><br>        <span style="color: #a61390;">if</span> <span style="color: #a61390;">let</span> tile <span style="color: #002200;">=</span> imageForTileAtColumn<span style="color: #002200;">&#40;</span>column, row<span style="color: #002200;">:</span> row<span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>          <span style="color: #a61390;">let</span> x <span style="color: #002200;">=</span> sideLength <span style="color: #002200;"><em></em></span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>column<span style="color: #002200;">&#41;</span><br>          <span style="color: #a61390;">let</span> y <span style="color: #002200;">=</span> sideLength <span style="color: #002200;"></span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>row<span style="color: #002200;">&#41;</span><br>          <span style="color: #a61390;">let</span> point <span style="color: #002200;">=</span> <span style="color: #400080;">CGPoint</span><span style="color: #002200;">&#40;</span>x<span style="color: #002200;">:</span> x, y<span style="color: #002200;">:</span> y<span style="color: #002200;">&#41;</span><br>          <span style="color: #a61390;">let</span> size <span style="color: #002200;">=</span> <span style="color: #400080;">CGSize</span><span style="color: #002200;">&#40;</span>width<span style="color: #002200;">:</span> sideLength, height<span style="color: #002200;">:</span> sideLength<span style="color: #002200;">&#41;</span><br>          <span style="color: #a61390;">var</span> tileRect <span style="color: #002200;">=</span> <span style="color: #400080;">CGRect</span><span style="color: #002200;">&#40;</span>origin<span style="color: #002200;">:</span> point, size<span style="color: #002200;">:</span> size<span style="color: #002200;">&#41;</span><br>          tileRect <span style="color: #002200;">=</span> CGRectIntersection<span style="color: #002200;">&#40;</span>bounds, tileRect<span style="color: #002200;">&#41;</span><br>          tile.drawInRect<span style="color: #002200;">&#40;</span>tileRect<span style="color: #002200;">&#41;</span><br>        <span style="color: #002200;">&#125;</span><br>      <span style="color: #002200;">&#125;</span><br>    <span style="color: #002200;">&#125;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #a61390;">func</span> imageForTileAtColumn<span style="color: #002200;">&#40;</span>column<span style="color: #002200;">:</span> <span style="color: #a61390;">Int</span>, row<span style="color: #002200;">:</span> <span style="color: #a61390;">Int</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; <span style="color: #400080;">UIImage</span>? <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">let</span> filePath <span style="color: #002200;">=</span> <span style="color: #bf1d1a;">&quot;<span style="color: #2400d9;">(</span>cachesPath)/<span style="color: #2400d9;">(</span>fileName)<em><span style="color: #2400d9;">(</span>column)</em><span style="color: #2400d9;">(</span>row)&quot;</span><br>    <span style="color: #a61390;">return</span> <span style="color: #400080;">UIImage</span><span style="color: #002200;">&#40;</span>contentsOfFile<span style="color: #002200;">:</span> filePath<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>上面的代码:</p><br><ol><br><li>为图块侧边长度创建属性, 再用图片文件名和缓存目录路径创建，后者是 TileCutter 扩展保存图块的地方。 saves tiles. </li><br><li>重写 <code>layerClass()</code> 返回 CATiledLayer. </li><br><li>实现  <code>init(_:)</code>, 在视图图层, 转换为图块图层并设置图块大小。 注意没有必要让 <code>contentsScale</code> 匹配屏幕大小, 因为你直接使用视图的支持图层与创建一个新的图层并且作为子图层添加进去。 </li><br><li>重写 <code>drawRect()</code> ，根据你行列位置绘制每个图块。</li><br></ol><br><p>然后子类型的视图, 和原始图像大小，可以加入滚动视图:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/XcodeTilingViewForImageStoryboard.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/XcodeTilingViewForImageStoryboard-480x286.png" width="480" height="286" class="aligncenter size-medium wp-image-91656" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/XcodeTilingViewForImageStoryboard-480x286.png 480w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/XcodeTilingViewForImageStoryboard-700x417.png 700w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/XcodeTilingViewForImageStoryboard.png 1235w" sizes="(max-width: 480px) 100vw, 480px"></a></p><br><p>就这样, 你现在有了黄油一样滑动大图的手感 (5120 x 3200 ), 感谢 CATiledLayer:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATiledImageLayer.gif" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATiledImageLayer.gif" width="332" height="500" class="aligncenter size-full wp-image-91663"></a></p><br><p>如你所见，上面的动画, 存在显著的变形当我们快速滚动的时候。 最小化这种影响可以使用更小的图块 (上述例子使用图块是 640 x 640) 然后创建一个CATiledLayer 的子类然后重写 <code>fadeDuration()</code>，让它返回 0:</p><br><br><div class="wp_codebox"><table><tr id="p9048813"><td class="code" id="p90488code13"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">class</span> TiledLayer<span style="color: #002200;">:</span> CATiledLayer <span style="color: #002200;">&#123;</span><br>&nbsp;<br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">class</span> <span style="color: #a61390;">func</span> fadeDuration<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; CFTimeInterval <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">return</span> <span style="color: #2400d9;">0.0</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><h2>示例8: CAShapeLayer</h2><br><p>CAShapeLayer 使用可扩展的矢量路径去绘制, 这比使用图片要快很多。其他好处是你不用提供 @2x and @3x 尺寸的图片了。 爽!</p><br><p>此外, 在你处理定制线的粗细，颜色, dashing, 线的合并，都有很多属性, 如果线闭合成一个封闭区域, 并且这个区域需要填充某种颜色。 下面是个例子:</p><br><br><div class="wp_codebox"><table><tr id="p9048814"><td class="code" id="p90488code14"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">import</span> UIKit<br>&nbsp;<br><span style="color: #a61390;">class</span> ViewController<span style="color: #002200;">:</span> <span style="color: #400080;">UIViewController</span> <span style="color: #002200;">&#123;</span><br>&nbsp;<br>  @IBOutlet weak <span style="color: #a61390;">var</span> someView<span style="color: #002200;">:</span> <span style="color: #400080;">UIView</span><span style="color: #002200;">!</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 1</span><br>  <span style="color: #a61390;">let</span> rwColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span><span style="color: #002200;">&#40;</span>red<span style="color: #002200;">:</span> <span style="color: #2400d9;">11</span><span style="color: #002200;">/</span><span style="color: #2400d9;">255.0</span>, green<span style="color: #002200;">:</span> <span style="color: #2400d9;">86</span><span style="color: #002200;">/</span><span style="color: #2400d9;">255.0</span>, blue<span style="color: #002200;">:</span> <span style="color: #2400d9;">14</span><span style="color: #002200;">/</span><span style="color: #2400d9;">255.0</span>, alpha<span style="color: #002200;">:</span> <span style="color: #2400d9;">1.0</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">let</span> rwPath <span style="color: #002200;">=</span> <span style="color: #400080;">UIBezierPath</span><span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">let</span> rwLayer <span style="color: #002200;">=</span> CAShapeLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 2</span><br>  <span style="color: #a61390;">func</span> setUpRWPath<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    rwPath.moveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">0.22</span>, <span style="color: #2400d9;">124.79</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addLineToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">0.22</span>, <span style="color: #2400d9;">249.57</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addLineToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">124.89</span>, <span style="color: #2400d9;">249.57</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addLineToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">249.57</span>, <span style="color: #2400d9;">249.57</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addLineToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">249.57</span>, <span style="color: #2400d9;">143.79</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">249.37</span>, <span style="color: #2400d9;">38.25</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">249.57</span>, <span style="color: #2400d9;">85.64</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">249.47</span>, <span style="color: #2400d9;">38.15</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">206.47</span>, <span style="color: #2400d9;">112.47</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">249.27</span>, <span style="color: #2400d9;">38.35</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">229.94</span>, <span style="color: #2400d9;">71.76</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">163.46</span>, <span style="color: #2400d9;">186.84</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">182.99</span>, <span style="color: #2400d9;">153.19</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">163.61</span>, <span style="color: #2400d9;">186.65</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">146.17</span>, <span style="color: #2400d9;">156.99</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">163.27</span>, <span style="color: #2400d9;">187.03</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">155.48</span>, <span style="color: #2400d9;">173.59</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">128.79</span>, <span style="color: #2400d9;">127.08</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">136.82</span>, <span style="color: #2400d9;">140.43</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">129.03</span>, <span style="color: #2400d9;">126.94</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">109.31</span>, <span style="color: #2400d9;">157.77</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">128.59</span>, <span style="color: #2400d9;">127.18</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">119.83</span>, <span style="color: #2400d9;">141.01</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">89.83</span>, <span style="color: #2400d9;">187.86</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">98.79</span>, <span style="color: #2400d9;">174.52</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">90.02</span>, <span style="color: #2400d9;">188.06</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">56.52</span>, <span style="color: #2400d9;">108.28</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">89.24</span>, <span style="color: #2400d9;">187.23</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">56.56</span>, <span style="color: #2400d9;">109.11</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">64.02</span>, <span style="color: #2400d9;">102.25</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">56.47</span>, <span style="color: #2400d9;">107.75</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">59.24</span>, <span style="color: #2400d9;">105.56</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">101.42</span>, <span style="color: #2400d9;">67.57</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">81.99</span>, <span style="color: #2400d9;">89.78</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">93.92</span>, <span style="color: #2400d9;">78.72</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">108.38</span>, <span style="color: #2400d9;">30.65</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">110.28</span>, <span style="color: #2400d9;">54.47</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">113.01</span>, <span style="color: #2400d9;">39.96</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">10.35</span>, <span style="color: #2400d9;">0.41</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">99.66</span>, <span style="color: #2400d9;">13.17</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">64.11</span>, <span style="color: #2400d9;">2.16</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addLineToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">0.22</span>, <span style="color: #2400d9;">0.07</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addLineToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">0.22</span>, <span style="color: #2400d9;">124.79</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.closePath<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 3</span><br>  <span style="color: #a61390;">func</span> setUpRWLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    rwLayer.path <span style="color: #002200;">=</span> rwPath.CGPath<br>    rwLayer.fillColor <span style="color: #002200;">=</span> rwColor.<span style="color: #400080;">CGColor</span><br>    rwLayer.fillRule <span style="color: #002200;">=</span> kCAFillRuleNonZero<br>    rwLayer.lineCap <span style="color: #002200;">=</span> kCALineCapButt<br>    rwLayer.lineDashPattern <span style="color: #002200;">=</span> <span style="color: #a61390;">nil</span><br>    rwLayer.lineDashPhase <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.0</span><br>    rwLayer.lineJoin <span style="color: #002200;">=</span> kCALineJoinMiter<br>    rwLayer.lineWidth <span style="color: #002200;">=</span> <span style="color: #2400d9;">1.0</span><br>    rwLayer.miterLimit <span style="color: #002200;">=</span> <span style="color: #2400d9;">10.0</span><br>    rwLayer.strokeColor <span style="color: #002200;">=</span> rwColor.<span style="color: #400080;">CGColor</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">super</span>.viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>&nbsp;<br>    <span style="color: #11740a; font-style: italic;">// 4</span><br>    setUpRWPath<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    setUpRWLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    someView.layer.addSublayer<span style="color: #002200;">&#40;</span>rwLayer<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>代码讲解:</p><br><ol><br><li>创建颜色, 路径, 和形状图层对象。</li><br><li>绘制形状图层的路径。 如果你不想写样板代码, 取出 <a href="http://www.paintcodeapp.com" target="_blank" rel="external">PaintCode</a>; 它通过控件或者输入存在的矢量图或者psd文件来生成代码。 </li><br><li>建立形状图层。 路径设置成第二部绘制的路径的 CGPath , 填充颜色为第一步创建的颜色的 CGColor , 填充规则显示设置成非零默认值。<br><ul><br><li>其他唯一选项是奇偶数, 对于这个形状来说，没有交叉路径，填充规则没有太大区别。 </li><br><li>非零规则数 left-to-right 路径 +1 ， right-to-left 路径 -1; 它合计所有路径值，如果总数大于 0 , 它用这些路径填充这些形状。 </li><br><li>本质上, 非零填充形状内部所有点。 </li><br><li>奇偶规则计算构成图形 <i>交叉路径</i> 的总数，并且，如果技术是奇数, 形状被填充。 这绝对是一张图胜过一千个单词。 </li><br><p>构成五边形的奇偶图表交叉路径数目是偶数, 因此五角星没有被填充, 构成三角形的交叉路径数是奇数, 所以三角形被填充了。<br><br><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAShapeLayerFillRules.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAShapeLayerFillRules-480x256.png" width="480" height="256" class="aligncenter size-medium wp-image-91890" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CAShapeLayerFillRules-480x256.png 480w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CAShapeLayerFillRules.png 676w" sizes="(max-width: 480px) 100vw, 480px"></a></p></ul></li><br><li>调用路径绘制和图层建立的代码, 然后把图层添加到视图层级中。 </li><br></ol><br><p>这个代码绘制了 raywenderlich.com 的标志图:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/RayWenderlichLogo.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/RayWenderlichLogo-250x250.png" width="250" height="250" class="aligncenter size-thumbnail wp-image-91840" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/RayWenderlichLogo-250x250.png 250w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/RayWenderlichLogo-320x320.png 320w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/RayWenderlichLogo-32x32.png 32w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/RayWenderlichLogo-64x64.png 64w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/RayWenderlichLogo-96x96.png 96w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/RayWenderlichLogo-128x128.png 128w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/RayWenderlichLogo.png 377w" sizes="(max-width: 250px) 100vw, 250px"></a></p><br><p>假使你很好奇想知道在 <a href="http://www.paintcodeapp.com" target="_blank" rel="external">PaintCode</a> 中这个绘制看起来是:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/PaintCodeRayWenderlichLogo.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/PaintCodeRayWenderlichLogo-480x265.png" width="480" height="265" class="aligncenter size-medium wp-image-91841" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/PaintCodeRayWenderlichLogo-480x265.png 480w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/PaintCodeRayWenderlichLogo-700x387.png 700w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/PaintCodeRayWenderlichLogo.png 1280w" sizes="(max-width: 480px) 100vw, 480px"></a></p><br><p>Layer Player 包含很多控件去操作 CAShapeLayer 的多数属性:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAShapeLayer_5.5.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAShapeLayer_5.5-180x320.png" width="180" height="320" class="aligncenter size-medium wp-image-91843 bordered" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAShapeLayer_5.5-180x320.png 180w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAShapeLayer_5.5-281x500.png 281w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAShapeLayer_5.5.png 1242w" sizes="(max-width: 180px) 100vw, 180px"></a></p><br><div class="note"><br><p><em>备注</em>: 你可能注意到我们跳过了 Layer Player 应用上的下一个示例。 这是因为 CAEAGLLayer 被 CAMetalLayer 淘汰了, 后者跟着 Metal 框架一起在 iOS 8 发布。 你可以在 <a href="http://www.raywenderlich.com/77488/ios-8-metal-tutorial-swift-getting-started" title="iOS 8 Metal Tutorial with Swift: Getting Started" target="_blank" rel="external">这里</a> 找到很棒的 CAMetalLayer 辅导材料。</p><br></div><br><h2>示例9: CATransformLayer</h2><br><p>CATransformLayer 处理 3D 结构很便捷。 它实际上是子图层的容器, 每个子图层都有自己的变换和不透明变化, 不过, 它会忽略其他渲染图层属性的变化, 比如 边框宽度和颜色。 </p><br><p>你不能直接对变换图层做点击测试, 因为它没有 2D 的坐标空间去匹配触摸点, 不过, 可以对独立的子图层做点击测试。 这儿是例子:</p><br><br><div class="wp_codebox"><table><tr id="p9048815"><td class="code" id="p90488code15"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">import</span> UIKit<br>&nbsp;<br><span style="color: #a61390;">class</span> ViewController<span style="color: #002200;">:</span> <span style="color: #400080;">UIViewController</span> <span style="color: #002200;">&#123;</span><br>&nbsp;<br>  @IBOutlet weak <span style="color: #a61390;">var</span> someView<span style="color: #002200;">:</span> <span style="color: #400080;">UIView</span><span style="color: #002200;">!</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 1</span><br>  <span style="color: #a61390;">let</span> sideLength <span style="color: #002200;">=</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span><span style="color: #2400d9;">160.0</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">var</span> redColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.redColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">var</span> orangeColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.orangeColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">var</span> yellowColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.yellowColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">var</span> greenColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.greenColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">var</span> blueColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.blueColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">var</span> purpleColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.purpleColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">var</span> transformLayer <span style="color: #002200;">=</span> CATransformLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 2</span><br>  <span style="color: #a61390;">func</span> setUpTransformLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">var</span> layer <span style="color: #002200;">=</span> sideLayerWithColor<span style="color: #002200;">&#40;</span>redColor<span style="color: #002200;">&#41;</span><br>    transformLayer.addSublayer<span style="color: #002200;">&#40;</span>layer<span style="color: #002200;">&#41;</span><br>&nbsp;<br>    layer <span style="color: #002200;">=</span> sideLayerWithColor<span style="color: #002200;">&#40;</span>orangeColor<span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">var</span> transform <span style="color: #002200;">=</span> CATransform3DMakeTranslation<span style="color: #002200;">&#40;</span>sideLength <span style="color: #002200;">/</span> <span style="color: #2400d9;">2.0</span>, <span style="color: #2400d9;">0.0</span>, sideLength <span style="color: #002200;">/</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">2.0</span><span style="color: #002200;">&#41;</span><br>    transform <span style="color: #002200;">=</span> CATransform3DRotate<span style="color: #002200;">&#40;</span>transform, degreesToRadians<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">90.0</span><span style="color: #002200;">&#41;</span>, <span style="color: #2400d9;">0.0</span>, <span style="color: #2400d9;">1.0</span>, <span style="color: #2400d9;">0.0</span><span style="color: #002200;">&#41;</span><br>    layer.transform <span style="color: #002200;">=</span> transform<br>    transformLayer.addSublayer<span style="color: #002200;">&#40;</span>layer<span style="color: #002200;">&#41;</span><br>&nbsp;<br>    layer <span style="color: #002200;">=</span> sideLayerWithColor<span style="color: #002200;">&#40;</span>yellowColor<span style="color: #002200;">&#41;</span><br>    layer.transform <span style="color: #002200;">=</span> CATransform3DMakeTranslation<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">0.0</span>, <span style="color: #2400d9;">0.0</span>, <span style="color: #002200;">-</span>sideLength<span style="color: #002200;">&#41;</span><br>    transformLayer.addSublayer<span style="color: #002200;">&#40;</span>layer<span style="color: #002200;">&#41;</span><br>&nbsp;<br>    layer <span style="color: #002200;">=</span> sideLayerWithColor<span style="color: #002200;">&#40;</span>greenColor<span style="color: #002200;">&#41;</span><br>    transform <span style="color: #002200;">=</span> CATransform3DMakeTranslation<span style="color: #002200;">&#40;</span>sideLength <span style="color: #002200;">/</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">2.0</span>, <span style="color: #2400d9;">0.0</span>, sideLength <span style="color: #002200;">/</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">2.0</span><span style="color: #002200;">&#41;</span><br>    transform <span style="color: #002200;">=</span> CATransform3DRotate<span style="color: #002200;">&#40;</span>transform, degreesToRadians<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">90.0</span><span style="color: #002200;">&#41;</span>, <span style="color: #2400d9;">0.0</span>, <span style="color: #2400d9;">1.0</span>, <span style="color: #2400d9;">0.0</span><span style="color: #002200;">&#41;</span><br>    layer.transform <span style="color: #002200;">=</span> transform<br>    transformLayer.addSublayer<span style="color: #002200;">&#40;</span>layer<span style="color: #002200;">&#41;</span><br>&nbsp;<br>    layer <span style="color: #002200;">=</span> sideLayerWithColor<span style="color: #002200;">&#40;</span>blueColor<span style="color: #002200;">&#41;</span><br>    transform <span style="color: #002200;">=</span> CATransform3DMakeTranslation<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">0.0</span>, sideLength <span style="color: #002200;">/</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">2.0</span>, sideLength <span style="color: #002200;">/</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">2.0</span><span style="color: #002200;">&#41;</span><br>    transform <span style="color: #002200;">=</span> CATransform3DRotate<span style="color: #002200;">&#40;</span>transform, degreesToRadians<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">90.0</span><span style="color: #002200;">&#41;</span>, <span style="color: #2400d9;">1.0</span>, <span style="color: #2400d9;">0.0</span>, <span style="color: #2400d9;">0.0</span><span style="color: #002200;">&#41;</span><br>    layer.transform <span style="color: #002200;">=</span> transform<br>    transformLayer.addSublayer<span style="color: #002200;">&#40;</span>layer<span style="color: #002200;">&#41;</span><br>&nbsp;<br>    layer <span style="color: #002200;">=</span> sideLayerWithColor<span style="color: #002200;">&#40;</span>purpleColor<span style="color: #002200;">&#41;</span><br>    transform <span style="color: #002200;">=</span> CATransform3DMakeTranslation<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">0.0</span>, sideLength <span style="color: #002200;">/</span> <span style="color: #2400d9;">2.0</span>, sideLength <span style="color: #002200;">/</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">2.0</span><span style="color: #002200;">&#41;</span><br>    transform <span style="color: #002200;">=</span> CATransform3DRotate<span style="color: #002200;">&#40;</span>transform, degreesToRadians<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">90.0</span><span style="color: #002200;">&#41;</span>, <span style="color: #2400d9;">1.0</span>, <span style="color: #2400d9;">0.0</span>, <span style="color: #2400d9;">0.0</span><span style="color: #002200;">&#41;</span><br>    layer.transform <span style="color: #002200;">=</span> transform<br>    transformLayer.addSublayer<span style="color: #002200;">&#40;</span>layer<span style="color: #002200;">&#41;</span><br>&nbsp;<br>    transformLayer.anchorPointZ <span style="color: #002200;">=</span> sideLength <span style="color: #002200;">/</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">2.0</span><br>    applyRotationForXOffset<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">16.0</span>, yOffset<span style="color: #002200;">:</span> <span style="color: #2400d9;">16.0</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 3</span><br>  <span style="color: #a61390;">func</span> sideLayerWithColor<span style="color: #002200;">&#40;</span>color<span style="color: #002200;">:</span> <span style="color: #400080;">UIColor</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; <span style="color: #400080;">CALayer</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">let</span> layer <span style="color: #002200;">=</span> <span style="color: #400080;">CALayer</span><span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    layer.frame <span style="color: #002200;">=</span> <span style="color: #400080;">CGRect</span><span style="color: #002200;">&#40;</span>origin<span style="color: #002200;">:</span> CGPointZero, size<span style="color: #002200;">:</span> <span style="color: #400080;">CGSize</span><span style="color: #002200;">&#40;</span>width<span style="color: #002200;">:</span> sideLength, height<span style="color: #002200;">:</span> sideLength<span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    layer.position <span style="color: #002200;">=</span> <span style="color: #400080;">CGPoint</span><span style="color: #002200;">&#40;</span>x<span style="color: #002200;">:</span> CGRectGetMidX<span style="color: #002200;">&#40;</span>someView.bounds<span style="color: #002200;">&#41;</span>, y<span style="color: #002200;">:</span> CGRectGetMidY<span style="color: #002200;">&#40;</span>someView.bounds<span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    layer.backgroundColor <span style="color: #002200;">=</span> color.<span style="color: #400080;">CGColor</span><br>    <span style="color: #a61390;">return</span> layer<br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #a61390;">func</span> degreesToRadians<span style="color: #002200;">&#40;</span>degrees<span style="color: #002200;">:</span> <span style="color: #a61390;">Double</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; <span style="color: #400080;">CGFloat</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">return</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>degrees <span style="color: #002200;"><em></em></span> M_PI <span style="color: #002200;">/</span> <span style="color: #2400d9;">180.0</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 4</span><br>  <span style="color: #a61390;">func</span> applyRotationForXOffset<span style="color: #002200;">&#40;</span>xOffset<span style="color: #002200;">:</span> <span style="color: #a61390;">Double</span>, yOffset<span style="color: #002200;">:</span> <span style="color: #a61390;">Double</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">let</span> totalOffset <span style="color: #002200;">=</span> sqrt<span style="color: #002200;">&#40;</span>xOffset <span style="color: #002200;"></span> xOffset <span style="color: #002200;">+</span> yOffset <span style="color: #002200;"><em></em></span> yOffset<span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">let</span> totalRotation <span style="color: #002200;">=</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>totalOffset <span style="color: #002200;"></span> M_PI <span style="color: #002200;">/</span> <span style="color: #2400d9;">180.0</span><span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">let</span> xRotationalFactor <span style="color: #002200;">=</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>totalOffset<span style="color: #002200;">&#41;</span> <span style="color: #002200;">/</span> totalRotation<br>    <span style="color: #a61390;">let</span> yRotationalFactor <span style="color: #002200;">=</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>totalOffset<span style="color: #002200;">&#41;</span> <span style="color: #002200;">/</span> totalRotation<br>    <span style="color: #a61390;">let</span> currentTransform <span style="color: #002200;">=</span> CATransform3DTranslate<span style="color: #002200;">&#40;</span>transformLayer.sublayerTransform, <span style="color: #2400d9;">0.0</span>, <span style="color: #2400d9;">0.0</span>, <span style="color: #2400d9;">0.0</span><span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">let</span> rotationTransform <span style="color: #002200;">=</span> CATransform3DRotate<span style="color: #002200;">&#40;</span>transformLayer.sublayerTransform, totalRotation,<br>      xRotationalFactor <span style="color: #002200;"><em></em></span> currentTransform.m12 <span style="color: #002200;">-</span> yRotationalFactor <span style="color: #002200;"></span> currentTransform.m11,<br>      xRotationalFactor <span style="color: #002200;"><em></em></span> currentTransform.m22 <span style="color: #002200;">-</span> yRotationalFactor <span style="color: #002200;"></span> currentTransform.m21,<br>      xRotationalFactor <span style="color: #002200;"><em></em></span> currentTransform.m32 <span style="color: #002200;">-</span> yRotationalFactor <span style="color: #002200;"></span> currentTransform.m31<span style="color: #002200;">&#41;</span><br>    transformLayer.sublayerTransform <span style="color: #002200;">=</span> rotationTransform<br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 5</span><br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> touchesBegan<span style="color: #002200;">&#40;</span>touches<span style="color: #002200;">:</span> <span style="color: #400080;">NSSet</span>, withEvent event<span style="color: #002200;">:</span> <span style="color: #400080;">UIEvent</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">if</span> <span style="color: #a61390;">let</span> location <span style="color: #002200;">=</span> touches.anyObject<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>?.locationInView<span style="color: #002200;">&#40;</span>someView<span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>      <span style="color: #a61390;">for</span> layer <span style="color: #a61390;">in</span> transformLayer.sublayers <span style="color: #002200;">&#123;</span><br>        <span style="color: #a61390;">if</span> <span style="color: #a61390;">let</span> hitLayer <span style="color: #002200;">=</span> layer.hitTest<span style="color: #002200;">&#40;</span>location<span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>          <span style="color: #a61390;">println</span><span style="color: #002200;">&#40;</span><span style="color: #bf1d1a;">&quot;Transform layer tapped!&quot;</span><span style="color: #002200;">&#41;</span><br>          break<br>        <span style="color: #002200;">&#125;</span><br>      <span style="color: #002200;">&#125;</span><br>    <span style="color: #002200;">&#125;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">super</span>.viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>&nbsp;<br>    <span style="color: #11740a; font-style: italic;">// 6</span><br>    setUpTransformLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    someView.layer.addSublayer<span style="color: #002200;">&#40;</span>transformLayer<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>上面的代码做了以下的事:</p><br><ol><br><li>创建边长属性, 正方体各边的颜色, 和变换图层。 </li><br><li>通过创建, 旋转和添加每个面到变换图层来构建正方体。 然后它会设置变换图层的z轴锚点，旋转正方体然后添加到视图层级中。 </li><br><li>创建辅助代码，用指定颜色来创建正方体的每个面, 然后把角度转换为弧度。 为什么用弧度? 简单来说，因为我发现用角度比用弧度更直观。 </li><br><li>基于 x 和 y 偏移来使用旋转。 注意这个代码变换设置为 <code>sublayerTransform</code>, 这会应用到变换图层的子图层。 </li><br><li>通过变换图层的子图层来观察触摸和循环。 这部分点击测试每个图层，一旦检测到点击立即中断测试, 因为没有必要去测试剩余的图层。 </li><br><li>建立转换图层并把它添加到视图层级中。</li><br></ol><br><div class="note"><br><p><em>备注</em>: 这些 <code>currentTransform.m##</code> 是什么鬼? 我很高兴你问到这个问题。 这些都是 CATransform3D 的属性， 表示矩阵的元素, 这个矩阵由一个行列矩形数组构成。<br></p><br><p>想要学习更多用在本例的矩阵变换, 可以下载 <a href="https://github.com/jrturton/3DTransformFun" title="3DTransform Fun" target="_blank">3DTransformFun project</a> , 这是由辅导小组成员 <a href="http://www.raywenderlich.com/u/jrturton" title="Rich Turton" target="_blank" rel="external">Rich Turton</a> 提供， 还有这个 <a href="https://github.com/mpospese/EnterTheMatrix" title="Enter The Matrix" target="_blank">Enter The Matrix project</a> 由 Mark Pospesel 提供。<br></p><br></div><br><p>运行上面的代码，用一个 250 x 250 的视图 <code>someView</code> 会有下面的结果:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer-250x250.png" width="250" height="250" class="aligncenter size-thumbnail wp-image-91859" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer-250x250.png 250w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer-32x32.png 32w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer-64x64.png 64w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer-96x96.png 96w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer-128x128.png 128w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer.png 306w" sizes="(max-width: 250px) 100vw, 250px"></p><br><p>现在, 尝试一些东西: 点击正方体任何地方, &#8220;Transform layer tapped!&#8221; 都会被打印到控制台。 </p><br><p>Layer Player 包含开关去切换每一个子图层的不透明度,  <a href="http://bill.dudney.net/roller/objc/entry/trackball_3d_transforms_made_easy" title="TrackBall - 3D transforms made easy" target="_blank">TrackBall utility from Bill Dudney</a>, <a href="https://github.com/scotteg/TrackBall" title="Swift port of Bill Dudney's original TrackBall Objective-C source code" target="_blank">ported to Swift</a>, 这些使得基于用户手势应用 3D 变换更加简单:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer_5.5.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer_5.5-180x320.png" width="180" height="320" class="aligncenter size-medium wp-image-91862 bordered" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer_5.5-180x320.png 180w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer_5.5-281x500.png 281w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer_5.5.png 1242w" sizes="(max-width: 180px) 100vw, 180px"></a></p><br><h2>示例10: CAEmitterLayer</h2><br><p>CAEmitterLayer 渲染 CAEmitterCell 实例的动态颗粒。CAEmitterLayer 和 CAEmitterCell 都有属性可以去改变渲染的速率, 尺寸, 形状, 颜色, 速度, 生命周期和其他更多。 实例如下:</p><br><br><div class="wp_codebox"><table><tr id="p9048816"><td class="code" id="p90488code16"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">import</span> UIKit<br>&nbsp;<br><span style="color: #a61390;">class</span> ViewController<span style="color: #002200;">:</span> <span style="color: #400080;">UIViewController</span> <span style="color: #002200;">&#123;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 1</span><br>  <span style="color: #a61390;">let</span> emitterLayer <span style="color: #002200;">=</span> CAEmitterLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">let</span> emitterCell <span style="color: #002200;">=</span> CAEmitterCell<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 2</span><br>  <span style="color: #a61390;">func</span> setUpEmitterLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    emitterLayer.frame <span style="color: #002200;">=</span> view.bounds<br>    emitterLayer.seed <span style="color: #002200;">=</span> UInt32<span style="color: #002200;">&#40;</span><span style="color: #400080;">NSDate</span><span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.timeIntervalSince1970<span style="color: #002200;">&#41;</span><br>    emitterLayer.renderMode <span style="color: #002200;">=</span> kCAEmitterLayerAdditive<br>    emitterLayer.drawsAsynchronously <span style="color: #002200;">=</span> <span style="color: #a61390;">true</span><br>    setEmitterPosition<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 3</span><br>  <span style="color: #a61390;">func</span> setUpEmitterCell<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    emitterCell.contents <span style="color: #002200;">=</span> <span style="color: #400080;">UIImage</span><span style="color: #002200;">&#40;</span>named<span style="color: #002200;">:</span> <span style="color: #bf1d1a;">&quot;smallStar&quot;</span><span style="color: #002200;">&#41;</span>?.CGImage<br>&nbsp;<br>    emitterCell.velocity <span style="color: #002200;">=</span> <span style="color: #2400d9;">50.0</span><br>    emitterCell.velocityRange <span style="color: #002200;">=</span> <span style="color: #2400d9;">500.0</span><br>&nbsp;<br>    emitterCell.color <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.blackColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.<span style="color: #400080;">CGColor</span><br>    emitterCell.redRange <span style="color: #002200;">=</span> <span style="color: #2400d9;">1.0</span><br>    emitterCell.greenRange <span style="color: #002200;">=</span> <span style="color: #2400d9;">1.0</span><br>    emitterCell.blueRange <span style="color: #002200;">=</span> <span style="color: #2400d9;">1.0</span><br>    emitterCell.alphaRange <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.0</span><br>    emitterCell.redSpeed <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.0</span><br>    emitterCell.greenSpeed <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.0</span><br>    emitterCell.blueSpeed <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.0</span><br>    emitterCell.alphaSpeed <span style="color: #002200;">=</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">0.5</span><br>&nbsp;<br>    <span style="color: #a61390;">let</span> zeroDegreesInRadians <span style="color: #002200;">=</span> degreesToRadians<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">0.0</span><span style="color: #002200;">&#41;</span><br>    emitterCell.spin <span style="color: #002200;">=</span> degreesToRadians<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">130.0</span><span style="color: #002200;">&#41;</span><br>    emitterCell.spinRange <span style="color: #002200;">=</span> zeroDegreesInRadians<br>    emitterCell.emissionRange <span style="color: #002200;">=</span> degreesToRadians<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">360.0</span><span style="color: #002200;">&#41;</span><br>&nbsp;<br>    emitterCell.lifetime <span style="color: #002200;">=</span> <span style="color: #2400d9;">1.0</span><br>    emitterCell.birthRate <span style="color: #002200;">=</span> <span style="color: #2400d9;">250.0</span><br>    emitterCell.xAcceleration <span style="color: #002200;">=</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">800.0</span><br>    emitterCell.yAcceleration <span style="color: #002200;">=</span> <span style="color: #2400d9;">1000.0</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 4</span><br>  <span style="color: #a61390;">func</span> setEmitterPosition<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    emitterLayer.emitterPosition <span style="color: #002200;">=</span> <span style="color: #400080;">CGPoint</span><span style="color: #002200;">&#40;</span>x<span style="color: #002200;">:</span> CGRectGetMidX<span style="color: #002200;">&#40;</span>view.bounds<span style="color: #002200;">&#41;</span>, y<span style="color: #002200;">:</span> CGRectGetMidY<span style="color: #002200;">&#40;</span>view.bounds<span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #a61390;">func</span> degreesToRadians<span style="color: #002200;">&#40;</span>degrees<span style="color: #002200;">:</span> <span style="color: #a61390;">Double</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; <span style="color: #400080;">CGFloat</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">return</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>degrees <span style="color: #002200;">*</span> M_PI <span style="color: #002200;">/</span> <span style="color: #2400d9;">180.0</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">super</span>.viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>&nbsp;<br>    <span style="color: #11740a; font-style: italic;">// 5</span><br>    setUpEmitterLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    setUpEmitterCell<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    emitterLayer.emitterCells <span style="color: #002200;">=</span> <span style="color: #002200;">&#91;</span>emitterCell<span style="color: #002200;">&#93;</span><br>    view.layer.addSublayer<span style="color: #002200;">&#40;</span>emitterLayer<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 6</span><br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> traitCollectionDidChange<span style="color: #002200;">&#40;</span>previousTraitCollection<span style="color: #002200;">:</span> UITraitCollection?<span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    setEmitterPosition<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>上面的代码做了下面的事情:</p><br><ol><br><li>创建发射器图层和单元格。<br></li><li>通过如下方式建立发射器图层:<br><ul><br><li>为图层随机送产生器提供种子，产生器会为图层的发射器单元格随机生成某种属性, 比如速度。 下面的注释会做进一步解释。 </li><br><li>在上面图层的背景色和边框上渲染发射器单元, 使用命令由 <code>renderMode</code> 指定。<br><div class="note"><br><p><em>备注</em>:  目前苹果的文档错误的指出, 这个属性值定义在 Emitter Modes 下。 而实际上, renderMode 的值定义在 Emitter Render Order 下。 默认值是无序的, 额外的选项包括 oldest first, oldest last, back to front 和 additive. </p><br></div><br></li><br><li>把 <code>drawsAsynchronously</code> 设置成 <code>true</code>, 这个可以提升性能, 因为发射器图层必须连续重绘发射单元。 </li><br><li>下一步, 发射位置通过辅助方法设置- 注释4了解更多。 这是好例子去学习如何把 <code>drawsAsynchronously</code> 设置成 <code>true</code> , 这会提升性能并使动画更平顺。</li><br></ul><br></li><li>这块做了很多事!<br><ul><br><li>给发射单元设置图片作为内容 (这个图片在 Layer Player 工程里可以用)。 </li><br><li>然后指定了初始速度和最大方差 (<code>velocityRange</code>); 发射图层使用上述的种子创建一个随机数生成器，这个发射器在 (初始值 +/- 范围值) 之内生成随机数。 随机发生在 <em>Range</em> 结尾的任何属性上。</li><br><li>颜色设置成黑色, 允许方差 (下面讨论) 从默认白色改变, 白色会产生明亮的颗粒。 </li><br><li>接下来设置一系列颜色, 对 <code>velocityRange</code> 使用相同的随机化, 这个时候为每个颜色指定方差的范围。 种子值在单元生命周期控制每个颜色的变化速度。 </li><br><li>下一步, 第三块代码指出怎样围绕一个循环的圆锥体发射单元格。 更多细节: 它设置了发射单元的旋转速度和发射范围。 此外, 发射范围决定发射单元如何围绕圆锥体发射, 这个值定义在 <code>emissionRange</code> , 用弧度指定。<br></li><li>设置单元格生命周期为 1 秒。 这个属性默认值是 0, 所以如果你不显示的设置这个值, 单元格永远不会出现! 对 <code>birthRate</code> (每秒) 也是一样; 默认值也是 0, 因此这个值必须设置成某个整数来保证单元格会出现。<br></li><li>最后, 单元 x 和 y 加速被设置; 这些值影响颗粒发射的视觉角度。</li><br></ul><br></li><li>把角度转换为弧度, 把发射单元位置设置到视图的中心。<br></li><li>建立发射图层和单元, 然后把单元格添加到图层,再把图层加到视图层级中。<br></li></ol><br><p>爽! 我知道这个信息量太大, 不过你坚韧灵活。</p><br><p>代码运行结果提醒我这些 <a href="https://www.youtube.com/watch?v=oT0JWGPXnTg" title="Sean Hayes - The More You Know Commercial" target="_blank">The More You Know</a> 商业广告:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAEmitterLayer2.gif" width="350" height="242" class="aligncenter size-full wp-image-92125"></p><br><p>Layer Player 包含控件来调整所有上面提到的属性, 还多了几个:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAEmitterLayer_5.5.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAEmitterLayer_5.5-180x320.png" width="180" height="320" class="aligncenter size-medium wp-image-92127 bordered" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CAEmitterLayer_5.5-180x320.png 180w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CAEmitterLayer_5.5-281x500.png 281w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CAEmitterLayer_5.5.png 1242w" sizes="(max-width: 180px) 100vw, 180px"></a></p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/victorious-e1419192669236.png" width="147" height="300" class="alignright size-full wp-image-92137"></p><br><br><br></html>
]]></content>
    
    <summary type="html">
    
      &lt;html lang=&quot;en-US&quot; class=&quot;no-js windows&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;link rel=&quot;stylesheet&quot; id=&quot;wpsqt-main-css&quot; href=&quot;https://cdn3.raywenderlich.com/wp-content/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>UIStackView 使用指南</title>
    <link href="http://yoursite.com/2016/09/14/UIStackView-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2016/09/14/UIStackView-使用指南/</id>
    <published>2016-09-14T07:14:17.000Z</published>
    <updated>2016-09-19T08:38:23.000Z</updated>
    
    <content type="html"><![CDATA[<p></p>
<p><link rel="stylesheet" id="wpsqt-main-css" href="https://cdn3.raywenderlich.com/wp-content/plugins/wp-survey-and-quiz-tool/css/main.css?ver=4.5.2" type="text/css" media="all"></p>
<p><link rel="stylesheet" id="style-main-css" href="https://cdn4.raywenderlich.com/wp-content/themes/raywenderlich/style.min.css?ver=1471520796" type="text/css" media="all"></p>
<link rel="stylesheet" id="contact-form-7-css" href="https://cdn1.raywenderlich.com/wp-content/plugins/contact-form-7/includes/css/styles.css?ver=4.4.1" type="text/css" media="all">

<div id="attachment_114189" style="width: 260px" class="wp-caption alignright"><img class="wp-image-114189 size-thumbnail" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/iOS9_feast_UIStackView-250x250.jpg" width="250" height="250" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/iOS9_feast_UIStackView-250x250.jpg 250w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/iOS9_feast_UIStackView-320x320.jpg 320w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/iOS9_feast_UIStackView.jpg 500w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/iOS9_feast_UIStackView-32x32.jpg 32w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/iOS9_feast_UIStackView-64x64.jpg 64w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/iOS9_feast_UIStackView-96x96.jpg 96w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/iOS9_feast_UIStackView-128x128.jpg 128w" sizes="(max-width: 250px) 100vw, 250px"><p class="wp-caption-text">你肯定想知道在使用堆栈视图前是怎么挺过来的!</p></div><br><p>我们都遇见过。 有个需要动态增删视图的新需求, 也需要重新定位临近视图。</p><br><p>你用什么方法? 你通过在故事板添加outlets来约束实现激活或者去激活这些视图? 或者用第三方库? 或者根据复杂度你会在代码实现。</p><br><p>现在介绍 <code>UIStackView</code>,  Stack 视图提供了一种方式去水平或者垂直布局一组视图。 通过配置一些简单的属性例如对齐方式,分布方式,间隔, 你可以在可用空间里定义包含的视图该如何调整布局。</p><br><br><h2>开始</h2><br><p>这篇 UIStackView 指导, 你会工作在一个叫<em>Vacation Spots</em>的程序. 这是个简单的程序，向你展示一系列的地方，让你远离当下一切。</p><br><p>现在先别打包行囊, 因为有一些问题你要用堆栈视图来修复, 肯定比你用 Auto Layout简单的多。</p><br><p>先下载 <a href="http://www.raywenderlich.com/wp-content/uploads/2015/09/VacationSpots_Starter.zip" target="_blank" rel="external">开始工程</a> 在 <em>iPhone 6 Simulator</em>上运行。 你会看你一堆你可以去旅行的地方。</p><br><p><img class="aligncenter size-large wp-image-114555 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/01-table-view-is-now-correct_750x1334-281x500.png" width="281" height="500" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/01-table-view-is-now-correct_750x1334-281x500.png 281w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/01-table-view-is-now-correct_750x1334-180x320.png 180w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/01-table-view-is-now-correct_750x1334.png 750w" sizes="(max-width: 281px) 100vw, 281px"></p><br><p>点击 <em>London</em> 单元可以查看伦敦的详情。</p><br><p>扫一眼, 这个界面看起来还okay, 但是有一些问题。</p><br><ol start="1"><br><li>看一下位于界面底部的按钮行。 他们之间现在是固定间距的位置, 所以他们没有适配屏幕的宽度。 为了看到问题, <em>Command-left</em> 旋转屏幕看看。</li><br></ol><br><p><img class="aligncenter size-medium wp-image-114556 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/02-issues-visible-in-landscape-view_1334x750-480x270.png" width="480" height="270" srcset="https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/02-issues-visible-in-landscape-view_1334x750-480x270.png 480w, https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/02-issues-visible-in-landscape-view_1334x750-700x394.png 700w, https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/02-issues-visible-in-landscape-view_1334x750-266x151.png 266w, https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/02-issues-visible-in-landscape-view_1334x750.png 1334w" sizes="(max-width: 480px) 100vw, 480px"></p><br><ol start="2"><br><li>点击靠近 <em>WEATHER</em> 的 <em>Hide</em> 按钮. 它可以隐藏文字, 可是它不能复位位于它下面的区域, 留下了一块空白。</li><br></ol><br><p><img class="aligncenter size-large wp-image-114557 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/03-hide-weather-issue_750x1334-281x500.png" width="281" height="500" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/03-hide-weather-issue_750x1334-281x500.png 281w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/03-hide-weather-issue_750x1334-180x320.png 180w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/03-hide-weather-issue_750x1334.png 750w" sizes="(max-width: 281px) 100vw, 281px"></p><br><ol start="3"><br><li>区域顺序可以调整。 <em>what to see</em> 区域刚好位于 <em>why visit</em> 下方可能更合逻辑, 而是不是有个 <em>weather</em> 在两者中间。</li><br><li>横屏的时候,底面的按钮组太靠近页面边界了。 减少不同区域的间距可能会比较好 – 仅在横屏模式下。</li><br></ol><br><p>既然有了改进的想法, 是时候研究工程了。</p><br><p>打开 <em>Main.storyboard</em> 看一下 <em>Spot Info View Controller</em> scene。 有一些颜色在你的堆栈视图。</p><br><p><img class="aligncenter size-large wp-image-114558 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/04-colorful-scene-in-storyboard_504x636-396x500.png" width="396" height="500" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/04-colorful-scene-in-storyboard_504x636-396x500.png 396w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/04-colorful-scene-in-storyboard_504x636-254x320.png 254w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/04-colorful-scene-in-storyboard_504x636.png 504w" sizes="(max-width: 396px) 100vw, 396px"></p><br><p>这些标签和按钮设置了太多的背景色,在运行时将要被清除。 在这个故事板, 他们只是用来视觉展示如何通过改变属性值影响内嵌视图的frame。</p><br><p>你现在不需要做这些, 但是如果你想在运行时看到这些背景色,可以在 <code>SpotInfoViewController</code>里放开<code>viewDidLoad()</code>下面的代码。</p><br><br><div class="wp_codebox"><table><tr id="p1145521"><td class="code" id="p114552code1"><pre class="swift" style="font-family:monospace;"><span style="color: #11740a; font-style: italic;">// Clear background colors from labels and buttons</span><br><span style="color: #a61390;">for</span> view <span style="color: #a61390;">in</span> backgroundColoredViews <span style="color: #002200;">&#123;</span><br>  view.backgroundColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.clearColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div>

<p>同时, 任何outlet-connected的标签都设置成他们关联的outlet名字。 这个比较容易区分哪个标签运行时更新了文字。 例如,  <em>&lt;</em><em>whyVisitLabel&gt;</em> 关联到:</p>

<div class="wp_codebox"><table><tr id="p1145522"><td class="code" id="p114552code2"><pre class="swift" style="font-family:monospace;">@IBOutlet weak <span style="color: #a61390;">var</span> whyVisitLabel<span style="color: #002200;">:</span> <span style="color: #400080;">UILabel</span><span style="color: #002200;">!</span></pre></td></tr></table></div>

<p>另外需要注意的是故事板里的scenes 不是默认的 600 x 600。</p><br><p>Size classes 仍然可以用, 但是初始的导航控制器已经设置成 <em>iPhone 4-inch</em> ,在 <em>Attributes inspector</em>的<em>Simulated Metrics</em> 区域。 这个仅仅为了跟故事板配合使用更容易一些; simulated metrics 属性不影响运行 — 视图会根据不同设备自动调整尺寸。</p><br><p><img class="aligncenter size-full wp-image-114559 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/05-simulated-metrics-iphone-4-inch_639x173.png" width="639" height="173" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/05-simulated-metrics-iphone-4-inch_639x173.png 639w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/05-simulated-metrics-iphone-4-inch_639x173-480x130.png 480w" sizes="(max-width: 639px) 100vw, 639px"></p><br><h2>你的第一个堆栈视图</h2><br><p>使用堆栈视图首先要修复的问题是底部按钮行的间距。一个堆栈视图可以沿着坐标轴用很多方式分布他的视图, 其中之一就是使视图之间有相等的间距。</p><br><p>幸运的是, 在一个新堆栈视图中嵌入视图并不复杂。 首先, 选中 <em>Spot Info View Controller</em>下面的所有按钮, <em>clicking</em> 一个, 然后 <em>Command-click</em> 其他两个:</p><br><p><img class="aligncenter size-full wp-image-114560 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/06-select-bottom-row-of-buttons_420x80.png" width="420" height="80"></p><br><p>如果大纲视图尚未打开, 在故事板画布的左下方通过 <em>Show Document Outline</em> 按钮打开:</p><br><p><img class="aligncenter size-full wp-image-114561 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/07-document-outline-button_120x40.png" width="120" height="40"></p><br><p>在大纲视图中验证3个按钮是否都已经选中:</p><br><p><img class="aligncenter size-full wp-image-114562 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/08-verify-button-selection_360x90.png" width="360" height="90"></p><br><p>如果没有完全选中, 你可以用 <em>Command-click</em> 在大纲视图中选中它们。</p><br><p>选好后, 点击故事板画布右下方自动布局工具条下的<em>Stack</em> 按钮:</p><br><p><img class="aligncenter size-full wp-image-114563 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/09-stack_button_outlined_148x52.png" width="148" height="52"></p><br><p>所有的按钮会嵌入一个新的堆栈视图:</p><br><p><img class="aligncenter size-full wp-image-114564 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/10-bottom-row-is-now-in-stack-view_640x100.png" width="640" height="100" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/10-bottom-row-is-now-in-stack-view_640x100.png 640w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/10-bottom-row-is-now-in-stack-view_640x100-480x75.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>现在所有按钮都是齐平的 – 稍后你可以调整它们。</p><br><p>虽然堆栈视图负责按钮的位置, 你还是需要添加约束来约定堆栈视图自身的位置。</p><br><p>当你在堆栈视图嵌入一个视图后, 它与其他视图的约束就被移除了。比如, 之前在一个堆栈视图嵌入的按钮组, <em>Submit Rating</em> 按钮的顶部和<em>Rating</em>标签的底部有一个垂直的间距约束:</p><br><p><img class="aligncenter size-full wp-image-114565 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/11-prior-constraint_420x90.png" width="420" height="90"></p><br><p>点击 <em>Submit Rating</em> 按钮可以看到它已经没有任何约束了:</p><br><p><img class="aligncenter size-full wp-image-114566 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/12-no-more-constraints_400x80.png" width="400" height="80"></p><br><p>另外一个验证约束被移除的方式是查看 <em>Size inspector</em> (⌥⌘5):</p><br><p><img class="aligncenter size-full wp-image-114567 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/13-check-size-inspector_640x80.png" width="640" height="80" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/13-check-size-inspector_640x80.png 640w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/13-check-size-inspector_640x80-480x60.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>为了添加堆栈视图自身位置的约束, 首先你要选中它。 如果内嵌视图充满了堆栈视图,想在故事板中想选中它有点棘手。</p><br><p>简单的方法是在大纲视图中选中它:</p><br><p><img class="aligncenter size-full wp-image-114568 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/14-stack-view-document-outline-selection_660x80.png" width="660" height="80" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/14-stack-view-document-outline-selection_660x80.png 660w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/14-stack-view-document-outline-selection_660x80-480x58.png 480w" sizes="(max-width: 660px) 100vw, 660px"></p><br><p>另外一个方法是按住 <em>Shift</em> 和 <em>Right-click</em> 选中堆栈视图中的任何视图, 或者按住 <em>Control-Shift-click</em> ,如果你使用的是触摸板。 在你点击的地方,会显示视图层级的菜单, 你可以很容易在菜单中选中堆栈视图 。</p><br><p>现在, 使用<em>Shift-Right-click</em> 方法来选中它:</p><br><p><img class="aligncenter size-full wp-image-114569 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/15-select-stack-view-in-view-hierarchy-menu_400x280.png" width="400" height="280"></p><br><p>现在, 点击自动布局工具条的 <em>Pin</em> 按钮来给它添加约束:</p><br><p><img class="aligncenter size-full wp-image-114570 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/16-pin-button_142x57.png" width="142" height="57"></p><br><p>首先选中 <em>Constrain to margins</em>。 然后给堆栈视图的边界添加下面的约束:</p>

<div class="wp_codebox"><table><tr id="p1145523"><td class="code" id="p114552code3"><pre class="bash" style="font-family:monospace;">Top: <span style="color: #000000;">20</span>, Leading: <span style="color: #000000;">0</span>, Trailing: <span style="color: #000000;">0</span>, Bottom: <span style="color: #000000;">0</span></pre></td></tr></table></div>

<p>仔细检查上下左右的约束确保 <em>I-beams</em> 是选中的。 然后点击 <em>Add 4 Constraints</em>:</p><br><p><img class="aligncenter size-full wp-image-114571 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/17-bottom-stack-view-constraints_264x364.png" width="264" height="364" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/17-bottom-stack-view-constraints_264x364.png 264w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/17-bottom-stack-view-constraints_264x364-232x320.png 232w" sizes="(max-width: 264px) 100vw, 264px"></p><br><p>现在堆栈视图尺寸是正确的了, 可是它把第一个按钮拉伸来充满了额外的空间:</p><br><p><img class="aligncenter size-full wp-image-114572 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/18-first-button-is-stretched_400x80.png" width="400" height="80"></p><br><p><code>distribution</code> 属性用来决定堆栈视图如何沿着坐标轴布局它的视图集。 现在, 它的值设为 <code>Fill</code>, 意思是所有视图沿着坐标轴填充堆栈视图 。 要达到这个目的, 堆栈视图只能拉伸一个视图来填充额外的空间, 它拉伸水平内容优先级最低的视图, 如果所有的属性是一样的, 它将拉伸第一个视图。</p><br><p>不过, 你不想他们完全充满堆栈视图 – 你希望它们之间间距相同。</p><br><p>确保堆栈视图仍然是选中的, 打开 <em>Attributes inspector</em>。 把 <em>Distribution</em> 的值从 <em>Fill</em> 改成 <em>Equal Spacing</em>:</p><br><p><img class="aligncenter size-full wp-image-114573 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/19-change-distribution-to-equal-spacing_640x148.png" width="640" height="148" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/19-change-distribution-to-equal-spacing_640x148.png 640w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/19-change-distribution-to-equal-spacing_640x148-480x111.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>现在编译运行, 点击任意单元格, 旋转模拟器 (⌘→). 你会发现底部按钮之间是相等的间距了!</p><br><p><img class="aligncenter size-medium wp-image-114574 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/20-now-buttons-are-equally-spaced_1334x750-480x270.png" width="480" height="270" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/20-now-buttons-are-equally-spaced_1334x750-480x270.png 480w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/20-now-buttons-are-equally-spaced_1334x750-700x394.png 700w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/20-now-buttons-are-equally-spaced_1334x750-266x151.png 266w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/20-now-buttons-are-equally-spaced_1334x750.png 1334w" sizes="(max-width: 480px) 100vw, 480px"></p><br><p>在没有堆栈视图的情况下要实现这个, 你需要用垫片视图, 每个按钮之间要有一个。 你还要给垫片视图添加等距间隔,还要添加大量的约束来确保垫片视图的位置是正确的。</p><br><p>大概像下面这样。 为了可见性, 垫片视图已经加上了灰色的背景:</p><br><p><img class="aligncenter size-full wp-image-114575 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/21-alternate-solution-1_346x76.png" width="346" height="76"></p><br><p>如果只是在故事板中做一次,这也不是太大的事, 但是大部门的视图是动态的。 运行时添加一个新按钮或者隐藏存在的按钮不是一个简单的工作,因为邻近的垫片视图和约束。</p><br><p>想要在堆栈视图中隐藏一个视图, 你要做的所有的事仅仅是设置视图的 <code>hidden</code> 属性为 <code>true</code> ,堆栈视图负责处理剩下的视图。 你可以用这个方法修复 <em>WEATHER</em> 标签的问题当用户隐藏下面的文字。 在把天气块加入堆栈视图后，你可以晚点处理这个。</p><br><h2>转换区域</h2><br><p>你要转换 <code>SpotInfoViewController</code> 中所有其他的区域去使用堆栈视图。 这会帮你很容易的实现剩余的工作。 下一步你将转换评级区域。</p><br><h3>评级区域</h3><br><p>在你创建的堆栈视图的上方, 选择 <em>RATING</em> 标签和靠着它的星星标签:</p><br><p><img class="aligncenter wp-image-114576 size-full bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/22-select-rating-label-and-stars-label_640x74.png" width="640" height="74" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/22-select-rating-label-and-stars-label_640x74.png 640w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/22-select-rating-label-and-stars-label_640x74-480x56.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>接着点击 <em>Stack</em> 按钮把它们嵌入堆栈视图:</p><br><p><img class="aligncenter size-full wp-image-114577 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/23-after-clicking-stack-button_640x74.png" width="640" height="74" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/23-after-clicking-stack-button_640x74.png 640w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/23-after-clicking-stack-button_640x74-480x56.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>现在点击 <em>Pin</em> 按钮. 选中 <em>Constrain to margins</em> 然后添加下面 <em>three</em> constraints:</p>

<div class="wp_codebox"><table><tr id="p1145524"><td class="code" id="p114552code4"><pre class="bash" style="font-family:monospace;">Top: <span style="color: #000000;">20</span>, Leading: <span style="color: #000000;">0</span>, Bottom: <span style="color: #000000;">20</span></pre></td></tr></table></div>

<p><img class="aligncenter size-full wp-image-114578 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/24-add-second-stack-view-constraints_264x171.png" width="264" height="171"></p><br><p>现在去 <em>Attributes inspector</em> 设置间距为 <em>8</em>:</p><br><p><img class="aligncenter size-full wp-image-114579 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/25-set-spacing-to-8_259x87.png" width="259" height="87"></p><br><p>有可能你会看到错位的视图警告并且看到类似星星标签被拉伸出视图边界的情况:</p><br><p><img class="aligncenter size-full wp-image-114580 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/26-stars-label-weirdly-stretched_640x85.png" width="640" height="85" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/26-stars-label-weirdly-stretched_640x85.png 640w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/26-stars-label-weirdly-stretched_640x85-480x64.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>有时候 Xcode会临时显示一些警告或者标识说堆栈视图位置不对, 但是在你做了一些更新之后这些警告就消失了。通常你可以忽视这些问题。</p><br><p>无论如何, 立即修复这个问题, 你可以让堆栈视图重新布局，通过移动它的区域一点然后还愿或者临时改变其中一个的布局属性。</p><br><p>为了证明这个, 改变 <em>Alignment</em> 的值从 <em>Fill</em> 到 <em>Top</em> 然后还原成 <em>Fill</em>。你会发现星星标签的位置正确了:</p><br><p><img class="aligncenter size-full wp-image-114581 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/27-change-alignment-to-top-and-back_640x85.png" width="640" height="85" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/27-change-alignment-to-top-and-back_640x85.png 640w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/27-change-alignment-to-top-and-back_640x85-480x64.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>编译运行程序去验证一切是不是跟原来一样。</p><br><h3>取消嵌入到堆栈视图</h3><br><p>在你走的太远之前, 做一些基本的“急救”训练是极好的。 有时候你发现自己不再需要一个堆栈视图, 可能因为实验, 重构或者突然的原因。</p><br><p>幸运的是, 很容从堆栈视图 <i>unembed</i> 视图。</p><br><p>首先, 选中想要移除的堆栈视图。 按住 <em>Option</em> 键同时点击 <em>Stack</em> 按钮。 点击菜单上的 <em>Unembed</em>:</p><br><p><img class="aligncenter size-full wp-image-114582 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/28-how-to-unembed_186x71.png" width="186" height="71"></p><br><p>另外一种方式是,选中堆栈视图然后从菜单中选择 <em>Editor </em><em>\</em><em> Unembed</em> 。</p><br><h3>你的第一个垂直堆栈视图</h3><br><p>现在, 你将创建你的第一个垂直堆栈视图。 选中 <em>WHY VISIT</em> 标签和下方的 <em>&lt;</em><em>whyVisitLabel&gt;</em> :</p><br><p><img class="aligncenter size-full wp-image-114583 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/29-select-why-visit-labels_640x90.png" width="640" height="90" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/29-select-why-visit-labels_640x90.png 640w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/29-select-why-visit-labels_640x90-480x68.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>Xcode 会正确的推断出这是一个基于标签位置的垂直堆栈视图。 点击 <em>Stack</em> 按钮把它们嵌入堆栈视图:</p><br><p><img class="aligncenter size-full wp-image-114584 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/30-embed-why-visit-labels_640x90.png" width="640" height="90" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/30-embed-why-visit-labels_640x90.png 640w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/30-embed-why-visit-labels_640x90-480x68.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>下面的标签以前有一个跟视图右边界的约束, 不过加入堆栈视图后背移除了。 现在, 堆栈视图没有约束, 它使用最大视图的固定宽度作为自己的宽度。</p><br><p>选中堆栈视图, 点击 <em>Pin</em> 按钮。 选中 <em>Constrain to margins</em>, 设置 <em>Top</em>, <em>Leading</em> and <em>Trailing</em> 约束为 <em>0</em>.</p><br><p>然后, 选中下部约束的下拉菜单的 <em>WEATHER (current distance = 20)</em>:</p><br><p><img class="aligncenter size-full wp-image-114585 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/31-dont-select-nearest-neighbor-constraint_463x417.png" width="463" height="417" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/31-dont-select-nearest-neighbor-constraint_463x417.png 463w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/31-dont-select-nearest-neighbor-constraint_463x417-355x320.png 355w" sizes="(max-width: 463px) 100vw, 463px"></p><br><p>默认情况, 约束显示为距离最近的相邻控件, 对 <em>Hide</em> 按钮底部约束的距离是15. 实际上你需要的约束是是它底部的 <em>WEATHER</em> 标签。</p><br><p>最后, 点击 <em>Add 4 Constraints</em>。 你会看到下面:</p><br><p><img class="aligncenter size-full wp-image-114586 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/32-why-visit-stack-view-stretched_640x90.png" width="640" height="90" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/32-why-visit-stack-view-stretched_640x90.png 640w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/32-why-visit-stack-view-stretched_640x90-480x68.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>现在你你有了一个距离视图右边界固定距离的扩充的堆栈视图。 不过, 底部标签仍然是同样的宽度。 你可以通过更新堆栈视图的 <code>alignment</code> 属性来修复这个问题。</p><br><h3>对齐属性</h3><br><p> <code>alignment</code> 属性决定堆栈视图沿着<i>垂直于</i>坐标轴的线如何布局内部的视图, 可能的值是 <code>Fill</code>, <code>Leading</code>, <code>Center</code> 和 <code>Trailing</code>.</p><br><p><i>垂直的</i> 堆栈视图的 <code>alignment</code>的值稍有不同:</p><br><p><img class="aligncenter size-full wp-image-114587" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/33-horizontal-and-vertical-alignment_594x171.png" width="594" height="171" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/33-horizontal-and-vertical-alignment_594x171.png 594w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/33-horizontal-and-vertical-alignment_594x171-480x138.png 480w" sizes="(max-width: 594px) 100vw, 594px"></p><br><p><code>.Top</code> 替换了 <code>.Leading</code>  <code>.Bottom</code> 替换了 <code>。Trailing</code>. 还有两个只有在垂直方向才有效的属性, <code>.FirstBaseline</code> 和 <code>.LastBaseline</code>.</p><br><p>选择每个值去看看对堆栈视图中标签布局的不同影响:</p><br><p><em>Fill:</em></p><br><p><img class="aligncenter size-full wp-image-114588 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/34-alignment-fill_640x64.png" width="640" height="64" srcset="https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/34-alignment-fill_640x64.png 640w, https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/34-alignment-fill_640x64-480x48.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p><em>Leading:</em></p><br><p><img class="aligncenter size-full wp-image-114589 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/35-alignment-leading_640x64.png" width="640" height="64" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/35-alignment-leading_640x64.png 640w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/35-alignment-leading_640x64-480x48.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p><em>Center:</em></p><br><p><img class="aligncenter size-full wp-image-114590 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/36-alignment-center_640x64.png" width="640" height="64" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/36-alignment-center_640x64.png 640w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/36-alignment-center_640x64-480x48.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p><em>Trailing:</em></p><br><p><img class="aligncenter size-full wp-image-114591 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/37-alignment-trailing_640x64.png" width="640" height="64" srcset="https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/37-alignment-trailing_640x64.png 640w, https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/37-alignment-trailing_640x64-480x48.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>测试完后, 设置 <em>Alignment</em> 属性的值为 <em>Fill</em>:</p><br><p><img class="aligncenter size-full wp-image-114592 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/38-now-select-alignment-fill_640x64.png" width="640" height="64" srcset="https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/38-now-select-alignment-fill_640x64.png 640w, https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/38-now-select-alignment-fill_640x64-480x48.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>然后,编译运行程序来验证所有的一些看起来都很不错,并且没有出现倒退的情况。</p><br><p> <code>Fill</code> 意味着你想所有的视图按照垂直于坐标轴的方向完全充满堆栈视图。 这个使得 <em>WHY VISIT</em> 标签也会扩展到右边界。</p><br><p>不过,如果你仅仅希望底下的标签扩展到边界?</p><br><p>暂时, 因为两个标签背景都是透明的,所有没有关系, 不过转换天气区域的时候就有问题了。</p><br><p>你将学会如何用额外的堆栈视图实现这个功能。</p><br><h3>转换 &#8220;what to see&#8221; 区域</h3><br><p>这部分和前一个很相似, 所以介绍很简要。</p><br><ol start="1"><br><li>首先, 选中 <em>WHAT TO SEE</em> 标签和下方的 <em>&lt;</em><em>whatToSeeLabel&gt;</em> 标签。</li><br><li>点击 <em>Stack</em> 按钮。</li><br><li>点击 <em>Pin</em> 按钮。</li><br><li>选中 <em>Constrain to margins</em>, 添加下面 <em>四个</em> 约束:</li><br></ol><br><br><div class="wp_codebox"><table><tr id="p1145525"><td class="code" id="p114552code5"><pre class="bash" style="font-family:monospace;">Top: <span style="color: #000000;">20</span>, Leading: <span style="color: #000000;">0</span>, Trailing: <span style="color: #000000;">0</span>, Bottom: <span style="color: #000000;">20</span></pre></td></tr></table></div><br><br><ol start="5"><br><li>设置堆栈视图的 <em>Alignment</em> 为 <em>Fill</em>.</li><br></ol><br><p>你的故事板现在看起来是这样:</p><br><p><img class="aligncenter size-full wp-image-114593 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/39-after-what-to-see-section_640x308.png" width="640" height="308" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/39-after-what-to-see-section_640x308.png 640w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/39-after-what-to-see-section_640x308-480x231.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>编译运行程序去验证一切看起来依然一样。</p><br><p>现在留给你的只有 <em>weather</em> 区域了。</p><br><h2>转换天气区域</h2><br><p> <em>weather</em> 区域因为包含<em>Hide</em>按钮显得比其他区域复杂一些。</p><br><p>可以采用的一个方法是,创建一个内嵌的堆栈视图,把 <em>WEATHER</em> 标签和 <em>Hide</em> 按钮嵌入一个水平堆栈视图, 然后把这个水平堆栈视图和 <em>&lt;</em><em>weatherInfoLabel&gt;</em> 嵌入一个垂直堆栈视图。</p><br><p>它看起来是这个样子:</p><br><p><img class="aligncenter size-full wp-image-114594 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/40-weather-stack-in-stack_640x92.png" width="640" height="92" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/40-weather-stack-in-stack_640x92.png 640w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/40-weather-stack-in-stack_640x92-480x69.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>注意 <em>WEATHER</em> 标签已经把高度扩展和 <em>Hide</em> 按钮一样了。 这个不太理想,因为这将使<em>WEATHER</em>标签的基线和下方的文字存在空白。</p><br><p>记得 <code>alignment</code> 表示垂直于堆栈视图的位置。 所以, 你可以设置 <code>alignment</code> 为 <em>Bottom</em>:</p><br><p><img class="aligncenter size-full wp-image-114595 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/41-weather-stack-in-stack-alignment-bottom_640x92.png" width="640" height="92" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/41-weather-stack-in-stack-alignment-bottom_640x92.png 640w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/41-weather-stack-in-stack-alignment-bottom_640x92-480x69.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>不过你应该不想<em>Hide</em> 按钮的高度决定堆栈视图的高度。</p><br><p>实际上你要采用的方法是让 <em>Hide</em> 按钮 <i>不在</i>  <em>weather</em> 区域的堆栈视图中, 或者不在任何堆栈视图里。</p><br><p>它依然是顶层视图的子视图, 你在它跟 <em>WEATHER</em> 标签间添加约束 — 天气标签依然在堆栈视图里。 这是正确的, 你在堆栈视图外的按钮和堆栈视图内的标签间添加约束!</p><br><p>选择 <em>WEATHER</em> 标签和下方的 <em>&lt;</em><em>weatherInfoLabel&gt;</em> 标签:</p><br><p><img class="aligncenter size-full wp-image-114596 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/42-select-weather-and-info-label_640x92.png" width="640" height="92" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/42-select-weather-and-info-label_640x92.png 640w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/42-select-weather-and-info-label_640x92-480x69.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>点击 <em>Stack</em> 按钮:</p><br><p><img class="aligncenter size-full wp-image-114597 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/43-weather-click-stack-button_640x92.png" width="640" height="92" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/43-weather-click-stack-button_640x92.png 640w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/43-weather-click-stack-button_640x92-480x69.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>点击 <em>Pin</em> 按钮, 选中 <em>Constrain to margins</em> 并且添加下面的 <em>四个</em> 约束:</p>

<div class="wp_codebox"><table><tr id="p1145526"><td class="code" id="p114552code6"><pre class="bash" style="font-family:monospace;">Top: <span style="color: #000000;">20</span>, Leading: <span style="color: #000000;">0</span>, Trailing: <span style="color: #000000;">0</span>, Bottom: <span style="color: #000000;">20</span></pre></td></tr></table></div>

<p>设置堆栈视图的 <em>Alignment</em> 为 <em>Fill</em>:</p><br><p><img class="aligncenter size-full wp-image-114598 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/44-weather-alignment-fill_640x92.png" width="640" height="92" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/44-weather-alignment-fill_640x92.png 640w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/44-weather-alignment-fill_640x92-480x69.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>你需要在 <em>Hide</em> 按钮的左侧和 <em>WEATHER</em> 标签的右侧添加约束, 所以让 <em>WEATHER</em> 标签充满堆栈视图是无法起效果的。</p><br><p>不过, 你 <i>想</i> 让底面的 <em>&lt;</em><em>weatherInfoLabel&gt;</em> 标签填充视图。</p><br><p>你可以把 <em>WEATHER</em> 标签嵌入堆栈视图来实现这个。 记住垂直堆栈视图的 <code>alignment</code>可以设置成  <code>.Leading</code>, 如果堆栈视图拉伸超过实际宽度, 他包含的视图仍然是左对齐的。</p><br><p>通过大纲视图或者使用<em>Control-Shift-click</em>方法选中 <em>WEATHER</em> 标签:</p><br><p><img class="aligncenter size-full wp-image-114599 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/45-select-just-the-weather-label_640x92.png" width="640" height="92" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/45-select-just-the-weather-label_640x92.png 640w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/45-select-just-the-weather-label_640x92-480x69.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>点击 <em>Stack</em> 按钮:</p><br><p><img class="aligncenter size-full wp-image-114600 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/46-weather-in-horizontal-stack_640x92.png" width="640" height="92" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/46-weather-in-horizontal-stack_640x92.png 640w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/46-weather-in-horizontal-stack_640x92-480x69.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>设置 <em>Alignment</em> 为 <em>Leading</em>, 确保 <em>Axis</em> 设置为 <em>Vertical</em>:</p><br><p><img class="aligncenter size-full wp-image-114601 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/47-vertical-and-leading_640x92.png" width="640" height="92" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/47-vertical-and-leading_640x92.png 640w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/47-vertical-and-leading_640x92-480x69.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>完美! 外部堆栈视图可以拉伸内部堆栈视图去填充宽度,而内部堆栈视图的标签可以保持原始的宽度!</p><br><p>编译运行。 为什么<em>Hide</em> 按钮跑到文字中间去了?</p><br><p><img class="aligncenter wp-image-114602 size-medium bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/48-hide-label-incorrect-position_750x573-419x320.png" width="419" height="320" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/48-hide-label-incorrect-position_750x573-419x320.png 419w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/48-hide-label-incorrect-position_750x573-654x500.png 654w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/48-hide-label-incorrect-position_750x573.png 750w" sizes="(max-width: 419px) 100vw, 419px"></p><br><p>这是因为你把 <em>WEATHER</em> 标签嵌入堆栈视图, 所有它与 <em>Hide</em> 按钮之间的约束就被移除了。</p><br><p>添加从 <em>Hide</em> 按钮到 <em>WEATHER</em> 标签的<em>Control-drag</em>约束:</p><br><p><img class="aligncenter size-full wp-image-114603 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/49-drag-to-weather-label_380x94.png" width="380" height="94"></p><br><p>按住 <em>Shift</em> 选择多项, 选择 <em>Horizontal Spacing</em> 和 <em>Baseline</em>。 然后点击 <em>Add Constraints</em>:</p><br><p><img class="aligncenter size-full wp-image-114604 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/50-add-multiple-constraints_380x224.png" width="380" height="224"></p><br><p>编译运行。 <em>Hide</em> 按钮的位置现在应该正确了, 因为设置成隐藏的标签内嵌在一个堆栈视图, 按下 <em>Hide</em> 隐藏了这个标签, 同时调整下面的视图 — 无需手动调整任何约束。</p><br><p><img class="aligncenter size-medium wp-image-114605 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/51-hide-button-works_750x732-328x320.png" width="328" height="320" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/51-hide-button-works_750x732-328x320.png 328w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/51-hide-button-works_750x732-512x500.png 512w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/51-hide-button-works_750x732-32x32.png 32w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/51-hide-button-works_750x732.png 750w" sizes="(max-width: 328px) 100vw, 328px"></p><br><p>既然所有的区域都有自己的堆栈视图了, 你将他们所有都嵌入一个外部堆栈视图, 这将使得最后的两个任务微不足道。</p><br><h3>顶层堆栈视图</h3><br><p>在大纲视图中<em>Command-click</em> 去选取所有五个顶层堆栈视图:</p><br><p><img class="aligncenter size-full wp-image-114606 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/52-select-all-stack-views-in-outline_640x260.png" width="640" height="260" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/52-select-all-stack-views-in-outline_640x260.png 640w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/52-select-all-stack-views-in-outline_640x260-480x195.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>点击 <em>Stack</em> 按钮:</p><br><p><img class="aligncenter size-full wp-image-114607 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/53-stack-all-the-views_640x185.png" width="640" height="185" srcset="https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/53-stack-all-the-views_640x185.png 640w, https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/53-stack-all-the-views_640x185-480x139.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>点击 <em>Pin</em> 按钮, 选中 <em>Constrain to margins</em> 添加 <em>0</em> 给所有边界。 接着设置 <em>Spacing</em> 为 <em>20</em>  <em>Alignment</em> 为 <em>Fill</em>。 你的故事板现在看起来是这样:</p><br><p><img class="aligncenter size-full wp-image-114608 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/54-set-the-spacing-to-20-and-alignment-to-fill_640x300.png" width="640" height="300" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/54-set-the-spacing-to-20-and-alignment-to-fill_640x300.png 640w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/54-set-the-spacing-to-20-and-alignment-to-fill_640x300-480x225.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>编译运行:</p><br><p><img class="aligncenter size-medium wp-image-114609 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/55-hide-button-lost-again_750x487-480x312.png" width="480" height="312" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/55-hide-button-lost-again_750x487-480x312.png 480w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/55-hide-button-lost-again_750x487-700x455.png 700w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/55-hide-button-lost-again_750x487.png 750w" sizes="(max-width: 480px) 100vw, 480px"></p><br><p>我擦! 好像隐藏按钮又失去了约束。没有关系, 像以前一样重新添加约束就可以了。</p><br><p><em>Control-drag</em> 从 <em>Hide</em> 按钮到 <em>WEATHER</em> 标签, 按住 <em>Shift</em>, 选择 <em>Horizontal Spacing</em> 和 <em>Baseline</em>. 然后点击 <em>Add Constraints</em>:</p><br><p><img class="aligncenter size-full wp-image-114610 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/56-add-constraints-to-button-again_380x223.png" width="380" height="223"></p><br><p>编译运行。 <em>Hide</em> 按钮的位置现在正确了。</p><br><h3>重定位视图</h3><br><p>既然所有的区域都在顶层堆栈视图, 你要修改 <em>what to see</em> 区域的位置让它位于 <em>weather</em> 区域的上方。</p><br><p>在大纲视图中选择 <em>中间的堆栈视图</em> 然后 <em>拖动它到</em> 第一个和第二个视图之间。</p><br><div class="note"><em>备注:</em> 保持鼠标指针稍微位于堆栈视图的左侧，这样它就还是外部堆栈视图 <i>子视图</i>。 小蓝圈应该位于两个堆栈视图的左侧边界而不是右侧:</div><br><p><img class="aligncenter size-full wp-image-114611 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/57-drag-and-drop-to-reposition-section_639x130.png" width="639" height="130" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/57-drag-and-drop-to-reposition-section_639x130.png 639w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/57-drag-and-drop-to-reposition-section_639x130-480x98.png 480w" sizes="(max-width: 639px) 100vw, 639px"></p><br><p>现在 <em>weather</em> 区域从上面数是第三个, 但是因为 <em>Hide</em> 按钮不是堆栈视图的一部分,所以他的区域是不对的。</p><br><p>点击 <em>Hide</em> 按钮选中它:</p><br><p><img class="aligncenter size-full wp-image-114612 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/58-hide-button-not-moved_640x130.png" width="640" height="130" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/58-hide-button-not-moved_640x130.png 640w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/58-hide-button-not-moved_640x130-480x98.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>接着点击 <em>Resolve Auto Layout Issues</em> 三角形按钮, 点击 <em>Update Frames</em>:</p><br><p><img class="aligncenter size-full wp-image-114613 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/59-resolve-auto-layout-issues_356x269.png" width="356" height="269"></p><br><p> <em>Hide</em> 按钮将会返回到正确的位置:</p><br><p><img class="aligncenter size-full wp-image-114614 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/60-hide-button-back-to-correct-position_640x130.png" width="640" height="130" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/60-hide-button-back-to-correct-position_640x130.png 640w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/60-hide-button-back-to-correct-position_640x130-480x98.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>当然, 用自动布局重定位视图,重新添加约束都已经不是最困难的事了, 但是这个不感觉这么好?</p><br><h3>基于配置的Size class</h3><br><p>最后, 你可以把注意力放在遗留的一个问题上了。 横屏模式下, 垂直空间非常稀少, 所以你想这些区域靠的更近一点。 要实现这点, 当垂直的 size class 是 compact的时候,你要设置顶层堆栈视图的间距为 <em>10</em> 而不是 <em>20</em> 。</p><br><p>选择顶层堆栈视图, 点击靠近 <em>Spacing</em>的小 <em>+</em> 按钮:</p><br><p><img class="aligncenter size-full wp-image-114615 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/61-select-plus-button_260x120.png" width="260" height="120"></p><br><p>选择 <em>Any Width</em> &gt; <em>Compact Height</em>:</p><br><p><img class="aligncenter size-full wp-image-114616 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/62-anywidth-compact-height_403x108.png" width="403" height="108"></p><br><p>在新的 <em>wAny hC</em> 区域设置 <em>Spacing</em> 为 <em>10</em> :</p><br><p><img class="aligncenter size-full wp-image-114617 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/63-set-spacing-to-10_260x160.png" width="260" height="160"></p><br><p>编译运行。 竖屏模式间距应该保持不变。 旋转模拟器 (⌘←) 可以看到区域之间的间距减小了，而且按钮距离底部都有了充足的空间:</p><br><p><img class="aligncenter size-medium wp-image-114618 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/64-spacing-in-iphone-landscape_1334x750-480x270.png" width="480" height="270" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/64-spacing-in-iphone-landscape_1334x750-480x270.png 480w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/64-spacing-in-iphone-landscape_1334x750-700x394.png 700w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/64-spacing-in-iphone-landscape_1334x750-266x151.png 266w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/64-spacing-in-iphone-landscape_1334x750.png 1334w" sizes="(max-width: 480px) 100vw, 480px"></p><br><p>如果你没有添加一个顶层的堆栈视图, 你仍然 <i>可以</i> 分五个区域用 size classes 来设置四个约束的每一个垂直间距为10, 只是这个没有在一个简单的地方设置容易?</p><br><p>你有时间去做更好的事, 比如动画!</p><br><h2>动画</h2><br><p>现在, 显示和隐藏天气详情有点突兀。 你可以添加一些动画让这种转换显得平顺一些。</p><br><p>堆栈视图完全适用UIView 动画引擎。 这就意味动画显示/隐藏排列好的视图, 和<i>在</i>动画块内切换 <code>hidden</code> 属性一样简单。</p><br><p>该写一些代码了! 打开 <em>SpotInfoViewController.swift</em> 看一眼 <code>updateWeatherInfoViews(hideWeatherInfo:animated:)</code>.</p><br><p>你会看见这行代码在方法的尾部:</p>

<div class="wp_codebox"><table><tr id="p1145527"><td class="code" id="p114552code7"><pre class="swift" style="font-family:monospace;">weatherInfoLabel.hidden <span style="color: #002200;">=</span> shouldHideWeatherInfo</pre></td></tr></table></div>

<p>用下面的代码替换它:</p>

<div class="wp_codebox"><table><tr id="p1145528"><td class="code" id="p114552code8"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">if</span> animated <span style="color: #002200;">&#123;</span><br>  <span style="color: #400080;">UIView</span>.animateWithDuration<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">0.3</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">self</span>.weatherInfoLabel.hidden <span style="color: #002200;">=</span> shouldHideWeatherInfo<br>  <span style="color: #002200;">&#125;</span><br><span style="color: #002200;">&#125;</span> <span style="color: #a61390;">else</span> <span style="color: #002200;">&#123;</span><br>  weatherInfoLabel.hidden <span style="color: #002200;">=</span> shouldHideWeatherInfo<br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div>

<p>编译运行, 点击 <em>Hide</em> 或者 <em>Show</em> 按钮。 这个动画版本是不是看起来好一些?</p><br><p>除了动画隐藏显示堆栈视图中的视图, 你也可以让堆栈视图本身有动画属性, 例如 <code>alignment</code>, <code>distribution</code>, <code>spacing</code> ,甚至是<code>axis</code>.</p>


]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;link rel=&quot;stylesheet&quot; id=&quot;wpsqt-main-css&quot; href=&quot;https://cdn3.raywenderlich.com/wp-content/plugins/wp-survey-and-quiz-tool/css/ma
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>UISearchController 使用指导</title>
    <link href="http://yoursite.com/2016/09/14/UISearchController-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AF%BC/"/>
    <id>http://yoursite.com/2016/09/14/UISearchController-使用指导/</id>
    <published>2016-09-14T00:59:02.000Z</published>
    <updated>2016-09-14T06:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><img src="http://www.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Square.png" width="250" height="250" class="alignright size-thumbnail wp-image-78152"></div>

<p>如果你的程序要展示大量的数据集, 通过滚动大规模的列表会变的很慢并且令人沮丧。 既然如此，允许用户搜索特定项目就显得非常重要。 幸运的是, UIKit 包含的 <code>UISearchBar</code> 和 <code>UITableView</code>实现了无缝对接来进行快速有效的信息过滤。</p><br><p>这份<code>UISearchController</code> 指导, 你将建立一个基于标准列表的Candy 应用。 你会添加搜索的功能, 包括动态过滤, 可选的scope bar, 所有使用 <code>UISearchController</code>的方式, 都已经添加到iOS 8. 最后, 你会知道如何让你的程序更加友好并且满足用户的紧急需求。</p><br><p>预备好一些糖衣的搜索结果，继续读下去。</p><br><h2>准备开始</h2><br><p>下载演示程序在<a href="http://www.raywenderlich.com/wp-content/uploads/2015/09/CandySearch-Starter.zip" target="_blank" rel="external">这里</a> 然后打开。 程序以导航栏的风格创建，编译项目并运行，你会看到一个空列表:</p>

<div align="center"><img src="http://www.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Starter-281x500.png" width="281" height="500" class="aligncenter size-large wp-image-113862" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Starter-281x500.png 281w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Starter-180x320.png 180w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Starter.png 750w" sizes="(max-width: 281px) 100vw, 281px"></div><br><p>回到Xcode, 文件<em>Candy.swift</em> 包含了一个用来保存你想展示的糖果信息的类。这个类有两个属性: 分类和糖果名。</p><br><p>当用户在你的app搜索某个糖果的时候, 你要引用名字属性来匹配用户的搜索关键字。 你会在文章结尾实现的Scope Bar中看到分类字符串的重要性。</p><br><h2>填充 Table View</h2><br><p>打开 <em>MasterViewController.swift</em>.  <code>candies</code> 属性负责管理用户搜索用的不同的<code>Candy</code>对象。 说到这里, 是时候创建一些 Candy了!</p><br><p>这个指导中, 你只需要创建固定数量的数据来展示search bar如何工作的; 在真正的产品级应用中, 你可能会有上千条的数据。不过无论怎样，不管程序存在上千的数据还是只有一点点数据，用到的方法都是一样的。 出色的扩展性!</p><br><p>填充你的 <code>candies</code> 数组,添加下面的代码到 <code>viewDidLoad()</code>, 代码添加在 <code>super.viewDidLoad()</code>调用后:</p><br><br><div class="wp_codebox"><table><tr id="p1137721"><td class="code" id="p113772code1"><pre class="swift" style="font-family:monospace;">candies <span style="color: #002200;">=</span> <span style="color: #002200;">&#91;</span><br>  Candy<span style="color: #002200;">&#40;</span>category<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Chocolate&quot;</span>, name<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Chocolate Bar&quot;</span><span style="color: #002200;">&#41;</span>,<br>  Candy<span style="color: #002200;">&#40;</span>category<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Chocolate&quot;</span>, name<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Chocolate Chip&quot;</span><span style="color: #002200;">&#41;</span>,<br>  Candy<span style="color: #002200;">&#40;</span>category<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Chocolate&quot;</span>, name<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Dark Chocolate&quot;</span><span style="color: #002200;">&#41;</span>,<br>  Candy<span style="color: #002200;">&#40;</span>category<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Hard&quot;</span>, name<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Lollipop&quot;</span><span style="color: #002200;">&#41;</span>,<br>  Candy<span style="color: #002200;">&#40;</span>category<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Hard&quot;</span>, name<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Candy Cane&quot;</span><span style="color: #002200;">&#41;</span>,<br>  Candy<span style="color: #002200;">&#40;</span>category<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Hard&quot;</span>, name<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Jaw Breaker&quot;</span><span style="color: #002200;">&#41;</span>,<br>  Candy<span style="color: #002200;">&#40;</span>category<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Other&quot;</span>, name<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Caramel&quot;</span><span style="color: #002200;">&#41;</span>,<br>  Candy<span style="color: #002200;">&#40;</span>category<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Other&quot;</span>, name<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Sour Chew&quot;</span><span style="color: #002200;">&#41;</span>,<br>  Candy<span style="color: #002200;">&#40;</span>category<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Other&quot;</span>, name<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Gummi Bear&quot;</span><span style="color: #002200;">&#41;</span><br><span style="color: #002200;">&#93;</span></pre></td></tr></table></div>

<p>再次编译运行你的工程。因为table view的代理和数据源方法都已经实现了，现在你可以看见一个有数据的table view了: </p><br><div align="center"><img src="http://www.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Data-281x500.png" width="281" height="500" class="aligncenter size-large wp-image-113861" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Data-281x500.png 281w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Data-180x320.png 180w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Data.png 750w" sizes="(max-width: 281px) 100vw, 281px"></div><br><p>选择列表的一行，点击进入会展示对应糖果的详情页:</p><br><div align="center"><img src="http://www.raywenderlich.com/wp-content/uploads/2015/09/darkchocolate.png" width="281" height="500" class="aligncenter size-large wp-image-115841" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/darkchocolate.png 375w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/darkchocolate-180x320.png 180w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/darkchocolate-281x500.png 281w" sizes="(max-width: 281px) 100vw, 281px"></div><br><p>这么多的糖果，这么少的时间找到你想要的! 你需要一个<code>UISearchBar</code>.</p><br><h2>UISearchController介绍</h2><br><p>如果你查看<code>UISearchController</code> 文档, 你会发现这个文档懒的令人发指。 他一点搜索工作都不做。 这个类只是提供用户预期得到的标准接口而已。</p><br><p><code>UISearchController</code> 调用代理方法告知你的应用其他地方，你的用户正在做什么。你必须自己实现所有的函数来做字符串的匹配工作。</p><br><p>虽然这看起来有点吓人, 但是写自定义的搜索功能你可以自己控制准确的返回结果。 你的用户会非常赞赏这种智能快速的搜索。</p><br><p>如果你过去用过搜索列表, 你应该熟悉<code>UISearchDisplayController</code>。 从 iOS 8开始, 这个类已经被弃用，现在开始使用 <code>UISearchController</code>, 这个类简化了搜索的流程。</p><br><p>不走运的是, 写这篇文章的时候, Interface Builder 还不支持 <code>UISearchController</code>, 因此你要自己手动创建你的UI。</p><br><p>在 <em>MasterViewController.swift</em>, 添加一个新的属性:</p>

<div class="wp_codebox"><table><tr id="p1137722"><td class="code" id="p113772code2"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">let</span> searchController <span style="color: #002200;">=</span> UISearchController<span style="color: #002200;">&#40;</span>searchResultsController<span style="color: #002200;">:</span> <span style="color: #a61390;">nil</span><span style="color: #002200;">&#41;</span></pre></td></tr></table></div>

<p>通过初始化 <code>UISearchController</code> 不带 <code>searchResultsController</code>, 告诉搜索页面你要用相同的搜索视图来展示搜索结果。如果你在这里用不同的视图控制器，那搜索结果就展示在替代的视图里。</p><br><p>下一步, 你需要给你的搜索视图控制器配置一些参数。还是在 <em>MasterViewController.swift</em>里面, 在 <code>viewDidLoad()</code>后面添加如下代码:</p>

<div class="wp_codebox"><table><tr id="p1137723"><td class="code" id="p113772code3"><pre class="swift" style="font-family:monospace;">  searchController.searchResultsUpdater <span style="color: #002200;">=</span> <span style="color: #a61390;">self</span><br>  searchController.dimsBackgroundDuringPresentation <span style="color: #002200;">=</span> <span style="color: #a61390;">false</span><br>  definesPresentationContext <span style="color: #002200;">=</span> <span style="color: #a61390;">true</span><br>  tableView.tableHeaderView <span style="color: #002200;">=</span> searchController.searchBar</pre></td></tr></table></div>

<p>这儿是你添加代码的说明:</p><br><ol><br><li><code>searchResultsUpdater</code> 是 <code>UISearchController</code>的属性遵守 <code>UISearchResultsUpdating</code>协议。 当<code>UISearchBar</code>中输入的文字改变时，该协议会通知你的类. 过会你就会在你的类实现这个协议的。</li><br><li>默认情况下, <code>UISearchController</code>出现时视图会黯淡下来。 当你使用别的视图控制器作为<code>searchResultsController</code>时会很有用. 这个情况下, 你已经设置当前视图来显示结果，因此你不希望视图是黯淡的。</li><br><li>通过在视图控制器设置<code>definesPresentationContext</code> 为 <code>true</code>, 当<code>UISearchController</code> 处于激活状态是，确保用户在导航到别的页面后,搜索条不会继续留在屏幕上。</li><br><li>最后, 添加 <code>searchBar</code> 到列表的 <code>tableHeaderView</code>。记住 Interface Builder 还不兼容<code>UISearchController</code>, 这个很必要。</li><br></ol><br><h3>UISearchResultsUpdating 和 Filtering</h3><br><p>建立好搜索控制之后, 你需要做一些编码工作来让它工作。 首先, 在<code>MasterViewController</code>顶部附近添加下面的属性:</p>

<div class="wp_codebox"><table><tr id="p1137724"><td class="code" id="p113772code4"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">var</span> filteredCandies <span style="color: #002200;">=</span> <span style="color: #002200;">&#91;</span>Candy<span style="color: #002200;">&#93;</span><span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span></pre></td></tr></table></div>

<p>这个属性用例保存用户正在搜索的糖果。 下一步, 添加下面的辅助方法到 <code>MasterViewController</code>:</p>

<div class="wp_codebox"><table><tr id="p1137725"><td class="code" id="p113772code5"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">func</span> filterContentForSearchText<span style="color: #002200;">&#40;</span>searchText<span style="color: #002200;">:</span> <span style="color: #a61390;">String</span>, scope<span style="color: #002200;">:</span> <span style="color: #a61390;">String</span> <span style="color: #002200;">=</span> <span style="color: #bf1d1a;">&quot;All&quot;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>  filteredCandies <span style="color: #002200;">=</span> candies.<span style="color: #a61390;">filter</span> <span style="color: #002200;">&#123;</span> candy <span style="color: #a61390;">in</span><br>    <span style="color: #a61390;">return</span> candy.name.lowercaseString.containsString<span style="color: #002200;">&#40;</span>searchText.lowercaseString<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  tableView.reloadData<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div>

<p>这个方法会通过<code>searchText</code>过滤<code>candies</code> 数据并把结果放进你刚刚添加的 <code>filteredCandies</code> 数组。现在不用担心<code>scope</code> 这个参数, 文章后面你会用到它。</p><br><p>为了让<code>MasterViewController</code> 响应搜索条, 还需要实现 <code>UISearchResultsUpdating</code>. 打开 <em>MasterViewController.swift</em> 添加下面的类扩展方法, 在 <code>MasterViewController</code> 主体外:</p>

<div class="wp_codebox"><table><tr id="p1137726"><td class="code" id="p113772code6"><pre class="swift" style="font-family:monospace;">extension MasterViewController<span style="color: #002200;">:</span> UISearchResultsUpdating <span style="color: #002200;">&#123;</span><br>  <span style="color: #a61390;">func</span> updateSearchResultsForSearchController<span style="color: #002200;">&#40;</span>searchController<span style="color: #002200;">:</span> UISearchController<span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    filterContentForSearchText<span style="color: #002200;">&#40;</span>searchController.searchBar.text<span style="color: #002200;">!</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div>

<p> <code>updateSearchResultsForSearchController(<em>:)</em></code> 方法是唯一需要去实现的，用来遵守<code>UISearchResultsUpdating</code> 协议。</p><br><p>现在, 每当用户在搜索条添加或者移除文字的时候, <code>UISearchController</code> 都会通过这个方法通知 <code>MasterViewController</code> 。 这个方法只是通过当前搜索条中的文字简单调用一个帮手方法(你刚刚定义的)</p><br><p><code>filter()</code> 需要一个闭包类型 <code>(candy: Candy) -&gt; Bool</code>. 然后循环便利数组中的所有元素, 然后调用闭包, 为每个元素传入这个文字。</p><br><p>你可以用这个方法判定某个糖果是否是需要展示给用户的结果的其中一个。 要做到这点, 如果当前的糖果包含在过滤数组中你需要返回 <code>true</code> , 如果不是就返回 <code>false</code> 。</p><br><p>为了确定这个, <code>containsString(:)</code> 用来检测这个糖果的名字是不是包含 <code>searchText</code>. 但是在比较前, 你需要把两个字符串转换成全小写的字符串，用 <code>lowercaseString</code> 方法。 </p><br><div class="note"><em>备注:</em> 大部分时间, 当执行搜索的时候通过比较两个字符串的小写，我们可以轻易返回大小写不敏感的比较，用户并不用烦心大小写的问题。 现在, 你输入 &#8220;Chocolate&#8221; 或者 &#8220;chocolate&#8221; 任何一个都会返回匹配的糖果。 是不是很有用?! :]</div><br><p>编译并允许程序; 你会发现列表上面现在有了Search Bar 。</p><br><p>可是, 如果你输入搜索文字你会发现依然看不到任何过滤的结果。 要给什么? 这个很简单，因为你还没有写任何的代码去告诉列表如何使用过滤结果。</p><br><p>回到 <em>MasterViewController.swift</em>, 替换 <code>tableView(_:numberOfRowsInSection:)</code> 用下面的代码 :</p>

<div class="wp_codebox"><table><tr id="p1137727"><td class="code" id="p113772code7"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> tableView<span style="color: #002200;">&#40;</span>tableView<span style="color: #002200;">:</span> <span style="color: #400080;">UITableView</span>, numberOfRowsInSection section<span style="color: #002200;">:</span> <span style="color: #a61390;">Int</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; <span style="color: #a61390;">Int</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #a61390;">if</span> searchController.active <span style="color: #002200;">&amp;&amp;</span> searchController.searchBar.text <span style="color: #002200;">!=</span> <span style="color: #bf1d1a;">&quot;&quot;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">return</span> filteredCandies.<span style="color: #a61390;">count</span><br>  <span style="color: #002200;">&#125;</span><br>  <span style="color: #a61390;">return</span> candies.<span style="color: #a61390;">count</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div>

<p>这儿变化不大, 你只是简单判断用户是否在搜索, 然后用过滤的结果或者正常的糖果来做数据源。</p><br><p>下一步, 替换 <code>tableView(_:cellForRowAtIndexPath:)</code> 用:</p>

<div class="wp_codebox"><table><tr id="p1137728"><td class="code" id="p113772code8"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> tableView<span style="color: #002200;">&#40;</span>tableView<span style="color: #002200;">:</span> <span style="color: #400080;">UITableView</span>, cellForRowAtIndexPath indexPath<span style="color: #002200;">:</span> <span style="color: #400080;">NSIndexPath</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; <span style="color: #400080;">UITableViewCell</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #a61390;">let</span> cell <span style="color: #002200;">=</span> tableView.dequeueReusableCellWithIdentifier<span style="color: #002200;">&#40;</span><span style="color: #bf1d1a;">&quot;Cell&quot;</span>, forIndexPath<span style="color: #002200;">:</span> indexPath<span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">let</span> candy<span style="color: #002200;">:</span> Candy<br>  <span style="color: #a61390;">if</span> searchController.active <span style="color: #002200;">&amp;&amp;</span> searchController.searchBar.text <span style="color: #002200;">!=</span> <span style="color: #bf1d1a;">&quot;&quot;</span> <span style="color: #002200;">&#123;</span><br>    candy <span style="color: #002200;">=</span> filteredCandies<span style="color: #002200;">&#91;</span>indexPath.row<span style="color: #002200;">&#93;</span><br>  <span style="color: #002200;">&#125;</span> <span style="color: #a61390;">else</span> <span style="color: #002200;">&#123;</span><br>    candy <span style="color: #002200;">=</span> candies<span style="color: #002200;">&#91;</span>indexPath.row<span style="color: #002200;">&#93;</span><br>  <span style="color: #002200;">&#125;</span><br>  cell.textLabel?.text <span style="color: #002200;">=</span> candy.name<br>  cell.detailTextLabel?.text <span style="color: #002200;">=</span> candy.category<br>  <span style="color: #a61390;">return</span> cell<br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div>

<p>两个方法现在都会调用 <code>searchController</code>的属性<code>active</code> 来判断显示哪个数组。 </p><br><p>当用户点击 Search Bar的搜索区域时, <code>active</code> 会自动设置为 <code>true</code>. 如果搜索控制器是激活的, 你会看到用户是否在输入文字。 如果他们输入了, <code>filteredCandies</code> 数组会返回数据. 否则, 返回所有的数据。</p><br><p>回想一下, 搜索控制器自动处理展示和隐藏结果, 所以你的所有代码必须根据控制器的状态和用户是否输入来提供正确的数据 (过滤的或者未过滤的) 。</p><br><div align="center"><img src="http://www.raywenderlich.com/wp-content/uploads/2015/09/ragecomic.png" width="651" height="481" class="aligncenter size-full wp-image-114198" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/ragecomic.png 651w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/ragecomic-433x320.png 433w" sizes="(max-width: 651px) 100vw, 651px"></div><br><p>编译并允许程序。 你已经得到一个可以运行的过滤列表行的 Search Bar。 好耶! </p><br><div align="center"><img src="http://www.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Filter-281x500.png" width="281" height="500" class="aligncenter size-large wp-image-113864" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Filter-281x500.png 281w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Filter-180x320.png 180w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Filter.png 750w" sizes="(max-width: 281px) 100vw, 281px"></div><br><p>玩一会这个程序看看能不能搜到各种糖果。</p><br><p>存在不止一个问题。当你选择搜索列表的一行, 你可能注意到了详情页展示的是错误的糖果! 是时候修复这个问题了。</p><br><h2>给详情页传递数据</h2><br><p>当传递信息给详情页时, 你要确保控制器知道用户在使用哪个内容: 是整个列表还是搜索的结果。 还是在 <em>MasterViewController.swift</em>, 在 <code>prepareForSegue(_:sender:)</code>里, 找到下面的代码:</p>

<div class="wp_codebox"><table><tr id="p1137729"><td class="code" id="p113772code9"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">let</span> candy <span style="color: #002200;">=</span> candies<span style="color: #002200;">&#91;</span>indexPath.row<span style="color: #002200;">&#93;</span></pre></td></tr></table></div>

<p>替换成下面的代码:</p>

<div class="wp_codebox"><table><tr id="p11377210"><td class="code" id="p113772code10"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">let</span> candy<span style="color: #002200;">:</span> Candy<br><span style="color: #a61390;">if</span> searchController.active <span style="color: #002200;">&amp;&amp;</span> searchController.searchBar.text <span style="color: #002200;">!=</span> <span style="color: #bf1d1a;">&quot;&quot;</span> <span style="color: #002200;">&#123;</span><br>  candy <span style="color: #002200;">=</span> filteredCandies<span style="color: #002200;">&#91;</span>indexPath.row<span style="color: #002200;">&#93;</span><br><span style="color: #002200;">&#125;</span> <span style="color: #a61390;">else</span> <span style="color: #002200;">&#123;</span><br>  candy <span style="color: #002200;">=</span> candies<span style="color: #002200;">&#91;</span>indexPath.row<span style="color: #002200;">&#93;</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div>

<p>你在这里做了 <code>tableView(<em>:numberOfRowsInSection:)</em></code> 和 <code>tableView(:cellForRowAtIndexPath:)</code> 相同的判断, 不过现在，你给详情页提供了合适的糖果对象当你执行segue的时候。</p><br><p>此时编译并允许程序，看看导航到正确的详情页是多少轻松，无论是从主界面还是搜索页面。 </p><br><div align="center"><img src="http://www.raywenderlich.com/wp-content/uploads/2015/09/CandySearch-DetailView-281x500.png" width="281" height="500" class="aligncenter size-large wp-image-114436" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/CandySearch-DetailView-281x500.png 281w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/CandySearch-DetailView-180x320.png 180w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/CandySearch-DetailView.png 750w" sizes="(max-width: 281px) 100vw, 281px"></div><br><h2>创建一个 Scope Bar 来过滤结果</h2><br><p>如果你想提供给用户其他的方式来过滤结果, 你可以添加一个 <em>Scope Bar</em> 结合你的搜索条通过分类来过滤项目。 这些分类是你在创建糖果数组时指定给 <code>Candy</code> 对象的: <em>Chocolate</em>, <em>Hard</em>, and <em>其他</em> 。</p><br><p>首先, 你要先在<code>MasterViewController</code>创建一个scope bar. 这个scope bar是个分段控件，可以通过特定范围来缩小搜索。 一个scope就是你定义的那样。 这里他是一个糖果的分类, 不过scopes也可以是类型, 范围, 或者其他完全不同的东西。</p><br><p>使用scope bar和实现一个额外的代理方法一样容易。</p><br><p>在 <em>MasterViewController.swift</em>, 你要添加另一个扩展，需要遵守 <code>UISearchBarDelegate</code>协议. 在 <code>UISearchResultsUpdating</code> 后面添加扩展方法:</p>

<div class="wp_codebox"><table><tr id="p11377211"><td class="code" id="p113772code11"><pre class="swift" style="font-family:monospace;">extension MasterViewController<span style="color: #002200;">:</span> <span style="color: #2a6f76;">UISearchBarDelegate</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #a61390;">func</span> searchBar<span style="color: #002200;">&#40;</span>searchBar<span style="color: #002200;">:</span> <span style="color: #400080;">UISearchBar</span>, selectedScopeButtonIndexDidChange selectedScope<span style="color: #002200;">:</span> <span style="color: #a61390;">Int</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    filterContentForSearchText<span style="color: #002200;">&#40;</span>searchBar.text<span style="color: #002200;">!</span>, scope<span style="color: #002200;">:</span> searchBar.scopeButtonTitles<span style="color: #002200;">!</span><span style="color: #002200;">&#91;</span>selectedScope<span style="color: #002200;">&#93;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div>

<p>这个代理方法在用户切换scope时候调用. 当方法执行时, 你想要重做过滤, 就要调用<code>filterContentForSearchText(<em>:scope:)</em></code> 用新的scope。</p><br><p>现在修改 <code>filterContentForSearchText(:scope:)</code> 来获取提供给账户的scope:</p>

<div class="wp_codebox"><table><tr id="p11377212"><td class="code" id="p113772code12"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">func</span> filterContentForSearchText<span style="color: #002200;">&#40;</span>searchText<span style="color: #002200;">:</span> <span style="color: #a61390;">String</span>, scope<span style="color: #002200;">:</span> <span style="color: #a61390;">String</span> <span style="color: #002200;">=</span> <span style="color: #bf1d1a;">&quot;All&quot;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>  filteredCandies <span style="color: #002200;">=</span> candies.<span style="color: #a61390;">filter</span> <span style="color: #002200;">&#123;</span> candy <span style="color: #a61390;">in</span><br>    <span style="color: #a61390;">let</span> categoryMatch <span style="color: #002200;">=</span> <span style="color: #002200;">&#40;</span>scope <span style="color: #002200;">==</span> <span style="color: #bf1d1a;">&quot;All&quot;</span><span style="color: #002200;">&#41;</span> || <span style="color: #002200;">&#40;</span>candy.category <span style="color: #002200;">==</span> scope<span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">return</span>  categoryMatch <span style="color: #002200;">&amp;&amp;</span> candy.name.lowercaseString.containsString<span style="color: #002200;">&#40;</span>searchText.lowercaseString<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  tableView.reloadData<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div>

<p>这个方法判断提供的scope是 &#8220;All&#8221; 还是匹配糖果的分类。 只有这样测试糖果名才知道是否将它加入 <code>filteredCandies</code>.</p><br><p>你快搞定了, 不过scope过滤机制还不能完全工作。你需要修改 <code>updateSearchResultsForSearchController(_:)</code> , 在第一个类扩展方法中，你用来传递当前选择的scope的:</p>

<div class="wp_codebox"><table><tr id="p11377213"><td class="code" id="p113772code13"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">func</span> updateSearchResultsForSearchController<span style="color: #002200;">&#40;</span>searchController<span style="color: #002200;">:</span> UISearchController<span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #a61390;">let</span> searchBar <span style="color: #002200;">=</span> searchController.searchBar<br>  <span style="color: #a61390;">let</span> scope <span style="color: #002200;">=</span> searchBar.scopeButtonTitles<span style="color: #002200;">!</span><span style="color: #002200;">&#91;</span>searchBar.selectedScopeButtonIndex<span style="color: #002200;">&#93;</span><br>  filterContentForSearchText<span style="color: #002200;">&#40;</span>searchController.searchBar.text<span style="color: #002200;">!</span>, scope<span style="color: #002200;">:</span> scope<span style="color: #002200;">&#41;</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div>

<p>还剩个问题, 用户还看不到scope bar ! 来添加scope bar, 导航到 <em>MasterViewController.swift</em>, 在<code>viewDidLoad()</code>创建搜索控制器之后, 添加下面的代码:</p>

<div class="wp_codebox"><table><tr id="p11377214"><td class="code" id="p113772code14"><pre class="swift" style="font-family:monospace;">searchController.searchBar.scopeButtonTitles <span style="color: #002200;">=</span> <span style="color: #002200;">&#91;</span><span style="color: #bf1d1a;">&quot;All&quot;</span>, <span style="color: #bf1d1a;">&quot;Chocolate&quot;</span>, <span style="color: #bf1d1a;">&quot;Hard&quot;</span>, <span style="color: #bf1d1a;">&quot;Other&quot;</span><span style="color: #002200;">&#93;</span><br>searchController.searchBar.delegate <span style="color: #002200;">=</span> <span style="color: #a61390;">self</span></pre></td></tr></table></div>

<p></p><p>这个会在搜索条下面添加一个scope bar, 并且带有你指定的糖果分类。 同时包含用来忽略糖果分类的 <em>&#8220;All&#8221;</em> 。</p><p></p>
<p></p><p>现在, 当你输入的时候, 选择的scope按钮会和搜索文字一起使用。 </p><p></p>
<p></p><p>编译运行程序。 试着输入一些搜索文字, 同时改变scope。</p><p></p>
<div align="center"><img src="http://www.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Filter-with-Scope-281x500.png" width="281" height="500" class="aligncenter size-large wp-image-113863" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Filter-with-Scope-281x500.png 281w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Filter-with-Scope-180x320.png 180w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Filter-with-Scope.png 750w" sizes="(max-width: 281px) 100vw, 281px"></div><br><p>输入 &#8220;caramel&#8221; scope 设置为 All。它出现在列表里, 如果你把scope换成Chocolate, &#8220;caramel&#8221; 消失了。 因为它不是巧克力。</p><br><h2>从这里去哪里呢?</h2><br><p>恭喜 &#8211; 你现在有了一个可以直接在主列表搜索的程序。 这里是 <a href="http://www.raywenderlich.com/wp-content/uploads/2015/09/CandySearch.zip" target="_blank" rel="external">可下载的简单工程</a> 含有上面所有的代码。</p><br><p>列表视图在各种程序里运用, 提供搜索选项是个好的触摸功能。 <code>UISearchBar</code> 和 <code>UISearchController</code>, iOS 提供了大部分的功能，你没有理由不用这个功能。 在大量列表中执行搜索是用户希望含有的功能; 一旦他们发现没有这个功能，他们会不高兴的。</p><br><div align="center"><img src="http://www.raywenderlich.com/wp-content/uploads/2012/07/nosearchfunction.jpg" width="400" height="361" class="size-full wp-image-19061" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2012/07/nosearchfunction.jpg 400w, https://cdn2.raywenderlich.com/wp-content/uploads/2012/07/nosearchfunction-250x225.jpg 250w, https://cdn2.raywenderlich.com/wp-content/uploads/2012/07/nosearchfunction-354x320.jpg 354w" sizes="(max-width: 400px) 100vw, 400px"></div>


]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://www.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Square.png&quot; width=&quot;250&quot; height=&quot;250
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>项目结束后的一些思考</title>
    <link href="http://yoursite.com/2016/09/08/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9D%9F%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2016/09/08/项目结束后的一些思考/</id>
    <published>2016-09-08T08:42:51.000Z</published>
    <updated>2016-09-12T08:47:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>为什么项目又延期了？ ——–来自市场的愤怒 </p>
</blockquote>
<p>为什么项目又延期了呢？</p>
<div style="text-align:center"><br><img src="http://img306.ph.126.net/Xk7NwVjqPUtaYlY6u2m2GQ==/3852829481215481010.jpg"><br></div>

<p>从项目立项到发布，一般项目的生命周期都是如上图所示，任何一个环节出现问题，都会增加工时的消耗</p>
<p>开源中国社区 <a href="http://www.oschina.net/question/565065_86309" title="百度" target="_blank" rel="external">软件开发流程</a> 说的很详细了，我只说说自己的一些看法和见解。</p>
<h1 id="关于知识的储备"><a href="#关于知识的储备" class="headerlink" title="关于知识的储备"></a>关于知识的储备</h1><div><br><p>笔者曾经参与多个iOS项目的开发，大大小小的项目都经历，实话说，极少有项目可以按时交付，即使连最基本的问题清零都做不到，基本都需要加班加点，到最后还是会遗留一些解决不了的问题。<br></p><br><p>新人越多的项目越容易出问题，当新人逐渐变成老司机的时候，无论是代码质量还是项目进度都变的靠谱多了。现代开发虽然引入了很多提高工作效率的工具和方法，但是人的能力还是占主导地位，人的知识储备在此就显得尤为重要了。<br></p><br><p>对新人的培养必须区别于学校，培养其主动学习能力才是进步之石，作为领导或者开发组长，应该根据员工的特点为其引路，创造学习的环境和条件，而不是将任务分配完了就不管了。在我经历的项目中，发现大多数的新人做了很多重复性的工作，在很长的时期里机械的做事，根本没有机会成长，他们现在或者变成老油条或者继续做着简单的工作，在新的毕业生涌入的潮流中，彻底的沉下去了。<br><br></p></div>

<div style="text-align:center"><br><img src="http://photocdn.sohu.com/20150811/mp26839099_1439275236239_1_th.jpeg" width="280" height="300"><br></div>

<h1 id="关于责任心"><a href="#关于责任心" class="headerlink" title="关于责任心"></a>关于责任心</h1><div><br><p>责任心这个东西应该是个后天的东西，因此在新人面试的时候，怎么在短短几十分钟内辨别面试者的责任心，是需要经验和一些运气的。如果等到新人进组和接手开发任务的时候，再去辨别就有点晚了。<br></p><br><p>有责任心的员工自主性相对较强，对自己的工作进度和质量都有着高度的要求，轻易不会表现沮丧和得过且过，接手的功能和任务都会认真对待，即使能力一时不足，也会通过不断的学习和填坑来完成，并不断总结，最终他开发的功能一般都会有个比较好的结果。<br></p><br></div>

<h1 id="关于工作方式"><a href="#关于工作方式" class="headerlink" title="关于工作方式"></a>关于工作方式</h1><div><br><p>成功者都有一套自己的工作方式，普通人也有自己的工作方式，不同之处是高效和低效的区别。软件开发是体力和脑力劳动的结合，其中脑力劳动占据了主导地位，善于用脑的工程师是一般都掌握一套可以提高工作效率的工具和工作方式。<br></p><br><p>我个人认为提高工作效率的方式就是总结归纳改进，但是至于如何总结归纳改进则看情况而定。在我经历过的大大小小数十个项目中，多数的工程师变的平庸了，走向卓越的工程师非常稀少。这些人现在遍布在不同的公司，担任着重要的职务，甚至有些人已经创业成功，晋级到了富人阶层。<br></p><br></div>

<div style="text-align:center"><br><img src="http://img5.imgtn.bdimg.com/it/u=2981119672,2990184737&fm=21&gp=0.jpg" width="400" height="300"><br></div>

<h1 id="关于总结"><a href="#关于总结" class="headerlink" title="关于总结"></a>关于总结</h1><div><br><p>项目总结很重要也很必要，至少我是这么认为的。很多重复发生的错误和事故都是因为没及时总结造成的，这简直是犯罪。作为项目管理者，不能指望所有的工程师都会及时总结经验，汲取教训，更不会主动去帮别人总结。<br><br>人的惰性是天性，勤奋的人都是养成习惯才勤奋的，作为管理者要让工程师养成总结的习惯，而不是让他们自己去发挥主观能动性。参与总结的人越多，工程师越是放松，越能说出真实的想法，并付诸行动。<br><br>我开总结会，一般从三个方面来进行，一是自身的不足和改进，二是项目的不足和改进，三是公司提供的资源是否到位。一般来说，前面两点大部分的工程师都能讲出几条不足和改进意见，唯独第三条不知为什么要考虑这个因素。我的观点是，项目不是独立的，研发和测试只是产品生命周期的一个阶段，公司的很多部门都会对研发工作产生影响，很多工程师看不到这点。学会与各个部门打交道，不止是领导层的工作，也是工程师需要具备的能力。<br></p><br></div>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;为什么项目又延期了？ ——–来自市场的愤怒 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么项目又延期了呢？&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://img306.ph.12
    
    </summary>
    
    
  </entry>
  
</feed>
