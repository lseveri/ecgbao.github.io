<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>跳跳魔王的博客</title>
  <subtitle>每天进步一点点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-09-20T06:18:23.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>跳跳魔王</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CALayer开发指南</title>
    <link href="http://yoursite.com/2016/09/19/CALayer%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2016/09/19/CALayer开发指南/</id>
    <published>2016-09-19T07:16:18.000Z</published>
    <updated>2016-09-20T06:18:23.000Z</updated>
    
    <content type="html"><![CDATA[<html lang="en-US" class="no-js windows"><br><br><link rel="stylesheet" id="wpsqt-main-css" href="https://cdn3.raywenderlich.com/wp-content/plugins/wp-survey-and-quiz-tool/css/main.css?ver=4.5.2" type="text/css" media="all"><br><link rel="stylesheet" id="style-main-css" href="https://cdn4.raywenderlich.com/wp-content/themes/raywenderlich/style.min.css?ver=1471520796" type="text/css" media="all"><br><br><div id="attachment_114189" style="width: 260px" class="wp-caption alignright"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/LayersScreenshot-316x320.png" width="316" height="320" class="alignright size-medium wp-image-91873" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/LayersScreenshot-316x320.png 316w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/LayersScreenshot-494x500.png 494w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/LayersScreenshot-32x32.png 32w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/LayersScreenshot-64x64.png 64w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/LayersScreenshot-96x96.png 96w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/LayersScreenshot.png 608w" sizes="(max-width: 316px) 100vw, 316px"></div><br><br><p>也许你知道, 你在iOS程序上看到的一切都是视图。 有按钮视图, 列表视图, 滑块视图, 甚至是包含其他视图的父视图。</p><br><p>不过你可能不知道,每个视图都由一个叫做图层的类支持 – 一个特定的 CALayer 。 </p><br><p>通过这篇文章, 你会了解 CALayer 是什么, 如何工作的。 你还会看到10个用 CALayers 实现的炫酷效果, 比如几何图形, 渐变, 甚至是粒子系统。</p><br><p>这篇文章假设你会用Swift开发iOS应用程序, 包括用故事板构造界面。 </p><br><br><h2>开始</h2><br><p>理解图层到底是什么的最容易的方法就是看他们怎么运行。 所以让我们从头创建一个简单的工程来玩转图层。</p><br><p>准备好写代码了吗? 不错! 启动 Xcode 并且:</p><br><ol><br><li>从菜单选择 <em>File\New\Project&#8230;</em> . </li><br><li>从对话框中选择 <em>iOS\Application\Single View Application</em> . </li><br><li>点击 <em>Next</em>, 输入 <em>CALayerPlayground</em> 作为产品名,输入机构名和标识符。 </li><br><li>选择 <em>Swift</em>作为开发语言同时选择  <em>Universal</em> . </li><br><li>不要选中 <em>Core Data</em> , 然后点击 <em>Next</em>. </li><br><li>给你的工程找个好位置 (我把工程放在一个叫 Source 的用户文件夹), 然后点击 <em>Create</em>.</li><br><p>好了, 现在文件创建好了,下一步是创建一个视图:</p><br><li>在 Project navigator, 选择 <em>Main.storyboard</em>. </li><br><li>从菜单中选择 <em>View\Assistant Editor\Show Assistant Editor</em> , 如果没有显示出来就选择 <em>View\Utilities\Show Object Library</em> . </li><br><li>也可以选择 <em>Editor\Canvas\Show Bounds Rectangles</em>, 这样你会看到将要加入scene的视图边界轮廓。 </li><br><li>从 Object library 中, 拖一个视图到 View Controller Scene. 选中它, 去 Size inspector (<em>View\Utilities\Show Size Inspector</em>)设置 <em>x</em> 和 <em>y</em> 为 <em>150</em> , <em>width</em> 和 <em>height</em> 为 <em>300</em>. </li><br><li>保持视图选中, 点击自动布局工具条上的 <em>Align</em> 按钮 (故事板右下方) 选中 <em>Horizontal Center in Container</em> 和 <em>Vertical Center in Container</em>, 两个值都设为 <em>0</em>, 然后点击 <em>Add 2 Constraints</em>. </li><br><li>点击 <em>Pin</em> 按钮, 选中 <em>Width</em> 和 <em>Height</em>, 确保两个值都设成 <em>300</em>, 点击 <em>Add 2 Constraints</em>.</li><br></ol><br><p>最后, 按住control拖住在 <em>ViewController.swift</em> 创建的视图, 拖到 <code>viewDidLoad()</code> 方法上面。 弹出提示给出的outlet 名字是 <em>viewForLayer</em>. 你的 Xcode 看起来是这样:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/Xcode-CreateOutlet.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/Xcode-CreateOutlet-700x215.png" alt="Xcode-CreateOutlet" width="700" height="215" class="aligncenter size-large wp-image-90649" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/Xcode-CreateOutlet-700x215.png 700w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/Xcode-CreateOutlet-480x147.png 480w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/Xcode-CreateOutlet.png 1404w" sizes="(max-width: 700px) 100vw, 700px"></a></p><br><p>点击 <em>Connect</em> 创建 outlet. </p><br><p>用下面的代码替换 <em>ViewController.swift</em> 的内容:</p><br><br><div class="wp_codebox"><table><tr id="p904881"><td class="code" id="p90488code1"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">import</span> UIKit<br>&nbsp;<br><span style="color: #a61390;">class</span> ViewController<span style="color: #002200;">:</span> <span style="color: #400080;">UIViewController</span> <span style="color: #002200;">&#123;</span><br>&nbsp;<br>  @IBOutlet weak <span style="color: #a61390;">var</span> viewForLayer<span style="color: #002200;">:</span> <span style="color: #400080;">UIView</span><span style="color: #002200;">!</span><br>&nbsp;<br>  <span style="color: #a61390;">var</span> l<span style="color: #002200;">:</span> <span style="color: #400080;">CALayer</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">return</span> viewForLayer.layer<br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">super</span>.viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    setUpLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #a61390;">func</span> setUpLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    l.backgroundColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.blueColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.<span style="color: #400080;">CGColor</span><br>    l.borderWidth <span style="color: #002200;">=</span> <span style="color: #2400d9;">100.0</span><br>    l.borderColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.redColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.<span style="color: #400080;">CGColor</span><br>    l.shadowOpacity <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.7</span><br>    l.shadowRadius <span style="color: #002200;">=</span> <span style="color: #2400d9;">10.0</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>正如前面提到的, 每个视图都有一个图层, 你可以用 <code>yourView.layer</code> 获取这个图层。 这个代码首先做的是创建一个计算属性”l” (小写的 L) 来访问 <code>viewForLayer</code> 的图层, 这个可以节省你写后续代码的敲击。 </p><br><p> <code>setUpLayer</code> 负责给图层设置一些属性; 阴影, 蓝色的背景, 红色大边框。 稍后你会了解更多 <code>setUpLayer()</code> , 不过先编译运行模拟器来查看你的自定义图层 (我选的是 <em>iPhone 6</em>) :</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-1.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-1-179x320.png" alt="CALayerPlayground-1" width="179" height="320" class="aligncenter size-medium wp-image-90653 bordered" srcset="https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-1-179x320.png 179w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-1-281x500.png 281w" sizes="(max-width: 179px) 100vw, 179px"></a></p><br><p>几行代码的效果很酷吧,  因为每个视图背后都有图层, 你可以在程序 <i>任意</i> 视图中做这些。 我们来仔细看一下。</p><br><h2>基本的 CALayer 属性</h2><br><p>CALayer 有几个属让你可以自定义它的外观。 回想一下你前面做过的:</p><br><ul><br><li>背景色从无到蓝色<br></li><li>把边框宽度从0改成100<br></li><li>把边框色从黑色变成红色<br></li><li>最后, 改变阴影透明度的值到0.7; 这会产生阴影效果, 你可以进一步把它的阴影半径从3改成10。</li><br></ul><br><p>CALayer 仅有几个属性可以设置。 我们再试两个。 在<code>setUpLayer()</code> 下添加下面几行代码:</p><br><br><div class="wp_codebox"><table><tr id="p904882"><td class="code" id="p90488code2"><pre class="swift" style="font-family:monospace;">l.contents <span style="color: #002200;">=</span> <span style="color: #400080;">UIImage</span><span style="color: #002200;">&#40;</span>named<span style="color: #002200;">:</span> <span style="color: #bf1d1a;">&quot;star&quot;</span><span style="color: #002200;">&#41;</span>?.CGImage<br>l.contentsGravity <span style="color: #002200;">=</span> kCAGravityCenter</pre></td></tr></table></div><br><br><p> <code>contents</code> 属性允许你给图层内容设置图片, 所以这里你给它设了图片叫 &#8220;star&#8221;. 对于这个工作, 你要先把图片加到你的工程里,  <a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/star.png" title="Star image" download="star.png" target="_blank" rel="external">下载我做的星星图片</a> 然后添加到你的工程里。</p><br><p>编译运行程序, 欣赏一会这件艺术品: </p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-2.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-2-179x320.png" alt="CALayerPlayground-2" width="179" height="320" class="aligncenter size-medium wp-image-90655 bordered" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-2-179x320.png 179w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-2-281x500.png 281w" sizes="(max-width: 179px) 100vw, 179px"></a></p><br><p>注意星星是如何居中的 &#8211; 这是你因为把 <code>contentsGravity</code> 属性设置成了 <code>kCAGravityCenter</code>. 如你所愿, 你可以改变它的重心为上, 右上, 右, 右下, 下,左下, 左和左上。 </p><br><h2>改变图层的外观</h2><br><p>仅仅为了好玩, 我们添加一些手势来操作图层的外观。 在 Xcode 里, 拖一个点击手势到 <code>viewForLayer</code> . 仅供参考, 添加点击手势应该是这个样子的:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/Xcode-AddTapGestureRecognizer.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/Xcode-AddTapGestureRecognizer-700x478.png" alt="Xcode-AddTapGestureRecognizer" width="700" height="478" class="aligncenter size-large wp-image-90656" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/Xcode-AddTapGestureRecognizer-700x478.png 700w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/Xcode-AddTapGestureRecognizer-468x320.png 468w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/Xcode-AddTapGestureRecognizer.png 1109w" sizes="(max-width: 700px) 100vw, 700px"></a></p><br><div class="note"><br><p><em>备注</em>: 如果你不熟悉手势, 可以查看 <a href="http://www.raywenderlich.com/76020/using-uigesturerecognizer-with-swift-tutorial" title="Using UIGestureRecognizer with Swift" target="_blank" rel="external"> Using UIGestureRecognizer with Swift</a>. </p><br></div><br><p>重复步骤添加一个捏合手势到 <code>viewForLayer</code> .</p><br><p>然后按住 control拖动每个手势到<em>ViewController.swift</em>, 一个接着一个, 把它们放<code>setUpLayer()</code> 和类的大括号之间。 </p><br><p>在弹出框里, 把连接按钮改成 <em>Action</em> 命名点击手势名为 <code>tapGestureRecognized</code> , 捏合手势名为 <code>pinchGestureRecognized</code>. 例如:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/Xcode-CreateAction.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/Xcode-CreateAction-700x253.png" alt="Xcode-CreateAction" width="700" height="253" class="aligncenter size-large wp-image-90658" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/Xcode-CreateAction-700x253.png 700w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/Xcode-CreateAction-480x173.png 480w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/Xcode-CreateAction.png 1102w" sizes="(max-width: 700px) 100vw, 700px"></a></p><br><p>修改 <code>tapGestureRecognized(_:)</code> 像这样:</p><br><br><div class="wp_codebox"><table><tr id="p904883"><td class="code" id="p90488code3"><pre class="swift" style="font-family:monospace;">@IBAction <span style="color: #a61390;">func</span> tapGestureRecognized<span style="color: #002200;">&#40;</span>sender<span style="color: #002200;">:</span> <span style="color: #400080;">UITapGestureRecognizer</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>  l.shadowOpacity <span style="color: #002200;">=</span> l.shadowOpacity <span style="color: #002200;">==</span> <span style="color: #2400d9;">0.7</span> ? <span style="color: #2400d9;">0.0</span> <span style="color: #002200;">:</span> <span style="color: #2400d9;">0.7</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>这是告诉 <code>viewForLayer</code> 点击时在0.7和0的阴影不透明度之间切换图层的阴影。 </p><br><p>你说的这个视图? 重写 CALayer&#8217;的 <code>hitTest(<em>:)</em></code> 方法也可以实现, 实际上在文章的后面你会看到这个方法。 不过这里是上面方法的逻辑:  hit testing 是图层唯一可以做的, 因为它不响应手势。 这就是为什么你要在视图上添加手势T。 </p><br><p>现在修改 <code>pinchGestureRecognized(:)</code> 像这样:</p><br><br><div class="wp_codebox"><table><tr id="p904884"><td class="code" id="p90488code4"><pre class="swift" style="font-family:monospace;">@IBAction <span style="color: #a61390;">func</span> pinchGestureRecognized<span style="color: #002200;">&#40;</span>sender<span style="color: #002200;">:</span> UIPinchGestureRecognizer<span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #a61390;">let</span> offset<span style="color: #002200;">:</span> <span style="color: #400080;">CGFloat</span> <span style="color: #002200;">=</span> sender.scale &lt; <span style="color: #2400d9;">1</span> ? <span style="color: #2400d9;">5.0</span> <span style="color: #002200;">:</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">5.0</span><br>  <span style="color: #a61390;">let</span> oldFrame <span style="color: #002200;">=</span> l.frame<br>  <span style="color: #a61390;">let</span> oldOrigin <span style="color: #002200;">=</span> oldFrame.origin<br>  <span style="color: #a61390;">let</span> newOrigin <span style="color: #002200;">=</span> <span style="color: #400080;">CGPoint</span><span style="color: #002200;">&#40;</span>x<span style="color: #002200;">:</span> oldOrigin.x <span style="color: #002200;">+</span> offset, y<span style="color: #002200;">:</span> oldOrigin.y <span style="color: #002200;">+</span> offset<span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">let</span> newSize <span style="color: #002200;">=</span> <span style="color: #400080;">CGSize</span><span style="color: #002200;">&#40;</span>width<span style="color: #002200;">:</span> oldFrame.width <span style="color: #002200;">+</span> <span style="color: #002200;">&#40;</span>offset <span style="color: #002200;"><em></em></span> <span style="color: #002200;">-</span><span style="color: #2400d9;">2.0</span><span style="color: #002200;">&#41;</span>, height<span style="color: #002200;">:</span> oldFrame.height <span style="color: #002200;">+</span> <span style="color: #002200;">&#40;</span>offset <span style="color: #002200;"></span> <span style="color: #002200;">-</span><span style="color: #2400d9;">2.0</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">let</span> newFrame <span style="color: #002200;">=</span> <span style="color: #400080;">CGRect</span><span style="color: #002200;">&#40;</span>origin<span style="color: #002200;">:</span> newOrigin, size<span style="color: #002200;">:</span> newSize<span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">if</span> newFrame.width &gt;<span style="color: #002200;">=</span> <span style="color: #2400d9;">100.0</span> <span style="color: #002200;">&amp;&amp;</span> newFrame.width &lt;<span style="color: #002200;">=</span> <span style="color: #2400d9;">300.0</span> <span style="color: #002200;">&#123;</span><br>    l.borderWidth <span style="color: #002200;">-=</span> offset<br>    l.cornerRadius <span style="color: #002200;">+=</span> <span style="color: #002200;">&#40;</span>offset <span style="color: #002200;">/</span> <span style="color: #2400d9;">2.0</span><span style="color: #002200;">&#41;</span><br>    l.frame <span style="color: #002200;">=</span> newFrame<br>  <span style="color: #002200;">&#125;</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>你在这里基于用户捏合创建了正负偏移量, 然后调整图层区域的尺寸,边框的宽度和圆角半径。 </p><br><p>图层的圆角半径默认为0, 是个90度圆角的标准矩形。 增加半径创建圆角。 想把正方形变成圆吗? 把圆角半径设置为宽度的一半就可以了。 </p><br><p>注意,调整圆角半径并不会裁剪图层的内容 (星星图片) 除非图层的 <code>masksToBounds</code> 属性设置成 <code>true</code>.</p><br><p>编译运行, 试着单击和捏合视图:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-3.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-3-179x320.png" alt="CALayerPlayground-3" width="179" height="320" class="aligncenter size-medium wp-image-90661 bordered" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-3-179x320.png 179w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CALayerPlayground-3-281x500.png 281w" sizes="(max-width: 179px) 100vw, 179px"></a></p><br><p>嗨, 慢慢打磨,你可以成为一个不错的头像制造商! :]</p><br><h2>伟大的 CALayer 之旅</h2><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2015/01/CaLayerTour-e1421621716326.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2015/01/CaLayerTour-e1421621716326.png" alt="CaLayerTour" width="441" height="423" class="aligncenter size-full wp-image-93973" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/01/CaLayerTour-e1421621716326.png 441w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/01/CaLayerTour-e1421621716326-334x320.png 334w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/01/CaLayerTour-e1421621716326-32x32.png 32w" sizes="(max-width: 441px) 100vw, 441px"></a> </p><br><p>CALayer 已经多了一些属性和方法, 以及一些拥有特定属性和方法的子类。 </p><br><p>对于剩下的文章, 你会需要下面的:</p><br><ul><br><li><a href="http://bit.ly/AppStoreLayerPlayer" title="Layer Player on App Store" target="_blank">The Layer Player App</a></li><br><li><a href="http://bit.ly/LayerPlayer" title="Layer Player at GitHub" target="_blank">The Layer Player Source Code</a></li><br></ul><br><p>这个程序包含10种不同 CALayers 的示例, 这些示例你会在文章里学到。 这是10个示例的预览:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayerTourScenes.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayerTourScenes-700x415.png" alt="CALayerTourScenes" width="700" height="415" class="aligncenter size-large wp-image-92164 bordered" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CALayerTourScenes-700x415.png 700w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CALayerTourScenes-480x284.png 480w" sizes="(max-width: 700px) 100vw, 700px"></a></p><br><p>通过下面的例子, 我建议你在 CALayer 程序中玩玩,选择性的看一些源码。 剩余的文章你不需要编码, 坐下来阅读吧 :]</p><br><p>这里有一些很棒的示例你可以添加不同类型 CALayers 到你的工程。 希望你喜欢!</p><br><h2>示例1: CALayer</h2><br><p>你已经看过一个使用 CALayer 的示例, 并且设置了一些属性。 </p><br><p>这里有一些关于 CALayers 的事我还没有提及:</p><br><ul><br><li><em>图层可以有子图层</em>. 就像视图有子视图, 图层也有子图层。 你可以用这个实现一些炫酷的效果!</li><br><li><em>图层属性是动画的</em>. 当你改变一个图层的属性时, 默认它会随着时间产生动画。 你也可以按照自己的时机定制动画。</li><br><li><em>图层是轻量级的</em>. 图层比视图轻量级, 因此它们可以帮你实现更好的效果。</li><br><li><em>图层有很多有用的属性.</em> 你已经看到一些了, 不过让我们再看一些!</li><br></ul><br><p>如你早前看到的, 图层有很多有用的属性。 让我浏览完整的 CALayer 属性列表 &#8211; 一些你没有看过的但是很便捷的!</p><br><br><div class="wp_codebox"><table><tr id="p904885"><td class="code" id="p90488code5"><pre class="swift" style="font-family:monospace;"><span style="color: #11740a; font-style: italic;">// 1</span><br><span style="color: #a61390;">let</span> layer <span style="color: #002200;">=</span> <span style="color: #400080;">CALayer</span><span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>layer.frame <span style="color: #002200;">=</span> someView.bounds<br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 2</span><br>layer.contents <span style="color: #002200;">=</span> <span style="color: #400080;">UIImage</span><span style="color: #002200;">&#40;</span>named<span style="color: #002200;">:</span> <span style="color: #bf1d1a;">&quot;star&quot;</span><span style="color: #002200;">&#41;</span>?.CGImage<br>layer.contentsGravity <span style="color: #002200;">=</span> kCAGravityCenter<br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 3</span><br>layer.magnificationFilter <span style="color: #002200;">=</span> kCAFilterLinear<br>layer.geometryFlipped <span style="color: #002200;">=</span> <span style="color: #a61390;">false</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 4</span><br>layer.backgroundColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span><span style="color: #002200;">&#40;</span>red<span style="color: #002200;">:</span> <span style="color: #2400d9;">11</span><span style="color: #002200;">/</span><span style="color: #2400d9;">255.0</span>, green<span style="color: #002200;">:</span> <span style="color: #2400d9;">86</span><span style="color: #002200;">/</span><span style="color: #2400d9;">255.0</span>, blue<span style="color: #002200;">:</span> <span style="color: #2400d9;">14</span><span style="color: #002200;">/</span><span style="color: #2400d9;">255.0</span>, alpha<span style="color: #002200;">:</span> <span style="color: #2400d9;">1.0</span><span style="color: #002200;">&#41;</span>.<span style="color: #400080;">CGColor</span><br>layer.opacity <span style="color: #002200;">=</span> <span style="color: #2400d9;">1.0</span><br>layer.hidden <span style="color: #002200;">=</span> <span style="color: #a61390;">false</span><br>layer.masksToBounds <span style="color: #002200;">=</span> <span style="color: #a61390;">false</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 5</span><br>layer.cornerRadius <span style="color: #002200;">=</span> <span style="color: #2400d9;">100.0</span><br>layer.borderWidth <span style="color: #002200;">=</span> <span style="color: #2400d9;">12.0</span><br>layer.borderColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.whiteColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.<span style="color: #400080;">CGColor</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 6</span><br>layer.shadowOpacity <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.75</span><br>layer.shadowOffset <span style="color: #002200;">=</span> <span style="color: #400080;">CGSize</span><span style="color: #002200;">&#40;</span>width<span style="color: #002200;">:</span> <span style="color: #2400d9;">0</span>, height<span style="color: #002200;">:</span> <span style="color: #2400d9;">3</span><span style="color: #002200;">&#41;</span><br>layer.shadowRadius <span style="color: #002200;">=</span> <span style="color: #2400d9;">3.0</span><br>someView.layer.addSublayer<span style="color: #002200;">&#40;</span>layer<span style="color: #002200;">&#41;</span></pre></td></tr></table></div><br><br><p>在上面的代码里:</p><br><ol><br><li>创建一个 CALayer 实例并把他设置成 <code>someView</code> 的边界.</li><br><li>给图层设置一张图片作为内容并居中。 注意用下面的图片数据  (<code>CGImage</code>) 赋值. </li><br><li>通过<code>contentsGravity</code>放大图片时使用过滤器, 可以同时改变大小 (resize, resize aspect, and resize aspect fill) 和 位置 (center, top, top-right, right, etc.). </li><br><p>前面的变化没有动画效果, 如果 <code>geometryFlipped</code> 没有设置成 <code>true</code>, 几何位置和阴影会是颠倒的。继续: </p><br><li>你设置了背景色是蕾最喜欢的绿色阴影 :] 并且让图层变的不透明可见。 同时, 你让视图不要遮挡它的内容, 意思是如果它的尺寸小于它的内容 (星星图), 图片不会被裁剪。 </li><br><li>图层的圆角半径设成宽度的一半可以创造圆形边框的视觉效果; 注意图层颜色用 Quartz 颜色赋值 (<code>CGColor</code>).</li><br><li>创建阴影同时设置 <code>shouldRasterize</code> 为 <code>true</code> (下面讨论), 然后把图层添加到视图结构。</li><br></ol><br><p>这是运行结果:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayer-250x250.png" alt="CALayer" width="250" height="250" class="aligncenter size-thumbnail wp-image-90712" srcset="https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CALayer-250x250.png 250w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CALayer-320x320.png 320w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CALayer-500x500.png 500w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CALayer-32x32.png 32w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CALayer-64x64.png 64w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CALayer-96x96.png 96w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CALayer-128x128.png 128w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CALayer.png 800w" sizes="(max-width: 250px) 100vw, 250px"></p><br><p>CALayer 有两个额外的属性可以提高性能: <code>shouldRasterize</code> 和 <code>drawsAsynchronously</code>. </p><br><p><code>shouldRasterize</code> 默认是 <code>false</code> , 当被设置成 <code>true</code> 它可以提升性能高, 因为图层内容只需要渲染一次就够了。 对于在屏幕上展示动画而又不需要改变外观的对象来说这是完美的。 </p><br><p><code>drawsAsynchronously</code> 是 <code>shouldRasterize</code> 相反的一种属性。 它的值默认也是 <code>false</code> . 把它设置成 <code>true</code> ,在内容必须重复绘制时能提升性能, 比如当你使用发射器图层不断渲染动画颗粒的时候。) </p><br><div class="note"><br><p><em>一个警告</em>: 把图层的 <code>shouldRasterize</code> 或者 <code>drawsAsynchronously</code> 值设置成true 之前要考虑清楚它的影响。 比较值为真假时候的性能,这样你会明白是否需要开启这些特性去提升性能。 如果滥用, 性能可能会急剧下降。<br></p></div><br><p>现在暂时转移注意力到 Layer Player. 它包含可以操作CALayer 属性的很多控件:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayer_5.5.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CALayer_5.5-180x320.png" alt="CALayer_5.5" width="180" height="320" class="aligncenter size-medium wp-image-91212 bordered" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CALayer_5.5-180x320.png 180w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CALayer_5.5-281x500.png 281w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CALayer_5.5.png 1242w" sizes="(max-width: 180px) 100vw, 180px"></a></p><br><p>玩玩这些控件; 这是感受 CALayer 可以做什么的一种很好的方式!</p><br><div class="note"><em>备注:</em> 图层不是响应链的一部分,所以它不能响应触碰或者视图那种手势, 就像你在 CALayerPlayground 示例中看到的那样。 <p></p><br><p>不过, 你可以敲击测试它们, 你会在 CATransformLayer 中看到示例代码。 你也可以往图层添加自定义动画, 这些动画会在 CAReplicatorLayer 中看到。</p></div><br><h2>示例2: CAScrollLayer</h2><br><p>CAScrollLayer displays a portion of a scrollable layer. It&#8217;s fairly basic and cannot directly respond to user touches or even check the bounds of the scrollable layer, so it does cool things like preventing scrolling beyond the bounds ad infinitum! :] </p><br><p>UIScrollView doesn&#8217;t use a CAScrollLayer to do its work, instead it directly changes its layer&#8217;s bounds. </p><br><p>What you can do with a CAScrollLayer is set its scrolling mode to horizontal and/or vertical, and you can programmatically tell it to scroll to a specific point or rect:</p><br><br><div class="wp_codebox"><table><tr id="p904886"><td class="code" id="p90488code6"><pre class="swift" style="font-family:monospace;"><span style="color: #11740a; font-style: italic;">// In ScrollingView.swift</span><br><span style="color: #a61390;">import</span> UIKit<br>&nbsp;<br><span style="color: #a61390;">class</span> ScrollingView<span style="color: #002200;">:</span> <span style="color: #400080;">UIView</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #11740a; font-style: italic;">// 1</span><br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">class</span> <span style="color: #a61390;">func</span> layerClass<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; AnyClass <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">return</span> CAScrollLayer.<span style="color: #a61390;">self</span><br>  <span style="color: #002200;">&#125;</span><br><span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// In CAScrollLayerViewController.swift</span><br><span style="color: #a61390;">import</span> UIKit<br>&nbsp;<br><span style="color: #a61390;">class</span> CAScrollLayerViewController<span style="color: #002200;">:</span> <span style="color: #400080;">UIViewController</span> <span style="color: #002200;">&#123;</span><br>  @IBOutlet weak <span style="color: #a61390;">var</span> scrollingView<span style="color: #002200;">:</span> ScrollingView<span style="color: #002200;">!</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 2</span><br>  <span style="color: #a61390;">var</span> scrollingViewLayer<span style="color: #002200;">:</span> CAScrollLayer <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">return</span> scrollingView.layer <span style="color: #a61390;">as</span> CAScrollLayer<br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">super</span>.viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    <span style="color: #11740a; font-style: italic;">// 3</span><br>    scrollingViewLayer.scrollMode <span style="color: #002200;">=</span> kCAScrollBoth<br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  @IBAction <span style="color: #a61390;">func</span> tapRecognized<span style="color: #002200;">&#40;</span>sender<span style="color: #002200;">:</span> <span style="color: #400080;">UITapGestureRecognizer</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #11740a; font-style: italic;">// 4</span><br>    <span style="color: #a61390;">var</span> newPoint <span style="color: #002200;">=</span> <span style="color: #400080;">CGPoint</span><span style="color: #002200;">&#40;</span>x<span style="color: #002200;">:</span> <span style="color: #2400d9;">250</span>, y<span style="color: #002200;">:</span> <span style="color: #2400d9;">250</span><span style="color: #002200;">&#41;</span><br>    <span style="color: #400080;">UIView</span>.animateWithDuration<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">0.3</span>, delay<span style="color: #002200;">:</span> <span style="color: #2400d9;">0</span>, options<span style="color: #002200;">:</span> .CurveEaseInOut, animations<span style="color: #002200;">:</span> <span style="color: #002200;">&#123;</span><br>      <span style="color: #002200;">&#91;</span>unowned <span style="color: #a61390;">self</span><span style="color: #002200;">&#93;</span> <span style="color: #a61390;">in</span><br>      <span style="color: #a61390;">self</span>.scrollingViewLayer.scrollToPoint<span style="color: #002200;">&#40;</span>newPoint<span style="color: #002200;">&#41;</span><br>      <span style="color: #002200;">&#125;</span>, completion<span style="color: #002200;">:</span> <span style="color: #a61390;">nil</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>In the above code:</p><br><ol><br><li>A custom <code>UIView</code> subclass is used to override <code>layerClass()</code> to return <code>CAScrollLayer</code>; this is an alternative to creating a new layer and adding it as a sublayer, such as what was done in the CALayer example. </li><br><li>A computed property is used to streamline working with the scrolling view layer of the custom <code>UIView</code>.</li><br><li>Scrolling is set to both horizontal and vertical. </li><br><li>When a tap is recognized, a new point is created and the scrolling layer scrolls to that point inside a <code>UIView</code> animation. Note: <code>scrollToPoint(<em>:)</em></code> and <code>scrollToRect(:)</code> do not animate automatically. </li><br></ol><br><p>Case study: An instance of ScrollingView that houses an image view with an image that&#8217;s larger than the scrolling view&#8217;s bounds. When you run the above code and tap on the view, this would be the result:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAScrollLayer.gif" alt="CAScrollLayer" width="250" height="250" class="aligncenter size-full wp-image-90738" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAScrollLayer.gif 250w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAScrollLayer-32x32.gif 32w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAScrollLayer-64x64.gif 64w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAScrollLayer-96x96.gif 96w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAScrollLayer-128x128.gif 128w" sizes="(max-width: 250px) 100vw, 250px"></p><br><p>Layer Player includes multiple controls to lock scrolling horizontally and vertically. </p><br><p>Here are some rules of thumb for when to use (or not to use) CAScrollLayer:</p><br><ul><br><li><em>If you want something lightweight and only need to programmatically scroll</em>: Consider using CAScrollLayer.</li><br><li><em>If you want the user to be able to scroll</em>: You&#8217;re probably better off with UIScrollView. To learn more, check out our <a href="http://www.raywenderlich.com/93104/video-tutorial-swift-scroll-view-school-part-0-introduction" target="_blank" rel="external">18-part video tutorial series</a> on this.</li><br><li><em>If you are scrolling a very large image</em>: Consider using CATiledLayer (more below).</li><br></ul><br><h2>示例3: CATextLayer</h2><br><p>CATextLayer provides simple but fast rendering of plain text or attributed strings. Unlike UILabel, a CATextLayer cannot have an assigned UIFont, only a CTFontRef or CGFontRef. </p><br><p>With a block of code like this, it&#8217;s possible to manipulate font, font size, color, alignment, wrapping and truncation, as well as animate changes:</p><br><br><div class="wp_codebox"><table><tr id="p904887"><td class="code" id="p90488code7"><pre class="swift" style="font-family:monospace;"><span style="color: #11740a; font-style: italic;">// 1</span><br><span style="color: #a61390;">let</span> textLayer <span style="color: #002200;">=</span> CATextLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>textLayer.frame <span style="color: #002200;">=</span> someView.bounds<br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 2</span><br><span style="color: #a61390;">var</span> string <span style="color: #002200;">=</span> <span style="color: #bf1d1a;">&quot;&quot;</span><br><span style="color: #a61390;">for</span> _ <span style="color: #a61390;">in</span> <span style="color: #2400d9;">1</span>…20 <span style="color: #002200;">&#123;</span><br>  string <span style="color: #002200;">+=</span> <span style="color: #bf1d1a;">&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce auctor arcu quis velit congue dictum. &quot;</span><br><span style="color: #002200;">&#125;</span><br>&nbsp;<br>textLayer.string <span style="color: #002200;">=</span> string<br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 3</span><br><span style="color: #a61390;">let</span> fontName<span style="color: #002200;">:</span> CFStringRef <span style="color: #002200;">=</span> <span style="color: #bf1d1a;">&quot;Noteworthy-Light&quot;</span><br>textLayer.font <span style="color: #002200;">=</span> CTFontCreateWithName<span style="color: #002200;">&#40;</span>fontName, fontSize, <span style="color: #a61390;">nil</span><span style="color: #002200;">&#41;</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 4</span><br>textLayer.foregroundColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.darkGrayColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.<span style="color: #400080;">CGColor</span><br>textLayer.wrapped <span style="color: #002200;">=</span> <span style="color: #a61390;">true</span><br>textLayer.alignmentMode <span style="color: #002200;">=</span> kCAAlignmentLeft<br>textLayer.contentsScale <span style="color: #002200;">=</span> UIScreen.mainScreen<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.scale<br>someView.layer.addSublayer<span style="color: #002200;">&#40;</span>textLayer<span style="color: #002200;">&#41;</span></pre></td></tr></table></div><br><br><p>Explanation of the above code:</p><br><ol><br><li>Creates a CATextLayer instance and sets its to <code>someView</code>&#8216;s bounds. </li><br><li>Creates a string of repeated text and assigns it to the text layer. </li><br><li>Creates a font and assigns it to the text layer. </li><br><li>Sets the text layer to wrap and left-align, (You have the option of setting it to natural, right, center and justified.), matches its <code>contentsScale</code> to the screen, and then adds the layer to the view hierarchy.</li><br></ol><br><p>All layer classes, not just CATextLayer, render at a scale factor of 1 by default. When attached to views, layers automatically have their <code>contentsScale</code> set to the appropriate scale factor for the current screen. You need to set the <code>contentsScale</code> explicitly for layers you create manually, or else their scale factor will be 1 and you&#8217;ll have pixilation on retina displays.</p><br><p>If added to a square-shaped <code>someView</code>, the created text layer would look like this:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-250x250.png" alt="CATextLayer" width="250" height="250" class="aligncenter size-thumbnail wp-image-90750" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-250x250.png 250w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-320x320.png 320w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-500x500.png 500w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-32x32.png 32w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-64x64.png 64w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-96x96.png 96w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-128x128.png 128w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer.png 800w" sizes="(max-width: 250px) 100vw, 250px"></p><br><p>Truncation is a setting you can play with, and it&#8217;s nice when you&#8217;d like to represent clipped text with an ellipsis. Truncation defaults to none and can be set to start, end and middle:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-MiddleTruncation.png.png" alt="CATextLayer-MiddleTruncation.png" width="250" height="26" class="aligncenter size-full wp-image-90764"></p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-StartTruncation.png.png" alt="CATextLayer-StartTruncation.png" width="250" height="26" class="aligncenter size-full wp-image-90765"></p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer-EndTruncation.png" alt="CATextLayer-EndTruncation" width="250" height="26" class="aligncenter size-full wp-image-90763"></p><br><p>Layer Player has controls to change many of CATextLayer&#8217;s properties:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer_5.5.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer_5.5-180x320.png" alt="CATextLayer_5.5" width="180" height="320" class="aligncenter size-medium wp-image-91214 bordered" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer_5.5-180x320.png 180w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer_5.5-281x500.png 281w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATextLayer_5.5.png 1242w" sizes="(max-width: 180px) 100vw, 180px"></a></p><br><h2>示例4: AVPlayerLayer</h2><br><p>AVPlayerLayer adds a sweet layer goodness to AVFoundation. It holds an AVPlayer to play AV media files (AVPlayerItems). Here&#8217;s an example of creating an AVPlayerLayer:</p><br><br><div class="wp_codebox"><table><tr id="p904888"><td class="code" id="p90488code8"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #a61390;">super</span>.viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #11740a; font-style: italic;">// 1</span><br>  <span style="color: #a61390;">let</span> playerLayer <span style="color: #002200;">=</span> AVPlayerLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  playerLayer.frame <span style="color: #002200;">=</span> someView.bounds<br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 2</span><br>  <span style="color: #a61390;">let</span> url <span style="color: #002200;">=</span> <span style="color: #400080;">NSBundle</span>.mainBundle<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.URLForResource<span style="color: #002200;">&#40;</span><span style="color: #bf1d1a;">&quot;someVideo&quot;</span>, withExtension<span style="color: #002200;">:</span> <span style="color: #bf1d1a;">&quot;m4v&quot;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">let</span> player <span style="color: #002200;">=</span> AVPlayer<span style="color: #002200;">&#40;</span>URL<span style="color: #002200;">:</span> url<span style="color: #002200;">&#41;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 3</span><br>  player.actionAtItemEnd <span style="color: #002200;">=</span> .None<br>  playerLayer.player <span style="color: #002200;">=</span> player<br>  someView.layer.addSublayer<span style="color: #002200;">&#40;</span>playerLayer<span style="color: #002200;">&#41;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 4</span><br>  <span style="color: #400080;">NSNotificationCenter</span>.defaultCenter<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.addObserver<span style="color: #002200;">&#40;</span><span style="color: #a61390;">self</span>, selector<span style="color: #002200;">:</span> <span style="color: #bf1d1a;">&quot;playerDidReachEndNotificationHandler:&quot;</span>, name<span style="color: #002200;">:</span> <span style="color: #bf1d1a;">&quot;AVPlayerItemDidPlayToEndTimeNotification&quot;</span>, object<span style="color: #002200;">:</span> player.currentItem<span style="color: #002200;">&#41;</span><br><span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #a61390;">deinit</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #400080;">NSNotificationCenter</span>.defaultCenter<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.removeObserver<span style="color: #002200;">&#40;</span><span style="color: #a61390;">self</span><span style="color: #002200;">&#41;</span><br><span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 5</span><br>@IBAction <span style="color: #a61390;">func</span> playButtonTapped<span style="color: #002200;">&#40;</span>sender<span style="color: #002200;">:</span> <span style="color: #400080;">UIButton</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #a61390;">if</span> playButton.titleLabel?.text <span style="color: #002200;">==</span> <span style="color: #bf1d1a;">&quot;Play&quot;</span> <span style="color: #002200;">&#123;</span><br>    player.play<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    playButton.setTitle<span style="color: #002200;">&#40;</span><span style="color: #bf1d1a;">&quot;Pause&quot;</span>, forState<span style="color: #002200;">:</span> .Normal<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span> <span style="color: #a61390;">else</span> <span style="color: #002200;">&#123;</span><br>    player.pause<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    playButton.setTitle<span style="color: #002200;">&#40;</span><span style="color: #bf1d1a;">&quot;Play&quot;</span>, forState<span style="color: #002200;">:</span> .Normal<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  updatePlayButtonTitle<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  updateRateSegmentedControl<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br><span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 6</span><br><span style="color: #a61390;">func</span> playerDidReachEndNotificationHandler<span style="color: #002200;">&#40;</span>notification<span style="color: #002200;">:</span> <span style="color: #400080;">NSNotification</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #a61390;">let</span> playerItem <span style="color: #002200;">=</span> notification.object <span style="color: #a61390;">as</span> AVPlayerItem<br>  playerItem.seekToTime<span style="color: #002200;">&#40;</span>kCMTimeZero<span style="color: #002200;">&#41;</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>A breakdown of the above code:</p><br><ol><br><li>Creates a new player layer and sets its frame.</li><br><li>Creates a player with an AV asset. </li><br><li>Tells the player to do nothing when it finishes playing; additional options include pausing or advancing to the next asset, if applicable. </li><br><li>Registers for AVPlayer&#8217;s notification when it finishes playing an asset (and remove the controller as an observer in deinit). </li><br><li>When the play button is tapped, it toggles controls to play the AV asset and set the button&#8217;s title.</li><br></ol><br><p>Note this is just a simple example just to get you started. In a real project, it would generally not be advisable to pivot on a button&#8217;s title text.</p><br><p>The AVPlayerLayer and its AVPlayer created above would be visually represented by the first frame of the AVPlayerItem instance, like this:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/AVPlayerItem.png" alt="AVPlayerItem" width="250" height="141" class="aligncenter size-full wp-image-91221"></p><br><p>AVPlayerLayer has a couple additional properties:</p><br><ul><br><li><code>videoGravity</code> sets the resizing behavior of the video display. </li><br><li><code>readyForDisplay</code> checks if the video is ready for display. </li><br></ul><br><p><code>AVPlayer</code>, on the other hand, has quite a few additional properties and methods. One to note is <code>rate</code>, which is the playback rate from 0 to 1. Zero means to pause, and 1 means the video plays at regular speed (1x). </p><br><p>However, setting <code>rate</code> also instructs playback to commence at that rate. In other words, calling <code>pause()</code> and setting <code>rate</code> to 0 does the same thing, as calling <code>play()</code> and setting <code>rate</code> to 1.</p><br><p>So what about fast forward, slow motion or playing in reverse? AVPlayerLayer has you covered. Setting <code>rate</code> to anything higher than 1 is equivalent to asking the player to commence playback at that number times regular speed, for instance, setting <code>rate</code> to 2 means double-speed. </p><br><p>As you might assume, setting <code>rate</code> to a negative number instructs playback to commence at that number times regular speed in reverse. </p><br><p>Before playback occurs at any rate other than regular speed (forward), however, the appropriate method is called on the AVPlayerItem instance to verify that it can be played back at that rate: </p><br><ul><br><li><code>canPlayFastForward()</code> for higher than 1</li><br><li><code>canPlaySlowForward()</code> for between 0 and 1</li><br><li><code>canPlayReverse()</code> for -1</li><br><li><code>canPlaySlowReverse()</code> for between -1 and 0</li><br><li><code>canPlayFastReverse()</code> for lower than -1 </li><br></ul><br><p>Most videos can typically play at various forward speeds, but it&#8217;s less typical that they can  play in reverse. Layer Player also includes playback controls:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/AVLayerPlayer_5.5.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/AVLayerPlayer_5.5-180x320.png" alt="AVLayerPlayer_5.5" width="180" height="320" class="aligncenter size-medium wp-image-91216 bordered" srcset="https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/AVLayerPlayer_5.5-180x320.png 180w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/AVLayerPlayer_5.5-281x500.png 281w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/AVLayerPlayer_5.5.png 1242w" sizes="(max-width: 180px) 100vw, 180px"></a></p><br><h2>示例5: CAGradientLayer</h2><br><p>CAGradientLayer makes it easy to blend two or more colors together, making it especially well suited to backgrounds. To configure it, you assign an array of CGColors, as well as a <code>startPoint</code> and an <code>endPoint</code> to specify where the gradient layer should begin and end. </p><br><p>Bear in mind, <code>startPoint</code> and <code>endPoint</code> are not explicit points. Rather, they are defined in the unit coordinate space and then mapped to the layer&#8217;s bounds when drawn. In other words, an x value of 1 means the point is at the right edge of the layer, and a y value of 1 means the point is at the bottom edge of the layer. </p><br><p>CAGradientLayer has a <code>type</code> property, although <code>kCAGradientLayerAxial</code> is the only option, and it transitions through each color in the array linearly. </p><br><p>This means that if you draw a line (A) between <code>startPoint</code> and <code>endPoint</code>, the gradations would occur along an imaginary line (B) that is perpendicular to A, and all points along B would be the same color:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/AxialGradientLayerType.gif" alt="AxialGradientLayerType" width="300" class="aligncenter size-full wp-image-91240"></p><br><p>Alternatively, you can control the <code>locations</code> property with an array of values between 0 and 1 that specify relative stops where the gradient layer should use the next color in the <code>colors</code> array. </p><br><p>If left unspecified the stop locations default to evenly spaced. If <code>locations</code> is set, though, its count must match <code>colors</code> count, or else bad things will happen. :[</p><br><p>Here&#8217;s an example of how to  create a gradient layer:</p><br><br><div class="wp_codebox"><table><tr id="p904889"><td class="code" id="p90488code9"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">let</span> gradientLayer <span style="color: #002200;">=</span> CAGradientLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>gradientLayer.frame <span style="color: #002200;">=</span> someView.bounds<br>gradientLayer.colors <span style="color: #002200;">=</span> <span style="color: #002200;">&#91;</span>cgColorForRed<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">209.0</span>, green<span style="color: #002200;">:</span> <span style="color: #2400d9;">0.0</span>, blue<span style="color: #002200;">:</span> <span style="color: #2400d9;">0.0</span><span style="color: #002200;">&#41;</span>,<br>  cgColorForRed<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">255.0</span>, green<span style="color: #002200;">:</span> <span style="color: #2400d9;">102.0</span>, blue<span style="color: #002200;">:</span> <span style="color: #2400d9;">34.0</span><span style="color: #002200;">&#41;</span>,<br>  cgColorForRed<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">255.0</span>, green<span style="color: #002200;">:</span> <span style="color: #2400d9;">218.0</span>, blue<span style="color: #002200;">:</span> <span style="color: #2400d9;">33.0</span><span style="color: #002200;">&#41;</span>,<br>  cgColorForRed<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">51.0</span>, green<span style="color: #002200;">:</span> <span style="color: #2400d9;">221.0</span>, blue<span style="color: #002200;">:</span> <span style="color: #2400d9;">0.0</span><span style="color: #002200;">&#41;</span>,<br>  cgColorForRed<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">17.0</span>, green<span style="color: #002200;">:</span> <span style="color: #2400d9;">51.0</span>, blue<span style="color: #002200;">:</span> <span style="color: #2400d9;">204.0</span><span style="color: #002200;">&#41;</span>,<br>  cgColorForRed<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">34.0</span>, green<span style="color: #002200;">:</span> <span style="color: #2400d9;">0.0</span>, blue<span style="color: #002200;">:</span> <span style="color: #2400d9;">102.0</span><span style="color: #002200;">&#41;</span>,<br>  cgColorForRed<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">51.0</span>, green<span style="color: #002200;">:</span> <span style="color: #2400d9;">0.0</span>, blue<span style="color: #002200;">:</span> <span style="color: #2400d9;">68.0</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#93;</span><br>gradientLayer.startPoint <span style="color: #002200;">=</span> <span style="color: #400080;">CGPoint</span><span style="color: #002200;">&#40;</span>x<span style="color: #002200;">:</span> <span style="color: #2400d9;">0</span>, y<span style="color: #002200;">:</span> <span style="color: #2400d9;">0</span><span style="color: #002200;">&#41;</span><br>gradientLayer.endPoint <span style="color: #002200;">=</span> <span style="color: #400080;">CGPoint</span><span style="color: #002200;">&#40;</span>x<span style="color: #002200;">:</span> <span style="color: #2400d9;">0</span>, y<span style="color: #002200;">:</span> <span style="color: #2400d9;">1</span><span style="color: #002200;">&#41;</span><br>someView.layer.addSublayer<span style="color: #002200;">&#40;</span>gradientLayer<span style="color: #002200;">&#41;</span><br>&nbsp;<br><span style="color: #a61390;">func</span> cgColorForRed<span style="color: #002200;">&#40;</span>red<span style="color: #002200;">:</span> <span style="color: #400080;">CGFloat</span>, green<span style="color: #002200;">:</span> <span style="color: #400080;">CGFloat</span>, blue<span style="color: #002200;">:</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; <span style="color: #a61390;">AnyObject</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #a61390;">return</span> <span style="color: #400080;">UIColor</span><span style="color: #002200;">&#40;</span>red<span style="color: #002200;">:</span> red<span style="color: #002200;">/</span><span style="color: #2400d9;">255.0</span>, green<span style="color: #002200;">:</span> green<span style="color: #002200;">/</span><span style="color: #2400d9;">255.0</span>, blue<span style="color: #002200;">:</span> blue<span style="color: #002200;">/</span><span style="color: #2400d9;">255.0</span>, alpha<span style="color: #002200;">:</span> <span style="color: #2400d9;">1.0</span><span style="color: #002200;">&#41;</span>.<span style="color: #400080;">CGColor</span> <span style="color: #a61390;">as</span> <span style="color: #a61390;">AnyObject</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>In the above code, you create a gradient layer, match its frame to the bounds of <code>someView</code>, assign an array of colors, set start and end points, and add the gradient layer to the view hierarchy. Here&#8217;s what it would look like:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer-250x250.png" alt="CAGradientLayer" width="250" height="250" class="aligncenter size-thumbnail wp-image-91248 bordered" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer-250x250.png 250w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer-320x320.png 320w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer-500x500.png 500w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer-32x32.png 32w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer-64x64.png 64w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer-96x96.png 96w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer-128x128.png 128w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer.png 609w" sizes="(max-width: 250px) 100vw, 250px"></p><br><p>So colorful! Next, you&#8217;ll program a butterfly that comes fluttering out of the app to tickle your nose. :]</p><br><p>Layer Player provides you controls to change start and end points, colors and locations:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer_5.5.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer_5.5-180x320.png" alt="CAGradientLayer_5.5" width="180" height="320" class="aligncenter size-medium wp-image-91244 bordered" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer_5.5-180x320.png 180w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer_5.5-281x500.png 281w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAGradientLayer_5.5.png 1242w" sizes="(max-width: 180px) 100vw, 180px"></a></p><br><h2>示例6: CAReplicatorLayer</h2><br><p>CAReplicatorLayer duplicates a layer a specified number of times, which can allow you to create some cool effects. </p><br><p>Each layer copy can have it&#8217;s own color and positioning changes, and its drawing can be delayed to give an animation effect to the overall replicator layer. Depth can also be preserved to give the replicator layer a 3D effect. Here&#8217;s an example:</p><br><br><div class="wp_codebox"><table><tr id="p9048810"><td class="code" id="p90488code10"><pre class="swift" style="font-family:monospace;"><span style="color: #11740a; font-style: italic;">// 1</span><br><span style="color: #a61390;">let</span> replicatorLayer <span style="color: #002200;">=</span> CAReplicatorLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>replicatorLayer.frame <span style="color: #002200;">=</span> someView.bounds<br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 2</span><br>replicatorLayer.instanceCount <span style="color: #002200;">=</span> <span style="color: #2400d9;">30</span><br>replicatorLayer.instanceDelay <span style="color: #002200;">=</span> CFTimeInterval<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">1</span> <span style="color: #002200;">/</span> <span style="color: #2400d9;">30.0</span><span style="color: #002200;">&#41;</span><br>replicatorLayer.preservesDepth <span style="color: #002200;">=</span> <span style="color: #a61390;">false</span><br>replicatorLayer.instanceColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.whiteColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.<span style="color: #400080;">CGColor</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 3</span><br>replicatorLayer.instanceRedOffset <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.0</span><br>replicatorLayer.instanceGreenOffset <span style="color: #002200;">=</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">0.5</span><br>replicatorLayer.instanceBlueOffset <span style="color: #002200;">=</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">0.5</span><br>replicatorLayer.instanceAlphaOffset <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.0</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 4</span><br><span style="color: #a61390;">let</span> angle <span style="color: #002200;">=</span> <span style="color: #a61390;">Float</span><span style="color: #002200;">&#40;</span>M_PI <span style="color: #002200;"><em></em></span> <span style="color: #2400d9;">2.0</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">/</span> <span style="color: #2400d9;">30</span><br>replicatorLayer.instanceTransform <span style="color: #002200;">=</span> CATransform3DMakeRotation<span style="color: #002200;">&#40;</span><span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>angle<span style="color: #002200;">&#41;</span>, <span style="color: #2400d9;">0.0</span>, <span style="color: #2400d9;">0.0</span>, <span style="color: #2400d9;">1.0</span><span style="color: #002200;">&#41;</span><br>someView.layer.addSublayer<span style="color: #002200;">&#40;</span>replicatorLayer<span style="color: #002200;">&#41;</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 5</span><br><span style="color: #a61390;">let</span> instanceLayer <span style="color: #002200;">=</span> <span style="color: #400080;">CALayer</span><span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br><span style="color: #a61390;">let</span> layerWidth<span style="color: #002200;">:</span> <span style="color: #400080;">CGFloat</span> <span style="color: #002200;">=</span> <span style="color: #2400d9;">10.0</span><br><span style="color: #a61390;">let</span> midX <span style="color: #002200;">=</span> CGRectGetMidX<span style="color: #002200;">&#40;</span>someView.bounds<span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span> layerWidth <span style="color: #002200;">/</span> <span style="color: #2400d9;">2.0</span><br>instanceLayer.frame <span style="color: #002200;">=</span> <span style="color: #400080;">CGRect</span><span style="color: #002200;">&#40;</span>x<span style="color: #002200;">:</span> midX, y<span style="color: #002200;">:</span> <span style="color: #2400d9;">0.0</span>, width<span style="color: #002200;">:</span> layerWidth, height<span style="color: #002200;">:</span> layerWidth <span style="color: #002200;"></span> <span style="color: #2400d9;">3.0</span><span style="color: #002200;">&#41;</span><br>instanceLayer.backgroundColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.whiteColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.<span style="color: #400080;">CGColor</span><br>replicatorLayer.addSublayer<span style="color: #002200;">&#40;</span>instanceLayer<span style="color: #002200;">&#41;</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 6</span><br><span style="color: #a61390;">let</span> fadeAnimation <span style="color: #002200;">=</span> <span style="color: #400080;">CABasicAnimation</span><span style="color: #002200;">&#40;</span>keyPath<span style="color: #002200;">:</span> <span style="color: #bf1d1a;">&quot;opacity&quot;</span><span style="color: #002200;">&#41;</span><br>fadeAnimation.fromValue <span style="color: #002200;">=</span> <span style="color: #2400d9;">1.0</span><br>fadeAnimation.toValue <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.0</span><br>fadeAnimation.duration <span style="color: #002200;">=</span> <span style="color: #2400d9;">1</span><br>fadeAnimation.repeatCount <span style="color: #002200;">=</span> <span style="color: #a61390;">Float</span><span style="color: #002200;">&#40;</span><span style="color: #a61390;">Int</span>.<span style="color: #a61390;">max</span><span style="color: #002200;">&#41;</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// 7</span><br>instanceLayer.opacity <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.0</span><br>instanceLayer.addAnimation<span style="color: #002200;">&#40;</span>fadeAnimation, forKey<span style="color: #002200;">:</span> <span style="color: #bf1d1a;">&quot;FadeAnimation&quot;</span><span style="color: #002200;">&#41;</span></pre></td></tr></table></div><br><br><p>What the above code does:</p><br><ol><br><li>Creates an instance of CAReplicatorLayer and sets its frame set to <code>someView</code>&#8216;s bounds. </li><br><li>Sets the replicator layer&#8217;s number of copies (<code>instanceCount</code>) and drawing delay. Also sets the replicator layer to be 2D (<code>preservesDepth = false</code>) and its instance color to white. </li><br><li>Adds red/green/blue offsets to the color values of each successive replicated instance. Each defaults to 0, and that effectively preserves color value across all instances. However, in this case, the instance color was originally set to white, meaning red, green and blue are 1.0 already. Hence, setting red to 0 and the green and blue offset values to a negative number allows red to be the prominent color. Similarly, the alpha offset is added to the alpha of each successive replicated instance. </li><br><li>Creates a transform to rotate each successive instance around a circle. </li><br><li>Creates an instance layer for the replicator layer to use and sets its frame so the first instance will be drawn at center x and at the top of <code>someView</code>&#8216;s bounds. This block also sets the instance&#8217;s color and adds the instance layer to the replicator layer. </li><br><li>Makes a fade animation to animate opacity from 1 (opaque) to 0 (transparent). </li><br><li>Sets the instance layer&#8217;s opacity to 0 so that it is transparent until each instance is drawn and its color and alpha values are set.</li><br></ol><br><p>And here&#8217;s what that code would get you:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer.gif" alt="CAReplicatorLayer" width="250" height="250" class="aligncenter size-full wp-image-91334" srcset="https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer.gif 250w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer-32x32.gif 32w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer-64x64.gif 64w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer-96x96.gif 96w, https://cdn3.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer-128x128.gif 128w" sizes="(max-width: 250px) 100vw, 250px"></p><br><p>Layer Player includes controls to manipulate most of these properties:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer_5.5.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer_5.5-180x320.png" alt="CAReplicatorLayer_5.5" width="180" height="320" class="aligncenter size-medium wp-image-91349 bordered" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer_5.5-180x320.png 180w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer_5.5-281x500.png 281w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CAReplicatorLayer_5.5.png 1242w" sizes="(max-width: 180px) 100vw, 180px"></a></p><br><h2>示例7: CATiledLayer</h2><br><p>CATiledLayer asynchronously draws layer content in tiles. This is great for very large images or other sets of content where you are only looking at small bits at a time, because you can start seeing your content without having to load it all into memory at once.</p><br><p>There are a couple of ways to handle the drawing. One is to override UIView and use a CATiledLayer to repeatedly draw tiles to fill up view&#8217;s background, like this:</p><br><br><div class="wp_codebox"><table><tr id="p9048811"><td class="code" id="p90488code11"><pre class="swift" style="font-family:monospace;"><span style="color: #11740a; font-style: italic;">// In ViewController.swift</span><br><span style="color: #a61390;">import</span> UIKit<br>&nbsp;<br><span style="color: #a61390;">class</span> ViewController<span style="color: #002200;">:</span> <span style="color: #400080;">UIViewController</span> <span style="color: #002200;">&#123;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 1</span><br>  @IBOutlet weak <span style="color: #a61390;">var</span> tiledBackgroundView<span style="color: #002200;">:</span> TiledBackgroundView<span style="color: #002200;">!</span><br>&nbsp;<br><span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #11740a; font-style: italic;">// In TiledBackgroundView.swift</span><br><span style="color: #a61390;">import</span> UIKit<br>&nbsp;<br><span style="color: #a61390;">class</span> TiledBackgroundView<span style="color: #002200;">:</span> <span style="color: #400080;">UIView</span> <span style="color: #002200;">&#123;</span><br>&nbsp;<br>  <span style="color: #a61390;">let</span> sideLength <span style="color: #002200;">=</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span><span style="color: #2400d9;">50.0</span><span style="color: #002200;">&#41;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 2</span><br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">class</span> <span style="color: #a61390;">func</span> layerClass<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; AnyClass <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">return</span> CATiledLayer.<span style="color: #a61390;">self</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 3</span><br>  required <span style="color: #a61390;">init</span><span style="color: #002200;">&#40;</span>coder aDecoder<span style="color: #002200;">:</span> <span style="color: #400080;">NSCoder</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">super</span>.<span style="color: #a61390;">init</span><span style="color: #002200;">&#40;</span>coder<span style="color: #002200;">:</span> aDecoder<span style="color: #002200;">&#41;</span><br>    srand48<span style="color: #002200;">&#40;</span><span style="color: #a61390;">Int</span><span style="color: #002200;">&#40;</span><span style="color: #400080;">NSDate</span><span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.timeIntervalSince1970<span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">let</span> layer <span style="color: #002200;">=</span> <span style="color: #a61390;">self</span>.layer <span style="color: #a61390;">as</span> CATiledLayer<br>    <span style="color: #a61390;">let</span> scale <span style="color: #002200;">=</span> UIScreen.mainScreen<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.scale<br>    layer.contentsScale <span style="color: #002200;">=</span> scale<br>    layer.tileSize <span style="color: #002200;">=</span> <span style="color: #400080;">CGSize</span><span style="color: #002200;">&#40;</span>width<span style="color: #002200;">:</span> sideLength <span style="color: #002200;"><em></em></span> scale, height<span style="color: #002200;">:</span> sideLength <span style="color: #002200;"></span> scale<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 4</span><br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> drawRect<span style="color: #002200;">&#40;</span>rect<span style="color: #002200;">:</span> <span style="color: #400080;">CGRect</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">let</span> context <span style="color: #002200;">=</span> <span style="color: #400080;">UIGraphicsGetCurrentContext</span><span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">var</span> red <span style="color: #002200;">=</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>drand48<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">var</span> green <span style="color: #002200;">=</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>drand48<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">var</span> blue <span style="color: #002200;">=</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>drand48<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    CGContextSetRGBFillColor<span style="color: #002200;">&#40;</span>context, red, green, blue, <span style="color: #2400d9;">1.0</span><span style="color: #002200;">&#41;</span><br>    CGContextFillRect<span style="color: #002200;">&#40;</span>context, rect<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>Here&#8217;s what&#8217;s happening in the above code:</p><br><ol><br><li><code>tiledBackgroundView</code> is positioned at (150, 150) with width and height of 300. </li><br><li><code>layerClass()</code> is overridden so the layer for this view is created as an instance of CATiledLayer. </li><br><li>Seeds the <code>rand48()</code> function that will be used to generate random colors in <code>drawRect()</code>. Then scales the contents of the layer (cast as a CATiledLayer) to match the screen&#8217;s scale and its tile size set. </li><br><li>Overrides <code>drawRect()</code> to fill the view with tiled layers with random colors.</li><br></ol><br><p>Ultimately, the above code draws a 6&#215;6 grid of randomly colored square tiles, like this:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer-250x250.png" alt="CATiledLayer" width="250" height="250" class="aligncenter size-thumbnail wp-image-91465" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer-250x250.png 250w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer-320x320.png 320w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer-32x32.png 32w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer-64x64.png 64w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer-96x96.png 96w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer-128x128.png 128w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer.png 451w" sizes="(max-width: 250px) 100vw, 250px"></p><br><p>Layer Player expands upon this usage by also drawing a path on top of the tiled layer background:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer_5.5.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer_5.5-180x320.png" alt="CATiledLayer_5.5" width="180" height="320" class="aligncenter size-medium wp-image-91469 bordered" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer_5.5-180x320.png 180w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer_5.5-281x500.png 281w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayer_5.5.png 1242w" sizes="(max-width: 180px) 100vw, 180px"></a></p><br><p>The star in the above screenshot becomes blurry as you zoom in on the view:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomedBlurry-250x250.png" alt="CATiledLayerZoomedBlurry" width="250" height="250" class="aligncenter size-thumbnail wp-image-91473" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomedBlurry-250x250.png 250w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomedBlurry-320x320.png 320w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomedBlurry-32x32.png 32w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomedBlurry-64x64.png 64w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomedBlurry-96x96.png 96w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomedBlurry-128x128.png 128w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomedBlurry.png 374w" sizes="(max-width: 250px) 100vw, 250px"></p><br><p>This blurriness is the result of levels of detail maintained by the layer. CATiledLayer has two properties, <code>levelsOfDetail</code> and <code>levelsOfDetailBias</code>. </p><br><p><code>levelsOfDetail</code>, as its name aptly applies, is the number of levels of detail maintained by the layer. It defaults to 1, and each incremental level caches at half the resolution of the previous level. The maximum <code>levelsOfDetail</code> value for a layer is that which its bottom-most level of detail has at least a single pixel. </p><br><p><code>levelsOfDetailBias</code>, on the other hand, is the number of <i>magnified</i> levels of detail cached by this layer. It defaults to 0, meaning no additional magnified levels will be cached, and each incremental level will be cached at double the preceding level&#8217;s resolution. </p><br><p>For example, increasing the <code>levelsOfDetailBias</code> to 5 for the blurry tiled layer above would result in caching levels magnified at 2x, 4x, 8x, 16x and 32x, and the zoomed in layer would look like this:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomed-250x250.png" alt="CATiledLayerZoomed" width="250" height="250" class="aligncenter size-thumbnail wp-image-91475" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomed-250x250.png 250w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomed-320x320.png 320w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomed-32x32.png 32w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomed-64x64.png 64w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomed-96x96.png 96w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomed-128x128.png 128w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/CATiledLayerZoomed.png 374w" sizes="(max-width: 250px) 100vw, 250px"></p><br><p>Pretty cool, eh? But wait, there&#8217;s more! </p><br><p>CATiledLayer slices and dices and&#8230;sorry, had a flashback to the <a href="https://www.youtube.com/watch?v=abLB7aTmnE4" title="Original Ginsu infomercial" target="_blank" rel="external">Ginsu knife infomercial</a> for a second there. :] </p><br><p>But seriously, CATiledLayer has another, dare I say <i>more</i> useful purpose than a Ginsu knife: asynchronously drawing tiles of a very large image, for example, within a scroll view. </p><br><p>You have to provide the tiles and logic to tell the tiled layer which tiles to grab as the user scrolls around, but the performance gain here is remarkable. </p><br><p>Layer Player includes a UIImage extension in a file named <a href="https://github.com/scotteg/LayerPlayer/blob/master/LayerPlayer/UIImage%2BTileCutter.swift" title="UIImage+TileCutter.swift" target="_blank">UIImage+TileCutter.swift</a>. Fellow tutorial team member <a href="http://www.raywenderlich.com/u/nicklockwood" title="Nick Lockwood" target="_blank" rel="external">Nick Lockwood</a> adapted this code for his Terminal app, which he provided in his excellent book, <i>iOS Core Animation: Advanced Techniques</i>. </p><br><p>Its job is to slice and dice the source image into square tiles of the specified size, named according to the column and row location of each tile; for example, windingRoad_6_2.png for the tile at column 7, row 3 (zero-indexed):</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/windingRoad.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/windingRoad-480x300.png" alt="windingRoad" width="480" height="300" class="aligncenter size-medium wp-image-91653" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/windingRoad-480x300.png 480w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/windingRoad-700x437.png 700w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/windingRoad.png 1200w" sizes="(max-width: 480px) 100vw, 480px"></a></p><br><p>With those tiles in place, a custom UIView subclass can be created to draw those tile layers:</p><br><br><div class="wp_codebox"><table><tr id="p9048812"><td class="code" id="p90488code12"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">import</span> UIKit<br>&nbsp;<br><span style="color: #a61390;">class</span> TilingViewForImage<span style="color: #002200;">:</span> <span style="color: #400080;">UIView</span> <span style="color: #002200;">&#123;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 1</span><br>  <span style="color: #a61390;">let</span> sideLength <span style="color: #002200;">=</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span><span style="color: #2400d9;">640.0</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">let</span> fileName <span style="color: #002200;">=</span> <span style="color: #bf1d1a;">&quot;windingRoad&quot;</span><br>  <span style="color: #a61390;">let</span> cachesPath <span style="color: #002200;">=</span> NSSearchPathForDirectoriesInDomains<span style="color: #002200;">&#40;</span>.CachesDirectory, .UserDomainMask, <span style="color: #a61390;">true</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#91;</span><span style="color: #2400d9;">0</span><span style="color: #002200;">&#93;</span> <span style="color: #a61390;">as</span> <span style="color: #a61390;">String</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 2</span><br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">class</span> <span style="color: #a61390;">func</span> layerClass<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; AnyClass <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">return</span> CATiledLayer.<span style="color: #a61390;">self</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 3</span><br>  required <span style="color: #a61390;">init</span><span style="color: #002200;">&#40;</span>coder aDecoder<span style="color: #002200;">:</span> <span style="color: #400080;">NSCoder</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">super</span>.<span style="color: #a61390;">init</span><span style="color: #002200;">&#40;</span>coder<span style="color: #002200;">:</span> aDecoder<span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">let</span> layer <span style="color: #002200;">=</span> <span style="color: #a61390;">self</span>.layer <span style="color: #a61390;">as</span> CATiledLayer<br>    layer.tileSize <span style="color: #002200;">=</span> <span style="color: #400080;">CGSize</span><span style="color: #002200;">&#40;</span>width<span style="color: #002200;">:</span> sideLength, height<span style="color: #002200;">:</span> sideLength<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 4</span><br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> drawRect<span style="color: #002200;">&#40;</span>rect<span style="color: #002200;">:</span> <span style="color: #400080;">CGRect</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">let</span> firstColumn <span style="color: #002200;">=</span> <span style="color: #a61390;">Int</span><span style="color: #002200;">&#40;</span>CGRectGetMinX<span style="color: #002200;">&#40;</span>rect<span style="color: #002200;">&#41;</span> <span style="color: #002200;">/</span> sideLength<span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">let</span> lastColumn <span style="color: #002200;">=</span> <span style="color: #a61390;">Int</span><span style="color: #002200;">&#40;</span>CGRectGetMaxX<span style="color: #002200;">&#40;</span>rect<span style="color: #002200;">&#41;</span> <span style="color: #002200;">/</span> sideLength<span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">let</span> firstRow <span style="color: #002200;">=</span> <span style="color: #a61390;">Int</span><span style="color: #002200;">&#40;</span>CGRectGetMinY<span style="color: #002200;">&#40;</span>rect<span style="color: #002200;">&#41;</span> <span style="color: #002200;">/</span> sideLength<span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">let</span> lastRow <span style="color: #002200;">=</span> <span style="color: #a61390;">Int</span><span style="color: #002200;">&#40;</span>CGRectGetMaxY<span style="color: #002200;">&#40;</span>rect<span style="color: #002200;">&#41;</span> <span style="color: #002200;">/</span> sideLength<span style="color: #002200;">&#41;</span><br>&nbsp;<br>    <span style="color: #a61390;">for</span> row <span style="color: #a61390;">in</span> firstRow…lastRow <span style="color: #002200;">&#123;</span><br>      <span style="color: #a61390;">for</span> column <span style="color: #a61390;">in</span> firstColumn…lastColumn <span style="color: #002200;">&#123;</span><br>        <span style="color: #a61390;">if</span> <span style="color: #a61390;">let</span> tile <span style="color: #002200;">=</span> imageForTileAtColumn<span style="color: #002200;">&#40;</span>column, row<span style="color: #002200;">:</span> row<span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>          <span style="color: #a61390;">let</span> x <span style="color: #002200;">=</span> sideLength <span style="color: #002200;"><em></em></span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>column<span style="color: #002200;">&#41;</span><br>          <span style="color: #a61390;">let</span> y <span style="color: #002200;">=</span> sideLength <span style="color: #002200;"></span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>row<span style="color: #002200;">&#41;</span><br>          <span style="color: #a61390;">let</span> point <span style="color: #002200;">=</span> <span style="color: #400080;">CGPoint</span><span style="color: #002200;">&#40;</span>x<span style="color: #002200;">:</span> x, y<span style="color: #002200;">:</span> y<span style="color: #002200;">&#41;</span><br>          <span style="color: #a61390;">let</span> size <span style="color: #002200;">=</span> <span style="color: #400080;">CGSize</span><span style="color: #002200;">&#40;</span>width<span style="color: #002200;">:</span> sideLength, height<span style="color: #002200;">:</span> sideLength<span style="color: #002200;">&#41;</span><br>          <span style="color: #a61390;">var</span> tileRect <span style="color: #002200;">=</span> <span style="color: #400080;">CGRect</span><span style="color: #002200;">&#40;</span>origin<span style="color: #002200;">:</span> point, size<span style="color: #002200;">:</span> size<span style="color: #002200;">&#41;</span><br>          tileRect <span style="color: #002200;">=</span> CGRectIntersection<span style="color: #002200;">&#40;</span>bounds, tileRect<span style="color: #002200;">&#41;</span><br>          tile.drawInRect<span style="color: #002200;">&#40;</span>tileRect<span style="color: #002200;">&#41;</span><br>        <span style="color: #002200;">&#125;</span><br>      <span style="color: #002200;">&#125;</span><br>    <span style="color: #002200;">&#125;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #a61390;">func</span> imageForTileAtColumn<span style="color: #002200;">&#40;</span>column<span style="color: #002200;">:</span> <span style="color: #a61390;">Int</span>, row<span style="color: #002200;">:</span> <span style="color: #a61390;">Int</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; <span style="color: #400080;">UIImage</span>? <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">let</span> filePath <span style="color: #002200;">=</span> <span style="color: #bf1d1a;">&quot;<span style="color: #2400d9;">(</span>cachesPath)/<span style="color: #2400d9;">(</span>fileName)<em><span style="color: #2400d9;">(</span>column)</em><span style="color: #2400d9;">(</span>row)&quot;</span><br>    <span style="color: #a61390;">return</span> <span style="color: #400080;">UIImage</span><span style="color: #002200;">&#40;</span>contentsOfFile<span style="color: #002200;">:</span> filePath<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>The above code:</p><br><ol><br><li>Creates properties for length of the tile side, base image filename, and the path to the caches directory where the TileCutter extension saves tiles. </li><br><li>Overrides <code>layerClass()</code> to return CATiledLayer. </li><br><li>Implements <code>init(_:)</code>, in the view&#8217;s layer, casts it as a tiled layer and sets its tile size. Note that it is not necessary to match <code>contentsScale</code> to the screen scale, because you&#8217;re working with the backing layer of the view directly vs. creating a new layer and adding it as a sublayer. </li><br><li>Overrides <code>drawRect()</code> to draw each tile according to its column and row position.</li><br></ol><br><p>Then a view of that subclass type, sized to the original image&#8217;s dimensions can be added to a scroll view:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/XcodeTilingViewForImageStoryboard.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/XcodeTilingViewForImageStoryboard-480x286.png" alt="XcodeTilingViewForImageStoryboard" width="480" height="286" class="aligncenter size-medium wp-image-91656" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/XcodeTilingViewForImageStoryboard-480x286.png 480w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/XcodeTilingViewForImageStoryboard-700x417.png 700w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/XcodeTilingViewForImageStoryboard.png 1235w" sizes="(max-width: 480px) 100vw, 480px"></a></p><br><p>And voilà, you have buttery smooth scrolling of a large image (5120 x 3200 in this case), thanks to CATiledLayer:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATiledImageLayer.gif" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATiledImageLayer.gif" alt="CATiledImageLayer" width="332" height="500" class="aligncenter size-full wp-image-91663"></a></p><br><p>As you can see in the above animation, though, there is noticeable blockiness when fast-scrolling as individual tiles are drawn. Minimize this behavior by using smaller tiles (the tiles used in the above example were cut to 640 x 640) and by creating a custom CATiledLayer subclass and overriding <code>fadeDuration()</code> to return 0:</p><br><br><div class="wp_codebox"><table><tr id="p9048813"><td class="code" id="p90488code13"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">class</span> TiledLayer<span style="color: #002200;">:</span> CATiledLayer <span style="color: #002200;">&#123;</span><br>&nbsp;<br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">class</span> <span style="color: #a61390;">func</span> fadeDuration<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; CFTimeInterval <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">return</span> <span style="color: #2400d9;">0.0</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><h2>示例8: CAShapeLayer</h2><br><p>CAShapeLayer makes use of scalable vector paths to draw, and it&#8217;s much faster than using images. Another part of the win here is that you&#8217;ll no longer need to provide images at regular, @2x and @3x sizes. w00t!</p><br><p>Additionally, you have a variety of properties at your disposal to customize line thickness, color, dashing, how lines join other lines, if the line intersects itself to form a closed area, and if that area should be filled and with what color. Here&#8217;s an example:</p><br><br><div class="wp_codebox"><table><tr id="p9048814"><td class="code" id="p90488code14"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">import</span> UIKit<br>&nbsp;<br><span style="color: #a61390;">class</span> ViewController<span style="color: #002200;">:</span> <span style="color: #400080;">UIViewController</span> <span style="color: #002200;">&#123;</span><br>&nbsp;<br>  @IBOutlet weak <span style="color: #a61390;">var</span> someView<span style="color: #002200;">:</span> <span style="color: #400080;">UIView</span><span style="color: #002200;">!</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 1</span><br>  <span style="color: #a61390;">let</span> rwColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span><span style="color: #002200;">&#40;</span>red<span style="color: #002200;">:</span> <span style="color: #2400d9;">11</span><span style="color: #002200;">/</span><span style="color: #2400d9;">255.0</span>, green<span style="color: #002200;">:</span> <span style="color: #2400d9;">86</span><span style="color: #002200;">/</span><span style="color: #2400d9;">255.0</span>, blue<span style="color: #002200;">:</span> <span style="color: #2400d9;">14</span><span style="color: #002200;">/</span><span style="color: #2400d9;">255.0</span>, alpha<span style="color: #002200;">:</span> <span style="color: #2400d9;">1.0</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">let</span> rwPath <span style="color: #002200;">=</span> <span style="color: #400080;">UIBezierPath</span><span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">let</span> rwLayer <span style="color: #002200;">=</span> CAShapeLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 2</span><br>  <span style="color: #a61390;">func</span> setUpRWPath<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    rwPath.moveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">0.22</span>, <span style="color: #2400d9;">124.79</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addLineToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">0.22</span>, <span style="color: #2400d9;">249.57</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addLineToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">124.89</span>, <span style="color: #2400d9;">249.57</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addLineToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">249.57</span>, <span style="color: #2400d9;">249.57</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addLineToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">249.57</span>, <span style="color: #2400d9;">143.79</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">249.37</span>, <span style="color: #2400d9;">38.25</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">249.57</span>, <span style="color: #2400d9;">85.64</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">249.47</span>, <span style="color: #2400d9;">38.15</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">206.47</span>, <span style="color: #2400d9;">112.47</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">249.27</span>, <span style="color: #2400d9;">38.35</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">229.94</span>, <span style="color: #2400d9;">71.76</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">163.46</span>, <span style="color: #2400d9;">186.84</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">182.99</span>, <span style="color: #2400d9;">153.19</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">163.61</span>, <span style="color: #2400d9;">186.65</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">146.17</span>, <span style="color: #2400d9;">156.99</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">163.27</span>, <span style="color: #2400d9;">187.03</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">155.48</span>, <span style="color: #2400d9;">173.59</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">128.79</span>, <span style="color: #2400d9;">127.08</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">136.82</span>, <span style="color: #2400d9;">140.43</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">129.03</span>, <span style="color: #2400d9;">126.94</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">109.31</span>, <span style="color: #2400d9;">157.77</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">128.59</span>, <span style="color: #2400d9;">127.18</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">119.83</span>, <span style="color: #2400d9;">141.01</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">89.83</span>, <span style="color: #2400d9;">187.86</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">98.79</span>, <span style="color: #2400d9;">174.52</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">90.02</span>, <span style="color: #2400d9;">188.06</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">56.52</span>, <span style="color: #2400d9;">108.28</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">89.24</span>, <span style="color: #2400d9;">187.23</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">56.56</span>, <span style="color: #2400d9;">109.11</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">64.02</span>, <span style="color: #2400d9;">102.25</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">56.47</span>, <span style="color: #2400d9;">107.75</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">59.24</span>, <span style="color: #2400d9;">105.56</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">101.42</span>, <span style="color: #2400d9;">67.57</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">81.99</span>, <span style="color: #2400d9;">89.78</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">93.92</span>, <span style="color: #2400d9;">78.72</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">108.38</span>, <span style="color: #2400d9;">30.65</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">110.28</span>, <span style="color: #2400d9;">54.47</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">113.01</span>, <span style="color: #2400d9;">39.96</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addCurveToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">10.35</span>, <span style="color: #2400d9;">0.41</span><span style="color: #002200;">&#41;</span>, controlPoint1<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">99.66</span>, <span style="color: #2400d9;">13.17</span><span style="color: #002200;">&#41;</span>, controlPoint2<span style="color: #002200;">:</span> CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">64.11</span>, <span style="color: #2400d9;">2.16</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addLineToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">0.22</span>, <span style="color: #2400d9;">0.07</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.addLineToPoint<span style="color: #002200;">&#40;</span>CGPointMake<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">0.22</span>, <span style="color: #2400d9;">124.79</span><span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    rwPath.closePath<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 3</span><br>  <span style="color: #a61390;">func</span> setUpRWLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    rwLayer.path <span style="color: #002200;">=</span> rwPath.CGPath<br>    rwLayer.fillColor <span style="color: #002200;">=</span> rwColor.<span style="color: #400080;">CGColor</span><br>    rwLayer.fillRule <span style="color: #002200;">=</span> kCAFillRuleNonZero<br>    rwLayer.lineCap <span style="color: #002200;">=</span> kCALineCapButt<br>    rwLayer.lineDashPattern <span style="color: #002200;">=</span> <span style="color: #a61390;">nil</span><br>    rwLayer.lineDashPhase <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.0</span><br>    rwLayer.lineJoin <span style="color: #002200;">=</span> kCALineJoinMiter<br>    rwLayer.lineWidth <span style="color: #002200;">=</span> <span style="color: #2400d9;">1.0</span><br>    rwLayer.miterLimit <span style="color: #002200;">=</span> <span style="color: #2400d9;">10.0</span><br>    rwLayer.strokeColor <span style="color: #002200;">=</span> rwColor.<span style="color: #400080;">CGColor</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">super</span>.viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>&nbsp;<br>    <span style="color: #11740a; font-style: italic;">// 4</span><br>    setUpRWPath<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    setUpRWLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    someView.layer.addSublayer<span style="color: #002200;">&#40;</span>rwLayer<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>Here&#8217;s the lowdown on the above code:</p><br><ol><br><li>Creates color, path, and shape layer objects.</li><br><li>Draws the shape layer&#8217;s path. If writing this sort of boilerplate drawing code is not your cup of tea, check out <a href="http://www.paintcodeapp.com" target="_blank" rel="external">PaintCode</a>; it generates the code for you by letting you draw using intuitive visual controls or import existing vector (SVG) or Photoshop (PSD) files. </li><br><li>Sets up the shape layer. Its path is set to the CGPath of the path drawn in step 2, its fill color to the CGColor of the color created in step 1, and the fill rule is explicitly set to the default value of non-zero.<br><ul><br><li>The only other option is even-odd, and for this shape that has no intersecting paths the fill rule makes little difference. </li><br><li>The non-zero rule counts left-to-right paths as +1 and right-to-left paths as -1; it adds up all values for paths and if the total is greater than 0, it fills the shape(s) formed by the paths. </li><br><li>Essentially, non-zero fills all points inside the shape. </li><br><li>The even-odd rule counts the total number of <i>path crossings</i> that form a shape and if the count is odd, that shape is filled. This is definitely a case when a picture is worth a thousand words. </li><br><p>The number of path crossings in the even-odd diagram that form the pentagon shape is even, so the pentagon is not filled, whereas the number path crossings that form each triangle is odd, so the triangles are filled.<br><br><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAShapeLayerFillRules.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAShapeLayerFillRules-480x256.png" alt="CAShapeLayerFillRules" width="480" height="256" class="aligncenter size-medium wp-image-91890" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CAShapeLayerFillRules-480x256.png 480w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CAShapeLayerFillRules.png 676w" sizes="(max-width: 480px) 100vw, 480px"></a></p></ul></li><br><li>Calls the path drawing and layer set up code, and then it adds the layer to the view hierarchy. </li><br></ol><br><p>This code draws the raywenderlich.com logo:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/RayWenderlichLogo.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/RayWenderlichLogo-250x250.png" alt="RayWenderlichLogo" width="250" height="250" class="aligncenter size-thumbnail wp-image-91840" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/RayWenderlichLogo-250x250.png 250w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/RayWenderlichLogo-320x320.png 320w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/RayWenderlichLogo-32x32.png 32w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/RayWenderlichLogo-64x64.png 64w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/RayWenderlichLogo-96x96.png 96w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/RayWenderlichLogo-128x128.png 128w, https://cdn5.raywenderlich.com/wp-content/uploads/2014/12/RayWenderlichLogo.png 377w" sizes="(max-width: 250px) 100vw, 250px"></a></p><br><p>And in case you&#8217;re curious to know what this drawing looks like in <a href="http://www.paintcodeapp.com" target="_blank" rel="external">PaintCode</a>:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/PaintCodeRayWenderlichLogo.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/PaintCodeRayWenderlichLogo-480x265.png" alt="PaintCodeRayWenderlichLogo" width="480" height="265" class="aligncenter size-medium wp-image-91841" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/PaintCodeRayWenderlichLogo-480x265.png 480w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/PaintCodeRayWenderlichLogo-700x387.png 700w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/PaintCodeRayWenderlichLogo.png 1280w" sizes="(max-width: 480px) 100vw, 480px"></a></p><br><p>Layer Player includes controls to manipulate many of CAShapeLayer&#8217;s properties:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAShapeLayer_5.5.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAShapeLayer_5.5-180x320.png" alt="CAShapeLayer_5.5" width="180" height="320" class="aligncenter size-medium wp-image-91843 bordered" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAShapeLayer_5.5-180x320.png 180w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAShapeLayer_5.5-281x500.png 281w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CAShapeLayer_5.5.png 1242w" sizes="(max-width: 180px) 100vw, 180px"></a></p><br><div class="note"><br><p><em>Note</em>: You may notice that we&#8217;re skipping over the next demo in the Layer Player app. This is because CAEAGLLayer is effectively obsoleted by CAMetalLayer, which debuted with iOS 8 alongside the Metal framework. You can find a great tutorial covering CAMetalLayer <a href="http://www.raywenderlich.com/77488/ios-8-metal-tutorial-swift-getting-started" title="iOS 8 Metal Tutorial with Swift: Getting Started" target="_blank" rel="external">here</a>.</p><br></div><br><h2>示例9: CATransformLayer</h2><br><p>CATransformLayer does not flatten its sublayer hierarchy like other layer classes, so it&#8217;s  handy for drawing 3D structures. It&#8217;s actually a container for its sublayers, and each sublayer can have its own transforms and opacity changes, however, it ignores changes to other rendered layer properties such as border width and color. </p><br><p>You cannot directly hit test a transform layer because it doesn&#8217;t have a 2D coordinate space to map a touch point to, however, it&#8217;s possible to hit test individual sublayers. Here&#8217;s an example:</p><br><br><div class="wp_codebox"><table><tr id="p9048815"><td class="code" id="p90488code15"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">import</span> UIKit<br>&nbsp;<br><span style="color: #a61390;">class</span> ViewController<span style="color: #002200;">:</span> <span style="color: #400080;">UIViewController</span> <span style="color: #002200;">&#123;</span><br>&nbsp;<br>  @IBOutlet weak <span style="color: #a61390;">var</span> someView<span style="color: #002200;">:</span> <span style="color: #400080;">UIView</span><span style="color: #002200;">!</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 1</span><br>  <span style="color: #a61390;">let</span> sideLength <span style="color: #002200;">=</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span><span style="color: #2400d9;">160.0</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">var</span> redColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.redColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">var</span> orangeColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.orangeColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">var</span> yellowColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.yellowColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">var</span> greenColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.greenColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">var</span> blueColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.blueColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">var</span> purpleColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.purpleColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">var</span> transformLayer <span style="color: #002200;">=</span> CATransformLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 2</span><br>  <span style="color: #a61390;">func</span> setUpTransformLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">var</span> layer <span style="color: #002200;">=</span> sideLayerWithColor<span style="color: #002200;">&#40;</span>redColor<span style="color: #002200;">&#41;</span><br>    transformLayer.addSublayer<span style="color: #002200;">&#40;</span>layer<span style="color: #002200;">&#41;</span><br>&nbsp;<br>    layer <span style="color: #002200;">=</span> sideLayerWithColor<span style="color: #002200;">&#40;</span>orangeColor<span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">var</span> transform <span style="color: #002200;">=</span> CATransform3DMakeTranslation<span style="color: #002200;">&#40;</span>sideLength <span style="color: #002200;">/</span> <span style="color: #2400d9;">2.0</span>, <span style="color: #2400d9;">0.0</span>, sideLength <span style="color: #002200;">/</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">2.0</span><span style="color: #002200;">&#41;</span><br>    transform <span style="color: #002200;">=</span> CATransform3DRotate<span style="color: #002200;">&#40;</span>transform, degreesToRadians<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">90.0</span><span style="color: #002200;">&#41;</span>, <span style="color: #2400d9;">0.0</span>, <span style="color: #2400d9;">1.0</span>, <span style="color: #2400d9;">0.0</span><span style="color: #002200;">&#41;</span><br>    layer.transform <span style="color: #002200;">=</span> transform<br>    transformLayer.addSublayer<span style="color: #002200;">&#40;</span>layer<span style="color: #002200;">&#41;</span><br>&nbsp;<br>    layer <span style="color: #002200;">=</span> sideLayerWithColor<span style="color: #002200;">&#40;</span>yellowColor<span style="color: #002200;">&#41;</span><br>    layer.transform <span style="color: #002200;">=</span> CATransform3DMakeTranslation<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">0.0</span>, <span style="color: #2400d9;">0.0</span>, <span style="color: #002200;">-</span>sideLength<span style="color: #002200;">&#41;</span><br>    transformLayer.addSublayer<span style="color: #002200;">&#40;</span>layer<span style="color: #002200;">&#41;</span><br>&nbsp;<br>    layer <span style="color: #002200;">=</span> sideLayerWithColor<span style="color: #002200;">&#40;</span>greenColor<span style="color: #002200;">&#41;</span><br>    transform <span style="color: #002200;">=</span> CATransform3DMakeTranslation<span style="color: #002200;">&#40;</span>sideLength <span style="color: #002200;">/</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">2.0</span>, <span style="color: #2400d9;">0.0</span>, sideLength <span style="color: #002200;">/</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">2.0</span><span style="color: #002200;">&#41;</span><br>    transform <span style="color: #002200;">=</span> CATransform3DRotate<span style="color: #002200;">&#40;</span>transform, degreesToRadians<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">90.0</span><span style="color: #002200;">&#41;</span>, <span style="color: #2400d9;">0.0</span>, <span style="color: #2400d9;">1.0</span>, <span style="color: #2400d9;">0.0</span><span style="color: #002200;">&#41;</span><br>    layer.transform <span style="color: #002200;">=</span> transform<br>    transformLayer.addSublayer<span style="color: #002200;">&#40;</span>layer<span style="color: #002200;">&#41;</span><br>&nbsp;<br>    layer <span style="color: #002200;">=</span> sideLayerWithColor<span style="color: #002200;">&#40;</span>blueColor<span style="color: #002200;">&#41;</span><br>    transform <span style="color: #002200;">=</span> CATransform3DMakeTranslation<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">0.0</span>, sideLength <span style="color: #002200;">/</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">2.0</span>, sideLength <span style="color: #002200;">/</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">2.0</span><span style="color: #002200;">&#41;</span><br>    transform <span style="color: #002200;">=</span> CATransform3DRotate<span style="color: #002200;">&#40;</span>transform, degreesToRadians<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">90.0</span><span style="color: #002200;">&#41;</span>, <span style="color: #2400d9;">1.0</span>, <span style="color: #2400d9;">0.0</span>, <span style="color: #2400d9;">0.0</span><span style="color: #002200;">&#41;</span><br>    layer.transform <span style="color: #002200;">=</span> transform<br>    transformLayer.addSublayer<span style="color: #002200;">&#40;</span>layer<span style="color: #002200;">&#41;</span><br>&nbsp;<br>    layer <span style="color: #002200;">=</span> sideLayerWithColor<span style="color: #002200;">&#40;</span>purpleColor<span style="color: #002200;">&#41;</span><br>    transform <span style="color: #002200;">=</span> CATransform3DMakeTranslation<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">0.0</span>, sideLength <span style="color: #002200;">/</span> <span style="color: #2400d9;">2.0</span>, sideLength <span style="color: #002200;">/</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">2.0</span><span style="color: #002200;">&#41;</span><br>    transform <span style="color: #002200;">=</span> CATransform3DRotate<span style="color: #002200;">&#40;</span>transform, degreesToRadians<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">90.0</span><span style="color: #002200;">&#41;</span>, <span style="color: #2400d9;">1.0</span>, <span style="color: #2400d9;">0.0</span>, <span style="color: #2400d9;">0.0</span><span style="color: #002200;">&#41;</span><br>    layer.transform <span style="color: #002200;">=</span> transform<br>    transformLayer.addSublayer<span style="color: #002200;">&#40;</span>layer<span style="color: #002200;">&#41;</span><br>&nbsp;<br>    transformLayer.anchorPointZ <span style="color: #002200;">=</span> sideLength <span style="color: #002200;">/</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">2.0</span><br>    applyRotationForXOffset<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">16.0</span>, yOffset<span style="color: #002200;">:</span> <span style="color: #2400d9;">16.0</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 3</span><br>  <span style="color: #a61390;">func</span> sideLayerWithColor<span style="color: #002200;">&#40;</span>color<span style="color: #002200;">:</span> <span style="color: #400080;">UIColor</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; <span style="color: #400080;">CALayer</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">let</span> layer <span style="color: #002200;">=</span> <span style="color: #400080;">CALayer</span><span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    layer.frame <span style="color: #002200;">=</span> <span style="color: #400080;">CGRect</span><span style="color: #002200;">&#40;</span>origin<span style="color: #002200;">:</span> CGPointZero, size<span style="color: #002200;">:</span> <span style="color: #400080;">CGSize</span><span style="color: #002200;">&#40;</span>width<span style="color: #002200;">:</span> sideLength, height<span style="color: #002200;">:</span> sideLength<span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    layer.position <span style="color: #002200;">=</span> <span style="color: #400080;">CGPoint</span><span style="color: #002200;">&#40;</span>x<span style="color: #002200;">:</span> CGRectGetMidX<span style="color: #002200;">&#40;</span>someView.bounds<span style="color: #002200;">&#41;</span>, y<span style="color: #002200;">:</span> CGRectGetMidY<span style="color: #002200;">&#40;</span>someView.bounds<span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>    layer.backgroundColor <span style="color: #002200;">=</span> color.<span style="color: #400080;">CGColor</span><br>    <span style="color: #a61390;">return</span> layer<br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #a61390;">func</span> degreesToRadians<span style="color: #002200;">&#40;</span>degrees<span style="color: #002200;">:</span> <span style="color: #a61390;">Double</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; <span style="color: #400080;">CGFloat</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">return</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>degrees <span style="color: #002200;"><em></em></span> M_PI <span style="color: #002200;">/</span> <span style="color: #2400d9;">180.0</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 4</span><br>  <span style="color: #a61390;">func</span> applyRotationForXOffset<span style="color: #002200;">&#40;</span>xOffset<span style="color: #002200;">:</span> <span style="color: #a61390;">Double</span>, yOffset<span style="color: #002200;">:</span> <span style="color: #a61390;">Double</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">let</span> totalOffset <span style="color: #002200;">=</span> sqrt<span style="color: #002200;">&#40;</span>xOffset <span style="color: #002200;"></span> xOffset <span style="color: #002200;">+</span> yOffset <span style="color: #002200;"><em></em></span> yOffset<span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">let</span> totalRotation <span style="color: #002200;">=</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>totalOffset <span style="color: #002200;"></span> M_PI <span style="color: #002200;">/</span> <span style="color: #2400d9;">180.0</span><span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">let</span> xRotationalFactor <span style="color: #002200;">=</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>totalOffset<span style="color: #002200;">&#41;</span> <span style="color: #002200;">/</span> totalRotation<br>    <span style="color: #a61390;">let</span> yRotationalFactor <span style="color: #002200;">=</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>totalOffset<span style="color: #002200;">&#41;</span> <span style="color: #002200;">/</span> totalRotation<br>    <span style="color: #a61390;">let</span> currentTransform <span style="color: #002200;">=</span> CATransform3DTranslate<span style="color: #002200;">&#40;</span>transformLayer.sublayerTransform, <span style="color: #2400d9;">0.0</span>, <span style="color: #2400d9;">0.0</span>, <span style="color: #2400d9;">0.0</span><span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">let</span> rotationTransform <span style="color: #002200;">=</span> CATransform3DRotate<span style="color: #002200;">&#40;</span>transformLayer.sublayerTransform, totalRotation,<br>      xRotationalFactor <span style="color: #002200;"><em></em></span> currentTransform.m12 <span style="color: #002200;">-</span> yRotationalFactor <span style="color: #002200;"></span> currentTransform.m11,<br>      xRotationalFactor <span style="color: #002200;"><em></em></span> currentTransform.m22 <span style="color: #002200;">-</span> yRotationalFactor <span style="color: #002200;"></span> currentTransform.m21,<br>      xRotationalFactor <span style="color: #002200;"><em></em></span> currentTransform.m32 <span style="color: #002200;">-</span> yRotationalFactor <span style="color: #002200;"></span> currentTransform.m31<span style="color: #002200;">&#41;</span><br>    transformLayer.sublayerTransform <span style="color: #002200;">=</span> rotationTransform<br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 5</span><br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> touchesBegan<span style="color: #002200;">&#40;</span>touches<span style="color: #002200;">:</span> <span style="color: #400080;">NSSet</span>, withEvent event<span style="color: #002200;">:</span> <span style="color: #400080;">UIEvent</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">if</span> <span style="color: #a61390;">let</span> location <span style="color: #002200;">=</span> touches.anyObject<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>?.locationInView<span style="color: #002200;">&#40;</span>someView<span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>      <span style="color: #a61390;">for</span> layer <span style="color: #a61390;">in</span> transformLayer.sublayers <span style="color: #002200;">&#123;</span><br>        <span style="color: #a61390;">if</span> <span style="color: #a61390;">let</span> hitLayer <span style="color: #002200;">=</span> layer.hitTest<span style="color: #002200;">&#40;</span>location<span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>          <span style="color: #a61390;">println</span><span style="color: #002200;">&#40;</span><span style="color: #bf1d1a;">&quot;Transform layer tapped!&quot;</span><span style="color: #002200;">&#41;</span><br>          break<br>        <span style="color: #002200;">&#125;</span><br>      <span style="color: #002200;">&#125;</span><br>    <span style="color: #002200;">&#125;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">super</span>.viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>&nbsp;<br>    <span style="color: #11740a; font-style: italic;">// 6</span><br>    setUpTransformLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    someView.layer.addSublayer<span style="color: #002200;">&#40;</span>transformLayer<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>The above code does all of this:</p><br><ol><br><li>Creates properties for side length, colors for each side of the cube, and a transform layer. </li><br><li>Builds the cube by creating, rotating and then adding each side to the transform layer. Then it sets the transform layer&#8217;s z axis anchor point, rotates the cube and adds the cube to the view hierarchy. </li><br><li>Creates helper code to create each cube side layer with the specified color and to convert degrees to radians. Why radians? Simply because I find it more intuitive to work with degrees than radians. :]</li><br><li>Applies a rotation based on specified x and y offsets. Notice that the code sets the transform to <code>sublayerTransform</code>, and that applies to the sublayers of the transform layer. </li><br><li>Observes touches and cycles through the sublayers of the transform layer. This section hit tests each one and breaks out as soon as a hit is detected, since there are no benefits to hit testing remaining layers. </li><br><li>Sets up the transform layer and adds it to the view hierarchy.</li><br></ol><br><div class="note"><br><p><em>Note</em>: So what&#8217;s with all those <code>currentTransform.m##</code>s? I&#8217;m glad you asked, sort of :]. These are CATransform3D properties that represent elements of a matrix that comprises a rectangular array of rows and columns.<br></p><br><p><br> To learn more about matrix transformations like those used in this example, check out <a href="https://github.com/jrturton/3DTransformFun" title="3DTransform Fun" target="_blank">3DTransformFun project</a> by fellow tutorial team member <a href="http://www.raywenderlich.com/u/jrturton" title="Rich Turton" target="_blank" rel="external">Rich Turton</a>  and <a href="https://github.com/mpospese/EnterTheMatrix" title="Enter The Matrix" target="_blank">Enter The Matrix project</a> by Mark Pospesel.<br></p><br></div><br><p>Running the above code with <code>someView</code> being a 250 x 250 view results in this:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer-250x250.png" alt="CATransformLayer" width="250" height="250" class="aligncenter size-thumbnail wp-image-91859" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer-250x250.png 250w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer-32x32.png 32w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer-64x64.png 64w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer-96x96.png 96w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer-128x128.png 128w, https://cdn4.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer.png 306w" sizes="(max-width: 250px) 100vw, 250px"></p><br><p>Now, try something: tap anywhere on the cube and &#8220;Transform layer tapped!&#8221; will print to the console. </p><br><p>Layer Player includes switches to toggle the opacity of each sublayer, and the <a href="http://bill.dudney.net/roller/objc/entry/trackball_3d_transforms_made_easy" title="TrackBall - 3D transforms made easy" target="_blank">TrackBall utility from Bill Dudney</a>, <a href="https://github.com/scotteg/TrackBall" title="Swift port of Bill Dudney's original TrackBall Objective-C source code" target="_blank">ported to Swift</a>, which makes it easy to apply 3D transforms based on user gestures:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer_5.5.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer_5.5-180x320.png" alt="CATransformLayer_5.5" width="180" height="320" class="aligncenter size-medium wp-image-91862 bordered" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer_5.5-180x320.png 180w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer_5.5-281x500.png 281w, https://cdn2.raywenderlich.com/wp-content/uploads/2014/12/CATransformLayer_5.5.png 1242w" sizes="(max-width: 180px) 100vw, 180px"></a></p><br><h2>示例10: CAEmitterLayer</h2><br><p>CAEmitterLayer renders animated particles that are instances of CAEmitterCell. Both CAEmitterLayer and CAEmitterCell have properties to change rendering rate, size, shape, color, velocity, lifetime and more. Here&#8217;s an example:</p><br><br><div class="wp_codebox"><table><tr id="p9048816"><td class="code" id="p90488code16"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">import</span> UIKit<br>&nbsp;<br><span style="color: #a61390;">class</span> ViewController<span style="color: #002200;">:</span> <span style="color: #400080;">UIViewController</span> <span style="color: #002200;">&#123;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 1</span><br>  <span style="color: #a61390;">let</span> emitterLayer <span style="color: #002200;">=</span> CAEmitterLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">let</span> emitterCell <span style="color: #002200;">=</span> CAEmitterCell<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 2</span><br>  <span style="color: #a61390;">func</span> setUpEmitterLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    emitterLayer.frame <span style="color: #002200;">=</span> view.bounds<br>    emitterLayer.seed <span style="color: #002200;">=</span> UInt32<span style="color: #002200;">&#40;</span><span style="color: #400080;">NSDate</span><span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.timeIntervalSince1970<span style="color: #002200;">&#41;</span><br>    emitterLayer.renderMode <span style="color: #002200;">=</span> kCAEmitterLayerAdditive<br>    emitterLayer.drawsAsynchronously <span style="color: #002200;">=</span> <span style="color: #a61390;">true</span><br>    setEmitterPosition<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 3</span><br>  <span style="color: #a61390;">func</span> setUpEmitterCell<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    emitterCell.contents <span style="color: #002200;">=</span> <span style="color: #400080;">UIImage</span><span style="color: #002200;">&#40;</span>named<span style="color: #002200;">:</span> <span style="color: #bf1d1a;">&quot;smallStar&quot;</span><span style="color: #002200;">&#41;</span>?.CGImage<br>&nbsp;<br>    emitterCell.velocity <span style="color: #002200;">=</span> <span style="color: #2400d9;">50.0</span><br>    emitterCell.velocityRange <span style="color: #002200;">=</span> <span style="color: #2400d9;">500.0</span><br>&nbsp;<br>    emitterCell.color <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.blackColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span>.<span style="color: #400080;">CGColor</span><br>    emitterCell.redRange <span style="color: #002200;">=</span> <span style="color: #2400d9;">1.0</span><br>    emitterCell.greenRange <span style="color: #002200;">=</span> <span style="color: #2400d9;">1.0</span><br>    emitterCell.blueRange <span style="color: #002200;">=</span> <span style="color: #2400d9;">1.0</span><br>    emitterCell.alphaRange <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.0</span><br>    emitterCell.redSpeed <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.0</span><br>    emitterCell.greenSpeed <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.0</span><br>    emitterCell.blueSpeed <span style="color: #002200;">=</span> <span style="color: #2400d9;">0.0</span><br>    emitterCell.alphaSpeed <span style="color: #002200;">=</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">0.5</span><br>&nbsp;<br>    <span style="color: #a61390;">let</span> zeroDegreesInRadians <span style="color: #002200;">=</span> degreesToRadians<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">0.0</span><span style="color: #002200;">&#41;</span><br>    emitterCell.spin <span style="color: #002200;">=</span> degreesToRadians<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">130.0</span><span style="color: #002200;">&#41;</span><br>    emitterCell.spinRange <span style="color: #002200;">=</span> zeroDegreesInRadians<br>    emitterCell.emissionRange <span style="color: #002200;">=</span> degreesToRadians<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">360.0</span><span style="color: #002200;">&#41;</span><br>&nbsp;<br>    emitterCell.lifetime <span style="color: #002200;">=</span> <span style="color: #2400d9;">1.0</span><br>    emitterCell.birthRate <span style="color: #002200;">=</span> <span style="color: #2400d9;">250.0</span><br>    emitterCell.xAcceleration <span style="color: #002200;">=</span> <span style="color: #002200;">-</span><span style="color: #2400d9;">800.0</span><br>    emitterCell.yAcceleration <span style="color: #002200;">=</span> <span style="color: #2400d9;">1000.0</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 4</span><br>  <span style="color: #a61390;">func</span> setEmitterPosition<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    emitterLayer.emitterPosition <span style="color: #002200;">=</span> <span style="color: #400080;">CGPoint</span><span style="color: #002200;">&#40;</span>x<span style="color: #002200;">:</span> CGRectGetMidX<span style="color: #002200;">&#40;</span>view.bounds<span style="color: #002200;">&#41;</span>, y<span style="color: #002200;">:</span> CGRectGetMidY<span style="color: #002200;">&#40;</span>view.bounds<span style="color: #002200;">&#41;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #a61390;">func</span> degreesToRadians<span style="color: #002200;">&#40;</span>degrees<span style="color: #002200;">:</span> <span style="color: #a61390;">Double</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; <span style="color: #400080;">CGFloat</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">return</span> <span style="color: #400080;">CGFloat</span><span style="color: #002200;">&#40;</span>degrees <span style="color: #002200;">*</span> M_PI <span style="color: #002200;">/</span> <span style="color: #2400d9;">180.0</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">super</span>.viewDidLoad<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>&nbsp;<br>    <span style="color: #11740a; font-style: italic;">// 5</span><br>    setUpEmitterLayer<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    setUpEmitterCell<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>    emitterLayer.emitterCells <span style="color: #002200;">=</span> <span style="color: #002200;">&#91;</span>emitterCell<span style="color: #002200;">&#93;</span><br>    view.layer.addSublayer<span style="color: #002200;">&#40;</span>emitterLayer<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  <span style="color: #11740a; font-style: italic;">// 6</span><br>  <span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> traitCollectionDidChange<span style="color: #002200;">&#40;</span>previousTraitCollection<span style="color: #002200;">:</span> UITraitCollection?<span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    setEmitterPosition<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div><br><br><p>The above code:</p><br><ol><br><li>Creates an emitter layer and cell.<br></li><li>Sets up the emitter layer by doing the following:<br><ul><br><li>Provides a seed for the layer&#8217;s random number generator that in turn randomizes certain properties of the layer&#8217;s emitter cells, such as velocity. This is further explained in the next comment. </li><br><li>Renders emitter cells above the layer&#8217;s background color and border in an order specified by <code>renderMode</code>.<br><div class="note"><br><p><em>Note</em>:  Apple&#8217;s documentation currently incorrectly states that values for this property are defined under Emitter Modes. In fact, renderMode&#8217;s values are defined under Emitter Render Order. The default value is unordered, and additional options include oldest first, oldest last, back to front and additive. </p><br></div><br></li><br><li>Sets <code>drawsAsynchronously</code> to <code>true</code>, which may improve performance because the emitter layer must continuously redraw its emitter cells. </li><br><li>Next, the emitter position is set via a helper method &#8212; learn more on comment 4. This is a good case study for how setting <code>drawsAsynchronously</code> to <code>true</code> has a positive effect on performance and smoothness of animation.</li><br></ul><br></li><li>There&#8217;s a lot of action in this block!<br><ul><br><li>It sets up the emitter cell by setting its contents to an image (this image is available in the Layer Player project). </li><br><li>Then it specifies an initial velocity and max variance (<code>velocityRange</code>); the emitter layer uses the aforementioned seed to create a random number generator that randomizes values within the range (initial value +/- the range value). This randomization happens for any properties ending in <em>Range</em>.</li><br><li>The color is set to black to allow the variance (discussed below) to vary from the default of white, because white results in overly bright particles. </li><br><li>A series of color ranges are set next, using the same randomization as for <code>velocityRange</code>, this time to specify the range of variance to each color. Speed values dictate how quickly each color can change over the lifetime of the cell. </li><br><li>Next, block three specifies how to distribute the cells around a full circular cone. More detail: It sets the emitter cell&#8217;s spinning velocity and emission range. Furthermore, emission range determines how emitter cells are distributed around a cone that is defined by the <code>emissionRange</code> specified in radians.<br></li><li>Sets the cell&#8217;s lifetime to 1 second. This property&#8217;s default value is 0, so if you don&#8217;t explicitly set this, your cells never appear! Same goes for <code>birthRate</code> (per second); the default is 0, so this must be set to some positive number in order for cells to appear.<br></li><li>Lastly, cell x and y acceleration are set; these values affect the visual angle to which the particles emit.</li><br></ul><br></li><li>Makes helper methods to convert degrees to radians and to set the emitter cell position to the midpoint of the view.<br></li><li>Sets up the emitter layer and cell, and then adds that cell to the layer, and the layer to the view hierarchy.<br></li><li>This method, new in iOS 8, provides a way to handle changes to the current trait collection, such as when the device is rotated. Not familiar with trait collections? Check out Section 1 of <a href="http://www.raywenderlich.com/store/iOS-8-by-tutorials" title="iOS 8 by Tutorials" target="_blank">iOS 8 by Tutorials</a> and you&#8217;ll become a master of them :]</li><br></ol><br><p>Huzzah! I know that&#8217;s a lot of information, but you&#8217;re tough and smart.</p><br><p>The outcome of running the above code reminds me of those <a href="https://www.youtube.com/watch?v=oT0JWGPXnTg" title="Sean Hayes - The More You Know Commercial" target="_blank">The More You Know</a> commercials:</p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAEmitterLayer2.gif" alt="CAEmitterLayer2" width="350" height="242" class="aligncenter size-full wp-image-92125"></p><br><p>Layer Player includes controls to adjust all of the above-mentioned properties, and several more:</p><br><p><a href="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAEmitterLayer_5.5.png" target="_blank" rel="external"><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/CAEmitterLayer_5.5-180x320.png" alt="CAEmitterLayer_5.5" width="180" height="320" class="aligncenter size-medium wp-image-92127 bordered" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CAEmitterLayer_5.5-180x320.png 180w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CAEmitterLayer_5.5-281x500.png 281w, https://cdn1.raywenderlich.com/wp-content/uploads/2014/12/CAEmitterLayer_5.5.png 1242w" sizes="(max-width: 180px) 100vw, 180px"></a></p><br><p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/12/victorious-e1419192669236.png" alt="victorious" width="147" height="300" class="alignright size-full wp-image-92137"></p><br><br><br></html>
]]></content>
    
    <summary type="html">
    
      &lt;html lang=&quot;en-US&quot; class=&quot;no-js windows&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;link rel=&quot;stylesheet&quot; id=&quot;wpsqt-main-css&quot; href=&quot;https://cdn3.raywenderlich.com/wp-content/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>UIStackView 使用指南</title>
    <link href="http://yoursite.com/2016/09/14/UIStackView-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2016/09/14/UIStackView-使用指南/</id>
    <published>2016-09-14T07:14:17.000Z</published>
    <updated>2016-09-19T08:38:23.000Z</updated>
    
    <content type="html"><![CDATA[<p></p>
<p><link rel="stylesheet" id="wpsqt-main-css" href="https://cdn3.raywenderlich.com/wp-content/plugins/wp-survey-and-quiz-tool/css/main.css?ver=4.5.2" type="text/css" media="all"></p>
<p><link rel="stylesheet" id="style-main-css" href="https://cdn4.raywenderlich.com/wp-content/themes/raywenderlich/style.min.css?ver=1471520796" type="text/css" media="all"></p>
<link rel="stylesheet" id="contact-form-7-css" href="https://cdn1.raywenderlich.com/wp-content/plugins/contact-form-7/includes/css/styles.css?ver=4.4.1" type="text/css" media="all">

<div id="attachment_114189" style="width: 260px" class="wp-caption alignright"><img class="wp-image-114189 size-thumbnail" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/iOS9_feast_UIStackView-250x250.jpg" width="250" height="250" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/iOS9_feast_UIStackView-250x250.jpg 250w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/iOS9_feast_UIStackView-320x320.jpg 320w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/iOS9_feast_UIStackView.jpg 500w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/iOS9_feast_UIStackView-32x32.jpg 32w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/iOS9_feast_UIStackView-64x64.jpg 64w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/iOS9_feast_UIStackView-96x96.jpg 96w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/iOS9_feast_UIStackView-128x128.jpg 128w" sizes="(max-width: 250px) 100vw, 250px"><p class="wp-caption-text">你肯定想知道在使用堆栈视图前是怎么挺过来的!</p></div><br><p>我们都遇见过。 有个需要动态增删视图的新需求, 也需要重新定位临近视图。</p><br><p>你用什么方法? 你通过在故事板添加outlets来约束实现激活或者去激活这些视图? 或者用第三方库? 或者根据复杂度你会在代码实现。</p><br><p>现在介绍 <code>UIStackView</code>,  Stack 视图提供了一种方式去水平或者垂直布局一组视图。 通过配置一些简单的属性例如对齐方式,分布方式,间隔, 你可以在可用空间里定义包含的视图该如何调整布局。</p><br><br><h2>开始</h2><br><p>这篇 UIStackView 指导, 你会工作在一个叫<em>Vacation Spots</em>的程序. 这是个简单的程序，向你展示一系列的地方，让你远离当下一切。</p><br><p>现在先别打包行囊, 因为有一些问题你要用堆栈视图来修复, 肯定比你用 Auto Layout简单的多。</p><br><p>先下载 <a href="http://www.raywenderlich.com/wp-content/uploads/2015/09/VacationSpots_Starter.zip" target="_blank" rel="external">开始工程</a> 在 <em>iPhone 6 Simulator</em>上运行。 你会看你一堆你可以去旅行的地方。</p><br><p><img class="aligncenter size-large wp-image-114555 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/01-table-view-is-now-correct_750x1334-281x500.png" width="281" height="500" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/01-table-view-is-now-correct_750x1334-281x500.png 281w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/01-table-view-is-now-correct_750x1334-180x320.png 180w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/01-table-view-is-now-correct_750x1334.png 750w" sizes="(max-width: 281px) 100vw, 281px"></p><br><p>点击 <em>London</em> 单元可以查看伦敦的详情。</p><br><p>扫一眼, 这个界面看起来还okay, 但是有一些问题。</p><br><ol start="1"><br><li>看一下位于界面底部的按钮行。 他们之间现在是固定间距的位置, 所以他们没有适配屏幕的宽度。 为了看到问题, <em>Command-left</em> 旋转屏幕看看。</li><br></ol><br><p><img class="aligncenter size-medium wp-image-114556 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/02-issues-visible-in-landscape-view_1334x750-480x270.png" width="480" height="270" srcset="https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/02-issues-visible-in-landscape-view_1334x750-480x270.png 480w, https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/02-issues-visible-in-landscape-view_1334x750-700x394.png 700w, https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/02-issues-visible-in-landscape-view_1334x750-266x151.png 266w, https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/02-issues-visible-in-landscape-view_1334x750.png 1334w" sizes="(max-width: 480px) 100vw, 480px"></p><br><ol start="2"><br><li>点击靠近 <em>WEATHER</em> 的 <em>Hide</em> 按钮. 它可以隐藏文字, 可是它不能复位位于它下面的区域, 留下了一块空白。</li><br></ol><br><p><img class="aligncenter size-large wp-image-114557 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/03-hide-weather-issue_750x1334-281x500.png" width="281" height="500" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/03-hide-weather-issue_750x1334-281x500.png 281w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/03-hide-weather-issue_750x1334-180x320.png 180w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/03-hide-weather-issue_750x1334.png 750w" sizes="(max-width: 281px) 100vw, 281px"></p><br><ol start="3"><br><li>区域顺序可以调整。 <em>what to see</em> 区域刚好位于 <em>why visit</em> 下方可能更合逻辑, 而是不是有个 <em>weather</em> 在两者中间。</li><br><li>横屏的时候,底面的按钮组太靠近页面边界了。 减少不同区域的间距可能会比较好 – 仅在横屏模式下。</li><br></ol><br><p>既然有了改进的想法, 是时候研究工程了。</p><br><p>打开 <em>Main.storyboard</em> 看一下 <em>Spot Info View Controller</em> scene。 有一些颜色在你的堆栈视图。</p><br><p><img class="aligncenter size-large wp-image-114558 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/04-colorful-scene-in-storyboard_504x636-396x500.png" width="396" height="500" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/04-colorful-scene-in-storyboard_504x636-396x500.png 396w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/04-colorful-scene-in-storyboard_504x636-254x320.png 254w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/04-colorful-scene-in-storyboard_504x636.png 504w" sizes="(max-width: 396px) 100vw, 396px"></p><br><p>这些标签和按钮设置了太多的背景色,在运行时将要被清除。 在这个故事板, 他们只是用来视觉展示如何通过改变属性值影响内嵌视图的frame。</p><br><p>你现在不需要做这些, 但是如果你想在运行时看到这些背景色,可以在 <code>SpotInfoViewController</code>里放开<code>viewDidLoad()</code>下面的代码。</p><br><br><div class="wp_codebox"><table><tr id="p1145521"><td class="code" id="p114552code1"><pre class="swift" style="font-family:monospace;"><span style="color: #11740a; font-style: italic;">// Clear background colors from labels and buttons</span><br><span style="color: #a61390;">for</span> view <span style="color: #a61390;">in</span> backgroundColoredViews <span style="color: #002200;">&#123;</span><br>  view.backgroundColor <span style="color: #002200;">=</span> <span style="color: #400080;">UIColor</span>.clearColor<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div>

<p>同时, 任何outlet-connected的标签都设置成他们关联的outlet名字。 这个比较容易区分哪个标签运行时更新了文字。 例如,  <em>&lt;</em><em>whyVisitLabel&gt;</em> 关联到:</p>

<div class="wp_codebox"><table><tr id="p1145522"><td class="code" id="p114552code2"><pre class="swift" style="font-family:monospace;">@IBOutlet weak <span style="color: #a61390;">var</span> whyVisitLabel<span style="color: #002200;">:</span> <span style="color: #400080;">UILabel</span><span style="color: #002200;">!</span></pre></td></tr></table></div>

<p>另外需要注意的是故事板里的scenes 不是默认的 600 x 600。</p><br><p>Size classes 仍然可以用, 但是初始的导航控制器已经设置成 <em>iPhone 4-inch</em> ,在 <em>Attributes inspector</em>的<em>Simulated Metrics</em> 区域。 这个仅仅为了跟故事板配合使用更容易一些; simulated metrics 属性不影响运行 — 视图会根据不同设备自动调整尺寸。</p><br><p><img class="aligncenter size-full wp-image-114559 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/05-simulated-metrics-iphone-4-inch_639x173.png" width="639" height="173" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/05-simulated-metrics-iphone-4-inch_639x173.png 639w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/05-simulated-metrics-iphone-4-inch_639x173-480x130.png 480w" sizes="(max-width: 639px) 100vw, 639px"></p><br><h2>你的第一个堆栈视图</h2><br><p>使用堆栈视图首先要修复的问题是底部按钮行的间距。一个堆栈视图可以沿着坐标轴用很多方式分布他的视图, 其中之一就是使视图之间有相等的间距。</p><br><p>幸运的是, 在一个新堆栈视图中嵌入视图并不复杂。 首先, 选中 <em>Spot Info View Controller</em>下面的所有按钮, <em>clicking</em> 一个, 然后 <em>Command-click</em> 其他两个:</p><br><p><img class="aligncenter size-full wp-image-114560 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/06-select-bottom-row-of-buttons_420x80.png" width="420" height="80"></p><br><p>如果大纲视图尚未打开, 在故事板画布的左下方通过 <em>Show Document Outline</em> 按钮打开:</p><br><p><img class="aligncenter size-full wp-image-114561 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/07-document-outline-button_120x40.png" width="120" height="40"></p><br><p>在大纲视图中验证3个按钮是否都已经选中:</p><br><p><img class="aligncenter size-full wp-image-114562 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/08-verify-button-selection_360x90.png" width="360" height="90"></p><br><p>如果没有完全选中, 你可以用 <em>Command-click</em> 在大纲视图中选中它们。</p><br><p>选好后, 点击故事板画布右下方自动布局工具条下的<em>Stack</em> 按钮:</p><br><p><img class="aligncenter size-full wp-image-114563 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/09-stack_button_outlined_148x52.png" width="148" height="52"></p><br><p>所有的按钮会嵌入一个新的堆栈视图:</p><br><p><img class="aligncenter size-full wp-image-114564 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/10-bottom-row-is-now-in-stack-view_640x100.png" width="640" height="100" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/10-bottom-row-is-now-in-stack-view_640x100.png 640w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/10-bottom-row-is-now-in-stack-view_640x100-480x75.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>现在所有按钮都是齐平的 – 稍后你可以调整它们。</p><br><p>虽然堆栈视图负责按钮的位置, 你还是需要添加约束来约定堆栈视图自身的位置。</p><br><p>当你在堆栈视图嵌入一个视图后, 它与其他视图的约束就被移除了。比如, 之前在一个堆栈视图嵌入的按钮组, <em>Submit Rating</em> 按钮的顶部和<em>Rating</em>标签的底部有一个垂直的间距约束:</p><br><p><img class="aligncenter size-full wp-image-114565 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/11-prior-constraint_420x90.png" width="420" height="90"></p><br><p>点击 <em>Submit Rating</em> 按钮可以看到它已经没有任何约束了:</p><br><p><img class="aligncenter size-full wp-image-114566 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/12-no-more-constraints_400x80.png" width="400" height="80"></p><br><p>另外一个验证约束被移除的方式是查看 <em>Size inspector</em> (⌥⌘5):</p><br><p><img class="aligncenter size-full wp-image-114567 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/13-check-size-inspector_640x80.png" width="640" height="80" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/13-check-size-inspector_640x80.png 640w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/13-check-size-inspector_640x80-480x60.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>为了添加堆栈视图自身位置的约束, 首先你要选中它。 如果内嵌视图充满了堆栈视图,想在故事板中想选中它有点棘手。</p><br><p>简单的方法是在大纲视图中选中它:</p><br><p><img class="aligncenter size-full wp-image-114568 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/14-stack-view-document-outline-selection_660x80.png" width="660" height="80" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/14-stack-view-document-outline-selection_660x80.png 660w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/14-stack-view-document-outline-selection_660x80-480x58.png 480w" sizes="(max-width: 660px) 100vw, 660px"></p><br><p>另外一个方法是按住 <em>Shift</em> 和 <em>Right-click</em> 选中堆栈视图中的任何视图, 或者按住 <em>Control-Shift-click</em> ,如果你使用的是触摸板。 在你点击的地方,会显示视图层级的菜单, 你可以很容易在菜单中选中堆栈视图 。</p><br><p>现在, 使用<em>Shift-Right-click</em> 方法来选中它:</p><br><p><img class="aligncenter size-full wp-image-114569 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/15-select-stack-view-in-view-hierarchy-menu_400x280.png" width="400" height="280"></p><br><p>现在, 点击自动布局工具条的 <em>Pin</em> 按钮来给它添加约束:</p><br><p><img class="aligncenter size-full wp-image-114570 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/16-pin-button_142x57.png" width="142" height="57"></p><br><p>首先选中 <em>Constrain to margins</em>。 然后给堆栈视图的边界添加下面的约束:</p>

<div class="wp_codebox"><table><tr id="p1145523"><td class="code" id="p114552code3"><pre class="bash" style="font-family:monospace;">Top: <span style="color: #000000;">20</span>, Leading: <span style="color: #000000;">0</span>, Trailing: <span style="color: #000000;">0</span>, Bottom: <span style="color: #000000;">0</span></pre></td></tr></table></div>

<p>仔细检查上下左右的约束确保 <em>I-beams</em> 是选中的。 然后点击 <em>Add 4 Constraints</em>:</p><br><p><img class="aligncenter size-full wp-image-114571 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/17-bottom-stack-view-constraints_264x364.png" width="264" height="364" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/17-bottom-stack-view-constraints_264x364.png 264w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/17-bottom-stack-view-constraints_264x364-232x320.png 232w" sizes="(max-width: 264px) 100vw, 264px"></p><br><p>现在堆栈视图尺寸是正确的了, 可是它把第一个按钮拉伸来充满了额外的空间:</p><br><p><img class="aligncenter size-full wp-image-114572 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/18-first-button-is-stretched_400x80.png" width="400" height="80"></p><br><p><code>distribution</code> 属性用来决定堆栈视图如何沿着坐标轴布局它的视图集。 现在, 它的值设为 <code>Fill</code>, 意思是所有视图沿着坐标轴填充堆栈视图 。 要达到这个目的, 堆栈视图只能拉伸一个视图来填充额外的空间, 它拉伸水平内容优先级最低的视图, 如果所有的属性是一样的, 它将拉伸第一个视图。</p><br><p>不过, 你不想他们完全充满堆栈视图 – 你希望它们之间间距相同。</p><br><p>确保堆栈视图仍然是选中的, 打开 <em>Attributes inspector</em>。 把 <em>Distribution</em> 的值从 <em>Fill</em> 改成 <em>Equal Spacing</em>:</p><br><p><img class="aligncenter size-full wp-image-114573 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/19-change-distribution-to-equal-spacing_640x148.png" width="640" height="148" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/19-change-distribution-to-equal-spacing_640x148.png 640w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/19-change-distribution-to-equal-spacing_640x148-480x111.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>现在编译运行, 点击任意单元格, 旋转模拟器 (⌘→). 你会发现底部按钮之间是相等的间距了!</p><br><p><img class="aligncenter size-medium wp-image-114574 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/20-now-buttons-are-equally-spaced_1334x750-480x270.png" width="480" height="270" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/20-now-buttons-are-equally-spaced_1334x750-480x270.png 480w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/20-now-buttons-are-equally-spaced_1334x750-700x394.png 700w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/20-now-buttons-are-equally-spaced_1334x750-266x151.png 266w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/20-now-buttons-are-equally-spaced_1334x750.png 1334w" sizes="(max-width: 480px) 100vw, 480px"></p><br><p>在没有堆栈视图的情况下要实现这个, 你需要用垫片视图, 每个按钮之间要有一个。 你还要给垫片视图添加等距间隔,还要添加大量的约束来确保垫片视图的位置是正确的。</p><br><p>大概像下面这样。 为了可见性, 垫片视图已经加上了灰色的背景:</p><br><p><img class="aligncenter size-full wp-image-114575 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/21-alternate-solution-1_346x76.png" width="346" height="76"></p><br><p>如果只是在故事板中做一次,这也不是太大的事, 但是大部门的视图是动态的。 运行时添加一个新按钮或者隐藏存在的按钮不是一个简单的工作,因为邻近的垫片视图和约束。</p><br><p>想要在堆栈视图中隐藏一个视图, 你要做的所有的事仅仅是设置视图的 <code>hidden</code> 属性为 <code>true</code> ,堆栈视图负责处理剩下的视图。 你可以用这个方法修复 <em>WEATHER</em> 标签的问题当用户隐藏下面的文字。 在把天气块加入堆栈视图后，你可以晚点处理这个。</p><br><h2>转换区域</h2><br><p>你要转换 <code>SpotInfoViewController</code> 中所有其他的区域去使用堆栈视图。 这会帮你很容易的实现剩余的工作。 下一步你将转换评级区域。</p><br><h3>评级区域</h3><br><p>在你创建的堆栈视图的上方, 选择 <em>RATING</em> 标签和靠着它的星星标签:</p><br><p><img class="aligncenter wp-image-114576 size-full bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/22-select-rating-label-and-stars-label_640x74.png" width="640" height="74" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/22-select-rating-label-and-stars-label_640x74.png 640w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/22-select-rating-label-and-stars-label_640x74-480x56.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>接着点击 <em>Stack</em> 按钮把它们嵌入堆栈视图:</p><br><p><img class="aligncenter size-full wp-image-114577 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/23-after-clicking-stack-button_640x74.png" width="640" height="74" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/23-after-clicking-stack-button_640x74.png 640w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/23-after-clicking-stack-button_640x74-480x56.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>现在点击 <em>Pin</em> 按钮. 选中 <em>Constrain to margins</em> 然后添加下面 <em>three</em> constraints:</p>

<div class="wp_codebox"><table><tr id="p1145524"><td class="code" id="p114552code4"><pre class="bash" style="font-family:monospace;">Top: <span style="color: #000000;">20</span>, Leading: <span style="color: #000000;">0</span>, Bottom: <span style="color: #000000;">20</span></pre></td></tr></table></div>

<p><img class="aligncenter size-full wp-image-114578 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/24-add-second-stack-view-constraints_264x171.png" width="264" height="171"></p><br><p>现在去 <em>Attributes inspector</em> 设置间距为 <em>8</em>:</p><br><p><img class="aligncenter size-full wp-image-114579 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/25-set-spacing-to-8_259x87.png" width="259" height="87"></p><br><p>有可能你会看到错位的视图警告并且看到类似星星标签被拉伸出视图边界的情况:</p><br><p><img class="aligncenter size-full wp-image-114580 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/26-stars-label-weirdly-stretched_640x85.png" width="640" height="85" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/26-stars-label-weirdly-stretched_640x85.png 640w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/26-stars-label-weirdly-stretched_640x85-480x64.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>有时候 Xcode会临时显示一些警告或者标识说堆栈视图位置不对, 但是在你做了一些更新之后这些警告就消失了。通常你可以忽视这些问题。</p><br><p>无论如何, 立即修复这个问题, 你可以让堆栈视图重新布局，通过移动它的区域一点然后还愿或者临时改变其中一个的布局属性。</p><br><p>为了证明这个, 改变 <em>Alignment</em> 的值从 <em>Fill</em> 到 <em>Top</em> 然后还原成 <em>Fill</em>。你会发现星星标签的位置正确了:</p><br><p><img class="aligncenter size-full wp-image-114581 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/27-change-alignment-to-top-and-back_640x85.png" width="640" height="85" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/27-change-alignment-to-top-and-back_640x85.png 640w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/27-change-alignment-to-top-and-back_640x85-480x64.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>编译运行程序去验证一切是不是跟原来一样。</p><br><h3>取消嵌入到堆栈视图</h3><br><p>在你走的太远之前, 做一些基本的“急救”训练是极好的。 有时候你发现自己不再需要一个堆栈视图, 可能因为实验, 重构或者突然的原因。</p><br><p>幸运的是, 很容从堆栈视图 <i>unembed</i> 视图。</p><br><p>首先, 选中想要移除的堆栈视图。 按住 <em>Option</em> 键同时点击 <em>Stack</em> 按钮。 点击菜单上的 <em>Unembed</em>:</p><br><p><img class="aligncenter size-full wp-image-114582 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/28-how-to-unembed_186x71.png" width="186" height="71"></p><br><p>另外一种方式是,选中堆栈视图然后从菜单中选择 <em>Editor </em><em>\</em><em> Unembed</em> 。</p><br><h3>你的第一个垂直堆栈视图</h3><br><p>现在, 你将创建你的第一个垂直堆栈视图。 选中 <em>WHY VISIT</em> 标签和下方的 <em>&lt;</em><em>whyVisitLabel&gt;</em> :</p><br><p><img class="aligncenter size-full wp-image-114583 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/29-select-why-visit-labels_640x90.png" width="640" height="90" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/29-select-why-visit-labels_640x90.png 640w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/29-select-why-visit-labels_640x90-480x68.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>Xcode 会正确的推断出这是一个基于标签位置的垂直堆栈视图。 点击 <em>Stack</em> 按钮把它们嵌入堆栈视图:</p><br><p><img class="aligncenter size-full wp-image-114584 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/30-embed-why-visit-labels_640x90.png" width="640" height="90" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/30-embed-why-visit-labels_640x90.png 640w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/30-embed-why-visit-labels_640x90-480x68.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>下面的标签以前有一个跟视图右边界的约束, 不过加入堆栈视图后背移除了。 现在, 堆栈视图没有约束, 它使用最大视图的固定宽度作为自己的宽度。</p><br><p>选中堆栈视图, 点击 <em>Pin</em> 按钮。 选中 <em>Constrain to margins</em>, 设置 <em>Top</em>, <em>Leading</em> and <em>Trailing</em> 约束为 <em>0</em>.</p><br><p>然后, 选中下部约束的下拉菜单的 <em>WEATHER (current distance = 20)</em>:</p><br><p><img class="aligncenter size-full wp-image-114585 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/31-dont-select-nearest-neighbor-constraint_463x417.png" width="463" height="417" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/31-dont-select-nearest-neighbor-constraint_463x417.png 463w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/31-dont-select-nearest-neighbor-constraint_463x417-355x320.png 355w" sizes="(max-width: 463px) 100vw, 463px"></p><br><p>默认情况, 约束显示为距离最近的相邻控件, 对 <em>Hide</em> 按钮底部约束的距离是15. 实际上你需要的约束是是它底部的 <em>WEATHER</em> 标签。</p><br><p>最后, 点击 <em>Add 4 Constraints</em>。 你会看到下面:</p><br><p><img class="aligncenter size-full wp-image-114586 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/32-why-visit-stack-view-stretched_640x90.png" width="640" height="90" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/32-why-visit-stack-view-stretched_640x90.png 640w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/32-why-visit-stack-view-stretched_640x90-480x68.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>现在你你有了一个距离视图右边界固定距离的扩充的堆栈视图。 不过, 底部标签仍然是同样的宽度。 你可以通过更新堆栈视图的 <code>alignment</code> 属性来修复这个问题。</p><br><h3>对齐属性</h3><br><p> <code>alignment</code> 属性决定堆栈视图沿着<i>垂直于</i>坐标轴的线如何布局内部的视图, 可能的值是 <code>Fill</code>, <code>Leading</code>, <code>Center</code> 和 <code>Trailing</code>.</p><br><p><i>垂直的</i> 堆栈视图的 <code>alignment</code>的值稍有不同:</p><br><p><img class="aligncenter size-full wp-image-114587" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/33-horizontal-and-vertical-alignment_594x171.png" width="594" height="171" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/33-horizontal-and-vertical-alignment_594x171.png 594w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/33-horizontal-and-vertical-alignment_594x171-480x138.png 480w" sizes="(max-width: 594px) 100vw, 594px"></p><br><p><code>.Top</code> 替换了 <code>.Leading</code>  <code>.Bottom</code> 替换了 <code>。Trailing</code>. 还有两个只有在垂直方向才有效的属性, <code>.FirstBaseline</code> 和 <code>.LastBaseline</code>.</p><br><p>选择每个值去看看对堆栈视图中标签布局的不同影响:</p><br><p><em>Fill:</em></p><br><p><img class="aligncenter size-full wp-image-114588 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/34-alignment-fill_640x64.png" width="640" height="64" srcset="https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/34-alignment-fill_640x64.png 640w, https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/34-alignment-fill_640x64-480x48.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p><em>Leading:</em></p><br><p><img class="aligncenter size-full wp-image-114589 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/35-alignment-leading_640x64.png" width="640" height="64" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/35-alignment-leading_640x64.png 640w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/35-alignment-leading_640x64-480x48.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p><em>Center:</em></p><br><p><img class="aligncenter size-full wp-image-114590 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/36-alignment-center_640x64.png" width="640" height="64" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/36-alignment-center_640x64.png 640w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/36-alignment-center_640x64-480x48.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p><em>Trailing:</em></p><br><p><img class="aligncenter size-full wp-image-114591 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/37-alignment-trailing_640x64.png" width="640" height="64" srcset="https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/37-alignment-trailing_640x64.png 640w, https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/37-alignment-trailing_640x64-480x48.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>测试完后, 设置 <em>Alignment</em> 属性的值为 <em>Fill</em>:</p><br><p><img class="aligncenter size-full wp-image-114592 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/38-now-select-alignment-fill_640x64.png" width="640" height="64" srcset="https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/38-now-select-alignment-fill_640x64.png 640w, https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/38-now-select-alignment-fill_640x64-480x48.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>然后,编译运行程序来验证所有的一些看起来都很不错,并且没有出现倒退的情况。</p><br><p> <code>Fill</code> 意味着你想所有的视图按照垂直于坐标轴的方向完全充满堆栈视图。 这个使得 <em>WHY VISIT</em> 标签也会扩展到右边界。</p><br><p>不过,如果你仅仅希望底下的标签扩展到边界?</p><br><p>暂时, 因为两个标签背景都是透明的,所有没有关系, 不过转换天气区域的时候就有问题了。</p><br><p>你将学会如何用额外的堆栈视图实现这个功能。</p><br><h3>转换 &#8220;what to see&#8221; 区域</h3><br><p>这部分和前一个很相似, 所以介绍很简要。</p><br><ol start="1"><br><li>首先, 选中 <em>WHAT TO SEE</em> 标签和下方的 <em>&lt;</em><em>whatToSeeLabel&gt;</em> 标签。</li><br><li>点击 <em>Stack</em> 按钮。</li><br><li>点击 <em>Pin</em> 按钮。</li><br><li>选中 <em>Constrain to margins</em>, 添加下面 <em>四个</em> 约束:</li><br></ol><br><br><div class="wp_codebox"><table><tr id="p1145525"><td class="code" id="p114552code5"><pre class="bash" style="font-family:monospace;">Top: <span style="color: #000000;">20</span>, Leading: <span style="color: #000000;">0</span>, Trailing: <span style="color: #000000;">0</span>, Bottom: <span style="color: #000000;">20</span></pre></td></tr></table></div><br><br><ol start="5"><br><li>设置堆栈视图的 <em>Alignment</em> 为 <em>Fill</em>.</li><br></ol><br><p>你的故事板现在看起来是这样:</p><br><p><img class="aligncenter size-full wp-image-114593 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/39-after-what-to-see-section_640x308.png" width="640" height="308" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/39-after-what-to-see-section_640x308.png 640w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/39-after-what-to-see-section_640x308-480x231.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>编译运行程序去验证一切看起来依然一样。</p><br><p>现在留给你的只有 <em>weather</em> 区域了。</p><br><h2>转换天气区域</h2><br><p> <em>weather</em> 区域因为包含<em>Hide</em>按钮显得比其他区域复杂一些。</p><br><p>可以采用的一个方法是,创建一个内嵌的堆栈视图,把 <em>WEATHER</em> 标签和 <em>Hide</em> 按钮嵌入一个水平堆栈视图, 然后把这个水平堆栈视图和 <em>&lt;</em><em>weatherInfoLabel&gt;</em> 嵌入一个垂直堆栈视图。</p><br><p>它看起来是这个样子:</p><br><p><img class="aligncenter size-full wp-image-114594 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/40-weather-stack-in-stack_640x92.png" width="640" height="92" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/40-weather-stack-in-stack_640x92.png 640w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/40-weather-stack-in-stack_640x92-480x69.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>注意 <em>WEATHER</em> 标签已经把高度扩展和 <em>Hide</em> 按钮一样了。 这个不太理想,因为这将使<em>WEATHER</em>标签的基线和下方的文字存在空白。</p><br><p>记得 <code>alignment</code> 表示垂直于堆栈视图的位置。 所以, 你可以设置 <code>alignment</code> 为 <em>Bottom</em>:</p><br><p><img class="aligncenter size-full wp-image-114595 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/41-weather-stack-in-stack-alignment-bottom_640x92.png" width="640" height="92" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/41-weather-stack-in-stack-alignment-bottom_640x92.png 640w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/41-weather-stack-in-stack-alignment-bottom_640x92-480x69.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>不过你应该不想<em>Hide</em> 按钮的高度决定堆栈视图的高度。</p><br><p>实际上你要采用的方法是让 <em>Hide</em> 按钮 <i>不在</i>  <em>weather</em> 区域的堆栈视图中, 或者不在任何堆栈视图里。</p><br><p>它依然是顶层视图的子视图, 你在它跟 <em>WEATHER</em> 标签间添加约束 — 天气标签依然在堆栈视图里。 这是正确的, 你在堆栈视图外的按钮和堆栈视图内的标签间添加约束!</p><br><p>选择 <em>WEATHER</em> 标签和下方的 <em>&lt;</em><em>weatherInfoLabel&gt;</em> 标签:</p><br><p><img class="aligncenter size-full wp-image-114596 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/42-select-weather-and-info-label_640x92.png" width="640" height="92" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/42-select-weather-and-info-label_640x92.png 640w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/42-select-weather-and-info-label_640x92-480x69.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>点击 <em>Stack</em> 按钮:</p><br><p><img class="aligncenter size-full wp-image-114597 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/43-weather-click-stack-button_640x92.png" width="640" height="92" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/43-weather-click-stack-button_640x92.png 640w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/43-weather-click-stack-button_640x92-480x69.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>点击 <em>Pin</em> 按钮, 选中 <em>Constrain to margins</em> 并且添加下面的 <em>四个</em> 约束:</p>

<div class="wp_codebox"><table><tr id="p1145526"><td class="code" id="p114552code6"><pre class="bash" style="font-family:monospace;">Top: <span style="color: #000000;">20</span>, Leading: <span style="color: #000000;">0</span>, Trailing: <span style="color: #000000;">0</span>, Bottom: <span style="color: #000000;">20</span></pre></td></tr></table></div>

<p>设置堆栈视图的 <em>Alignment</em> 为 <em>Fill</em>:</p><br><p><img class="aligncenter size-full wp-image-114598 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/44-weather-alignment-fill_640x92.png" width="640" height="92" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/44-weather-alignment-fill_640x92.png 640w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/44-weather-alignment-fill_640x92-480x69.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>你需要在 <em>Hide</em> 按钮的左侧和 <em>WEATHER</em> 标签的右侧添加约束, 所以让 <em>WEATHER</em> 标签充满堆栈视图是无法起效果的。</p><br><p>不过, 你 <i>想</i> 让底面的 <em>&lt;</em><em>weatherInfoLabel&gt;</em> 标签填充视图。</p><br><p>你可以把 <em>WEATHER</em> 标签嵌入堆栈视图来实现这个。 记住垂直堆栈视图的 <code>alignment</code>可以设置成  <code>.Leading</code>, 如果堆栈视图拉伸超过实际宽度, 他包含的视图仍然是左对齐的。</p><br><p>通过大纲视图或者使用<em>Control-Shift-click</em>方法选中 <em>WEATHER</em> 标签:</p><br><p><img class="aligncenter size-full wp-image-114599 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/45-select-just-the-weather-label_640x92.png" width="640" height="92" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/45-select-just-the-weather-label_640x92.png 640w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/45-select-just-the-weather-label_640x92-480x69.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>点击 <em>Stack</em> 按钮:</p><br><p><img class="aligncenter size-full wp-image-114600 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/46-weather-in-horizontal-stack_640x92.png" width="640" height="92" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/46-weather-in-horizontal-stack_640x92.png 640w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/46-weather-in-horizontal-stack_640x92-480x69.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>设置 <em>Alignment</em> 为 <em>Leading</em>, 确保 <em>Axis</em> 设置为 <em>Vertical</em>:</p><br><p><img class="aligncenter size-full wp-image-114601 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/47-vertical-and-leading_640x92.png" width="640" height="92" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/47-vertical-and-leading_640x92.png 640w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/47-vertical-and-leading_640x92-480x69.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>完美! 外部堆栈视图可以拉伸内部堆栈视图去填充宽度,而内部堆栈视图的标签可以保持原始的宽度!</p><br><p>编译运行。 为什么<em>Hide</em> 按钮跑到文字中间去了?</p><br><p><img class="aligncenter wp-image-114602 size-medium bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/48-hide-label-incorrect-position_750x573-419x320.png" width="419" height="320" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/48-hide-label-incorrect-position_750x573-419x320.png 419w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/48-hide-label-incorrect-position_750x573-654x500.png 654w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/48-hide-label-incorrect-position_750x573.png 750w" sizes="(max-width: 419px) 100vw, 419px"></p><br><p>这是因为你把 <em>WEATHER</em> 标签嵌入堆栈视图, 所有它与 <em>Hide</em> 按钮之间的约束就被移除了。</p><br><p>添加从 <em>Hide</em> 按钮到 <em>WEATHER</em> 标签的<em>Control-drag</em>约束:</p><br><p><img class="aligncenter size-full wp-image-114603 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/49-drag-to-weather-label_380x94.png" width="380" height="94"></p><br><p>按住 <em>Shift</em> 选择多项, 选择 <em>Horizontal Spacing</em> 和 <em>Baseline</em>。 然后点击 <em>Add Constraints</em>:</p><br><p><img class="aligncenter size-full wp-image-114604 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/50-add-multiple-constraints_380x224.png" width="380" height="224"></p><br><p>编译运行。 <em>Hide</em> 按钮的位置现在应该正确了, 因为设置成隐藏的标签内嵌在一个堆栈视图, 按下 <em>Hide</em> 隐藏了这个标签, 同时调整下面的视图 — 无需手动调整任何约束。</p><br><p><img class="aligncenter size-medium wp-image-114605 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/51-hide-button-works_750x732-328x320.png" width="328" height="320" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/51-hide-button-works_750x732-328x320.png 328w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/51-hide-button-works_750x732-512x500.png 512w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/51-hide-button-works_750x732-32x32.png 32w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/51-hide-button-works_750x732.png 750w" sizes="(max-width: 328px) 100vw, 328px"></p><br><p>既然所有的区域都有自己的堆栈视图了, 你将他们所有都嵌入一个外部堆栈视图, 这将使得最后的两个任务微不足道。</p><br><h3>顶层堆栈视图</h3><br><p>在大纲视图中<em>Command-click</em> 去选取所有五个顶层堆栈视图:</p><br><p><img class="aligncenter size-full wp-image-114606 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/52-select-all-stack-views-in-outline_640x260.png" width="640" height="260" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/52-select-all-stack-views-in-outline_640x260.png 640w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/52-select-all-stack-views-in-outline_640x260-480x195.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>点击 <em>Stack</em> 按钮:</p><br><p><img class="aligncenter size-full wp-image-114607 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/53-stack-all-the-views_640x185.png" width="640" height="185" srcset="https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/53-stack-all-the-views_640x185.png 640w, https://cdn3.raywenderlich.com/wp-content/uploads/2015/09/53-stack-all-the-views_640x185-480x139.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>点击 <em>Pin</em> 按钮, 选中 <em>Constrain to margins</em> 添加 <em>0</em> 给所有边界。 接着设置 <em>Spacing</em> 为 <em>20</em>  <em>Alignment</em> 为 <em>Fill</em>。 你的故事板现在看起来是这样:</p><br><p><img class="aligncenter size-full wp-image-114608 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/54-set-the-spacing-to-20-and-alignment-to-fill_640x300.png" width="640" height="300" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/54-set-the-spacing-to-20-and-alignment-to-fill_640x300.png 640w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/54-set-the-spacing-to-20-and-alignment-to-fill_640x300-480x225.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>编译运行:</p><br><p><img class="aligncenter size-medium wp-image-114609 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/55-hide-button-lost-again_750x487-480x312.png" width="480" height="312" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/55-hide-button-lost-again_750x487-480x312.png 480w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/55-hide-button-lost-again_750x487-700x455.png 700w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/55-hide-button-lost-again_750x487.png 750w" sizes="(max-width: 480px) 100vw, 480px"></p><br><p>我擦! 好像隐藏按钮又失去了约束。没有关系, 像以前一样重新添加约束就可以了。</p><br><p><em>Control-drag</em> 从 <em>Hide</em> 按钮到 <em>WEATHER</em> 标签, 按住 <em>Shift</em>, 选择 <em>Horizontal Spacing</em> 和 <em>Baseline</em>. 然后点击 <em>Add Constraints</em>:</p><br><p><img class="aligncenter size-full wp-image-114610 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/56-add-constraints-to-button-again_380x223.png" width="380" height="223"></p><br><p>编译运行。 <em>Hide</em> 按钮的位置现在正确了。</p><br><h3>重定位视图</h3><br><p>既然所有的区域都在顶层堆栈视图, 你要修改 <em>what to see</em> 区域的位置让它位于 <em>weather</em> 区域的上方。</p><br><p>在大纲视图中选择 <em>中间的堆栈视图</em> 然后 <em>拖动它到</em> 第一个和第二个视图之间。</p><br><div class="note"><em>备注:</em> 保持鼠标指针稍微位于堆栈视图的左侧，这样它就还是外部堆栈视图 <i>子视图</i>。 小蓝圈应该位于两个堆栈视图的左侧边界而不是右侧:</div><br><p><img class="aligncenter size-full wp-image-114611 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/57-drag-and-drop-to-reposition-section_639x130.png" width="639" height="130" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/57-drag-and-drop-to-reposition-section_639x130.png 639w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/57-drag-and-drop-to-reposition-section_639x130-480x98.png 480w" sizes="(max-width: 639px) 100vw, 639px"></p><br><p>现在 <em>weather</em> 区域从上面数是第三个, 但是因为 <em>Hide</em> 按钮不是堆栈视图的一部分,所以他的区域是不对的。</p><br><p>点击 <em>Hide</em> 按钮选中它:</p><br><p><img class="aligncenter size-full wp-image-114612 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/58-hide-button-not-moved_640x130.png" width="640" height="130" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/58-hide-button-not-moved_640x130.png 640w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/58-hide-button-not-moved_640x130-480x98.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>接着点击 <em>Resolve Auto Layout Issues</em> 三角形按钮, 点击 <em>Update Frames</em>:</p><br><p><img class="aligncenter size-full wp-image-114613 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/59-resolve-auto-layout-issues_356x269.png" width="356" height="269"></p><br><p> <em>Hide</em> 按钮将会返回到正确的位置:</p><br><p><img class="aligncenter size-full wp-image-114614 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/60-hide-button-back-to-correct-position_640x130.png" width="640" height="130" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/60-hide-button-back-to-correct-position_640x130.png 640w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/60-hide-button-back-to-correct-position_640x130-480x98.png 480w" sizes="(max-width: 640px) 100vw, 640px"></p><br><p>当然, 用自动布局重定位视图,重新添加约束都已经不是最困难的事了, 但是这个不感觉这么好?</p><br><h3>基于配置的Size class</h3><br><p>最后, 你可以把注意力放在遗留的一个问题上了。 横屏模式下, 垂直空间非常稀少, 所以你想这些区域靠的更近一点。 要实现这点, 当垂直的 size class 是 compact的时候,你要设置顶层堆栈视图的间距为 <em>10</em> 而不是 <em>20</em> 。</p><br><p>选择顶层堆栈视图, 点击靠近 <em>Spacing</em>的小 <em>+</em> 按钮:</p><br><p><img class="aligncenter size-full wp-image-114615 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/61-select-plus-button_260x120.png" width="260" height="120"></p><br><p>选择 <em>Any Width</em> &gt; <em>Compact Height</em>:</p><br><p><img class="aligncenter size-full wp-image-114616 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/62-anywidth-compact-height_403x108.png" width="403" height="108"></p><br><p>在新的 <em>wAny hC</em> 区域设置 <em>Spacing</em> 为 <em>10</em> :</p><br><p><img class="aligncenter size-full wp-image-114617 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/63-set-spacing-to-10_260x160.png" width="260" height="160"></p><br><p>编译运行。 竖屏模式间距应该保持不变。 旋转模拟器 (⌘←) 可以看到区域之间的间距减小了，而且按钮距离底部都有了充足的空间:</p><br><p><img class="aligncenter size-medium wp-image-114618 bordered" src="http://www.raywenderlich.com/wp-content/uploads/2015/09/64-spacing-in-iphone-landscape_1334x750-480x270.png" width="480" height="270" srcset="https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/64-spacing-in-iphone-landscape_1334x750-480x270.png 480w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/64-spacing-in-iphone-landscape_1334x750-700x394.png 700w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/64-spacing-in-iphone-landscape_1334x750-266x151.png 266w, https://cdn1.raywenderlich.com/wp-content/uploads/2015/09/64-spacing-in-iphone-landscape_1334x750.png 1334w" sizes="(max-width: 480px) 100vw, 480px"></p><br><p>如果你没有添加一个顶层的堆栈视图, 你仍然 <i>可以</i> 分五个区域用 size classes 来设置四个约束的每一个垂直间距为10, 只是这个没有在一个简单的地方设置容易?</p><br><p>你有时间去做更好的事, 比如动画!</p><br><h2>动画</h2><br><p>现在, 显示和隐藏天气详情有点突兀。 你可以添加一些动画让这种转换显得平顺一些。</p><br><p>堆栈视图完全适用UIView 动画引擎。 这就意味动画显示/隐藏排列好的视图, 和<i>在</i>动画块内切换 <code>hidden</code> 属性一样简单。</p><br><p>该写一些代码了! 打开 <em>SpotInfoViewController.swift</em> 看一眼 <code>updateWeatherInfoViews(hideWeatherInfo:animated:)</code>.</p><br><p>你会看见这行代码在方法的尾部:</p>

<div class="wp_codebox"><table><tr id="p1145527"><td class="code" id="p114552code7"><pre class="swift" style="font-family:monospace;">weatherInfoLabel.hidden <span style="color: #002200;">=</span> shouldHideWeatherInfo</pre></td></tr></table></div>

<p>用下面的代码替换它:</p>

<div class="wp_codebox"><table><tr id="p1145528"><td class="code" id="p114552code8"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">if</span> animated <span style="color: #002200;">&#123;</span><br>  <span style="color: #400080;">UIView</span>.animateWithDuration<span style="color: #002200;">&#40;</span><span style="color: #2400d9;">0.3</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">self</span>.weatherInfoLabel.hidden <span style="color: #002200;">=</span> shouldHideWeatherInfo<br>  <span style="color: #002200;">&#125;</span><br><span style="color: #002200;">&#125;</span> <span style="color: #a61390;">else</span> <span style="color: #002200;">&#123;</span><br>  weatherInfoLabel.hidden <span style="color: #002200;">=</span> shouldHideWeatherInfo<br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div>

<p>编译运行, 点击 <em>Hide</em> 或者 <em>Show</em> 按钮。 这个动画版本是不是看起来好一些?</p><br><p>除了动画隐藏显示堆栈视图中的视图, 你也可以让堆栈视图本身有动画属性, 例如 <code>alignment</code>, <code>distribution</code>, <code>spacing</code> ,甚至是<code>axis</code>.</p>


]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;link rel=&quot;stylesheet&quot; id=&quot;wpsqt-main-css&quot; href=&quot;https://cdn3.raywenderlich.com/wp-content/plugins/wp-survey-and-quiz-tool/css/ma
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>UISearchController 使用指导</title>
    <link href="http://yoursite.com/2016/09/14/UISearchController-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AF%BC/"/>
    <id>http://yoursite.com/2016/09/14/UISearchController-使用指导/</id>
    <published>2016-09-14T00:59:02.000Z</published>
    <updated>2016-09-14T06:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><img src="http://www.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Square.png" width="250" height="250" class="alignright size-thumbnail wp-image-78152"></div>

<p>如果你的程序要展示大量的数据集, 通过滚动大规模的列表会变的很慢并且令人沮丧。 既然如此，允许用户搜索特定项目就显得非常重要。 幸运的是, UIKit 包含的 <code>UISearchBar</code> 和 <code>UITableView</code>实现了无缝对接来进行快速有效的信息过滤。</p><br><p>这份<code>UISearchController</code> 指导, 你将建立一个基于标准列表的Candy 应用。 你会添加搜索的功能, 包括动态过滤, 可选的scope bar, 所有使用 <code>UISearchController</code>的方式, 都已经添加到iOS 8. 最后, 你会知道如何让你的程序更加友好并且满足用户的紧急需求。</p><br><p>预备好一些糖衣的搜索结果，继续读下去。</p><br><h2>准备开始</h2><br><p>下载演示程序在<a href="http://www.raywenderlich.com/wp-content/uploads/2015/09/CandySearch-Starter.zip" target="_blank" rel="external">这里</a> 然后打开。 程序以导航栏的风格创建，编译项目并运行，你会看到一个空列表:</p>

<div align="center"><img src="http://www.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Starter-281x500.png" width="281" height="500" class="aligncenter size-large wp-image-113862" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Starter-281x500.png 281w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Starter-180x320.png 180w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Starter.png 750w" sizes="(max-width: 281px) 100vw, 281px"></div><br><p>回到Xcode, 文件<em>Candy.swift</em> 包含了一个用来保存你想展示的糖果信息的类。这个类有两个属性: 分类和糖果名。</p><br><p>当用户在你的app搜索某个糖果的时候, 你要引用名字属性来匹配用户的搜索关键字。 你会在文章结尾实现的Scope Bar中看到分类字符串的重要性。</p><br><h2>填充 Table View</h2><br><p>打开 <em>MasterViewController.swift</em>.  <code>candies</code> 属性负责管理用户搜索用的不同的<code>Candy</code>对象。 说到这里, 是时候创建一些 Candy了!</p><br><p>这个指导中, 你只需要创建固定数量的数据来展示search bar如何工作的; 在真正的产品级应用中, 你可能会有上千条的数据。不过无论怎样，不管程序存在上千的数据还是只有一点点数据，用到的方法都是一样的。 出色的扩展性!</p><br><p>填充你的 <code>candies</code> 数组,添加下面的代码到 <code>viewDidLoad()</code>, 代码添加在 <code>super.viewDidLoad()</code>调用后:</p><br><br><div class="wp_codebox"><table><tr id="p1137721"><td class="code" id="p113772code1"><pre class="swift" style="font-family:monospace;">candies <span style="color: #002200;">=</span> <span style="color: #002200;">&#91;</span><br>  Candy<span style="color: #002200;">&#40;</span>category<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Chocolate&quot;</span>, name<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Chocolate Bar&quot;</span><span style="color: #002200;">&#41;</span>,<br>  Candy<span style="color: #002200;">&#40;</span>category<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Chocolate&quot;</span>, name<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Chocolate Chip&quot;</span><span style="color: #002200;">&#41;</span>,<br>  Candy<span style="color: #002200;">&#40;</span>category<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Chocolate&quot;</span>, name<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Dark Chocolate&quot;</span><span style="color: #002200;">&#41;</span>,<br>  Candy<span style="color: #002200;">&#40;</span>category<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Hard&quot;</span>, name<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Lollipop&quot;</span><span style="color: #002200;">&#41;</span>,<br>  Candy<span style="color: #002200;">&#40;</span>category<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Hard&quot;</span>, name<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Candy Cane&quot;</span><span style="color: #002200;">&#41;</span>,<br>  Candy<span style="color: #002200;">&#40;</span>category<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Hard&quot;</span>, name<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Jaw Breaker&quot;</span><span style="color: #002200;">&#41;</span>,<br>  Candy<span style="color: #002200;">&#40;</span>category<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Other&quot;</span>, name<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Caramel&quot;</span><span style="color: #002200;">&#41;</span>,<br>  Candy<span style="color: #002200;">&#40;</span>category<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Other&quot;</span>, name<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Sour Chew&quot;</span><span style="color: #002200;">&#41;</span>,<br>  Candy<span style="color: #002200;">&#40;</span>category<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Other&quot;</span>, name<span style="color: #002200;">:</span><span style="color: #bf1d1a;">&quot;Gummi Bear&quot;</span><span style="color: #002200;">&#41;</span><br><span style="color: #002200;">&#93;</span></pre></td></tr></table></div>

<p>再次编译运行你的工程。因为table view的代理和数据源方法都已经实现了，现在你可以看见一个有数据的table view了: </p><br><div align="center"><img src="http://www.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Data-281x500.png" width="281" height="500" class="aligncenter size-large wp-image-113861" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Data-281x500.png 281w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Data-180x320.png 180w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Data.png 750w" sizes="(max-width: 281px) 100vw, 281px"></div><br><p>选择列表的一行，点击进入会展示对应糖果的详情页:</p><br><div align="center"><img src="http://www.raywenderlich.com/wp-content/uploads/2015/09/darkchocolate.png" width="281" height="500" class="aligncenter size-large wp-image-115841" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/darkchocolate.png 375w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/darkchocolate-180x320.png 180w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/darkchocolate-281x500.png 281w" sizes="(max-width: 281px) 100vw, 281px"></div><br><p>这么多的糖果，这么少的时间找到你想要的! 你需要一个<code>UISearchBar</code>.</p><br><h2>UISearchController介绍</h2><br><p>如果你查看<code>UISearchController</code> 文档, 你会发现这个文档懒的令人发指。 他一点搜索工作都不做。 这个类只是提供用户预期得到的标准接口而已。</p><br><p><code>UISearchController</code> 调用代理方法告知你的应用其他地方，你的用户正在做什么。你必须自己实现所有的函数来做字符串的匹配工作。</p><br><p>虽然这看起来有点吓人, 但是写自定义的搜索功能你可以自己控制准确的返回结果。 你的用户会非常赞赏这种智能快速的搜索。</p><br><p>如果你过去用过搜索列表, 你应该熟悉<code>UISearchDisplayController</code>。 从 iOS 8开始, 这个类已经被弃用，现在开始使用 <code>UISearchController</code>, 这个类简化了搜索的流程。</p><br><p>不走运的是, 写这篇文章的时候, Interface Builder 还不支持 <code>UISearchController</code>, 因此你要自己手动创建你的UI。</p><br><p>在 <em>MasterViewController.swift</em>, 添加一个新的属性:</p>

<div class="wp_codebox"><table><tr id="p1137722"><td class="code" id="p113772code2"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">let</span> searchController <span style="color: #002200;">=</span> UISearchController<span style="color: #002200;">&#40;</span>searchResultsController<span style="color: #002200;">:</span> <span style="color: #a61390;">nil</span><span style="color: #002200;">&#41;</span></pre></td></tr></table></div>

<p>通过初始化 <code>UISearchController</code> 不带 <code>searchResultsController</code>, 告诉搜索页面你要用相同的搜索视图来展示搜索结果。如果你在这里用不同的视图控制器，那搜索结果就展示在替代的视图里。</p><br><p>下一步, 你需要给你的搜索视图控制器配置一些参数。还是在 <em>MasterViewController.swift</em>里面, 在 <code>viewDidLoad()</code>后面添加如下代码:</p>

<div class="wp_codebox"><table><tr id="p1137723"><td class="code" id="p113772code3"><pre class="swift" style="font-family:monospace;">  searchController.searchResultsUpdater <span style="color: #002200;">=</span> <span style="color: #a61390;">self</span><br>  searchController.dimsBackgroundDuringPresentation <span style="color: #002200;">=</span> <span style="color: #a61390;">false</span><br>  definesPresentationContext <span style="color: #002200;">=</span> <span style="color: #a61390;">true</span><br>  tableView.tableHeaderView <span style="color: #002200;">=</span> searchController.searchBar</pre></td></tr></table></div>

<p>这儿是你添加代码的说明:</p><br><ol><br><li><code>searchResultsUpdater</code> 是 <code>UISearchController</code>的属性遵守 <code>UISearchResultsUpdating</code>协议。 当<code>UISearchBar</code>中输入的文字改变时，该协议会通知你的类. 过会你就会在你的类实现这个协议的。</li><br><li>默认情况下, <code>UISearchController</code>出现时视图会黯淡下来。 当你使用别的视图控制器作为<code>searchResultsController</code>时会很有用. 这个情况下, 你已经设置当前视图来显示结果，因此你不希望视图是黯淡的。</li><br><li>通过在视图控制器设置<code>definesPresentationContext</code> 为 <code>true</code>, 当<code>UISearchController</code> 处于激活状态是，确保用户在导航到别的页面后,搜索条不会继续留在屏幕上。</li><br><li>最后, 添加 <code>searchBar</code> 到列表的 <code>tableHeaderView</code>。记住 Interface Builder 还不兼容<code>UISearchController</code>, 这个很必要。</li><br></ol><br><h3>UISearchResultsUpdating 和 Filtering</h3><br><p>建立好搜索控制之后, 你需要做一些编码工作来让它工作。 首先, 在<code>MasterViewController</code>顶部附近添加下面的属性:</p>

<div class="wp_codebox"><table><tr id="p1137724"><td class="code" id="p113772code4"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">var</span> filteredCandies <span style="color: #002200;">=</span> <span style="color: #002200;">&#91;</span>Candy<span style="color: #002200;">&#93;</span><span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span></pre></td></tr></table></div>

<p>这个属性用例保存用户正在搜索的糖果。 下一步, 添加下面的辅助方法到 <code>MasterViewController</code>:</p>

<div class="wp_codebox"><table><tr id="p1137725"><td class="code" id="p113772code5"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">func</span> filterContentForSearchText<span style="color: #002200;">&#40;</span>searchText<span style="color: #002200;">:</span> <span style="color: #a61390;">String</span>, scope<span style="color: #002200;">:</span> <span style="color: #a61390;">String</span> <span style="color: #002200;">=</span> <span style="color: #bf1d1a;">&quot;All&quot;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>  filteredCandies <span style="color: #002200;">=</span> candies.<span style="color: #a61390;">filter</span> <span style="color: #002200;">&#123;</span> candy <span style="color: #a61390;">in</span><br>    <span style="color: #a61390;">return</span> candy.name.lowercaseString.containsString<span style="color: #002200;">&#40;</span>searchText.lowercaseString<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  tableView.reloadData<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div>

<p>这个方法会通过<code>searchText</code>过滤<code>candies</code> 数据并把结果放进你刚刚添加的 <code>filteredCandies</code> 数组。现在不用担心<code>scope</code> 这个参数, 文章后面你会用到它。</p><br><p>为了让<code>MasterViewController</code> 响应搜索条, 还需要实现 <code>UISearchResultsUpdating</code>. 打开 <em>MasterViewController.swift</em> 添加下面的类扩展方法, 在 <code>MasterViewController</code> 主体外:</p>

<div class="wp_codebox"><table><tr id="p1137726"><td class="code" id="p113772code6"><pre class="swift" style="font-family:monospace;">extension MasterViewController<span style="color: #002200;">:</span> UISearchResultsUpdating <span style="color: #002200;">&#123;</span><br>  <span style="color: #a61390;">func</span> updateSearchResultsForSearchController<span style="color: #002200;">&#40;</span>searchController<span style="color: #002200;">:</span> UISearchController<span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    filterContentForSearchText<span style="color: #002200;">&#40;</span>searchController.searchBar.text<span style="color: #002200;">!</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div>

<p> <code>updateSearchResultsForSearchController(<em>:)</em></code> 方法是唯一需要去实现的，用来遵守<code>UISearchResultsUpdating</code> 协议。</p><br><p>现在, 每当用户在搜索条添加或者移除文字的时候, <code>UISearchController</code> 都会通过这个方法通知 <code>MasterViewController</code> 。 这个方法只是通过当前搜索条中的文字简单调用一个帮手方法(你刚刚定义的)</p><br><p><code>filter()</code> 需要一个闭包类型 <code>(candy: Candy) -&gt; Bool</code>. 然后循环便利数组中的所有元素, 然后调用闭包, 为每个元素传入这个文字。</p><br><p>你可以用这个方法判定某个糖果是否是需要展示给用户的结果的其中一个。 要做到这点, 如果当前的糖果包含在过滤数组中你需要返回 <code>true</code> , 如果不是就返回 <code>false</code> 。</p><br><p>为了确定这个, <code>containsString(:)</code> 用来检测这个糖果的名字是不是包含 <code>searchText</code>. 但是在比较前, 你需要把两个字符串转换成全小写的字符串，用 <code>lowercaseString</code> 方法。 </p><br><div class="note"><em>备注:</em> 大部分时间, 当执行搜索的时候通过比较两个字符串的小写，我们可以轻易返回大小写不敏感的比较，用户并不用烦心大小写的问题。 现在, 你输入 &#8220;Chocolate&#8221; 或者 &#8220;chocolate&#8221; 任何一个都会返回匹配的糖果。 是不是很有用?! :]</div><br><p>编译并允许程序; 你会发现列表上面现在有了Search Bar 。</p><br><p>可是, 如果你输入搜索文字你会发现依然看不到任何过滤的结果。 要给什么? 这个很简单，因为你还没有写任何的代码去告诉列表如何使用过滤结果。</p><br><p>回到 <em>MasterViewController.swift</em>, 替换 <code>tableView(_:numberOfRowsInSection:)</code> 用下面的代码 :</p>

<div class="wp_codebox"><table><tr id="p1137727"><td class="code" id="p113772code7"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> tableView<span style="color: #002200;">&#40;</span>tableView<span style="color: #002200;">:</span> <span style="color: #400080;">UITableView</span>, numberOfRowsInSection section<span style="color: #002200;">:</span> <span style="color: #a61390;">Int</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; <span style="color: #a61390;">Int</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #a61390;">if</span> searchController.active <span style="color: #002200;">&amp;&amp;</span> searchController.searchBar.text <span style="color: #002200;">!=</span> <span style="color: #bf1d1a;">&quot;&quot;</span> <span style="color: #002200;">&#123;</span><br>    <span style="color: #a61390;">return</span> filteredCandies.<span style="color: #a61390;">count</span><br>  <span style="color: #002200;">&#125;</span><br>  <span style="color: #a61390;">return</span> candies.<span style="color: #a61390;">count</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div>

<p>这儿变化不大, 你只是简单判断用户是否在搜索, 然后用过滤的结果或者正常的糖果来做数据源。</p><br><p>下一步, 替换 <code>tableView(_:cellForRowAtIndexPath:)</code> 用:</p>

<div class="wp_codebox"><table><tr id="p1137728"><td class="code" id="p113772code8"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">override</span> <span style="color: #a61390;">func</span> tableView<span style="color: #002200;">&#40;</span>tableView<span style="color: #002200;">:</span> <span style="color: #400080;">UITableView</span>, cellForRowAtIndexPath indexPath<span style="color: #002200;">:</span> <span style="color: #400080;">NSIndexPath</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">-</span>&gt; <span style="color: #400080;">UITableViewCell</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #a61390;">let</span> cell <span style="color: #002200;">=</span> tableView.dequeueReusableCellWithIdentifier<span style="color: #002200;">&#40;</span><span style="color: #bf1d1a;">&quot;Cell&quot;</span>, forIndexPath<span style="color: #002200;">:</span> indexPath<span style="color: #002200;">&#41;</span><br>  <span style="color: #a61390;">let</span> candy<span style="color: #002200;">:</span> Candy<br>  <span style="color: #a61390;">if</span> searchController.active <span style="color: #002200;">&amp;&amp;</span> searchController.searchBar.text <span style="color: #002200;">!=</span> <span style="color: #bf1d1a;">&quot;&quot;</span> <span style="color: #002200;">&#123;</span><br>    candy <span style="color: #002200;">=</span> filteredCandies<span style="color: #002200;">&#91;</span>indexPath.row<span style="color: #002200;">&#93;</span><br>  <span style="color: #002200;">&#125;</span> <span style="color: #a61390;">else</span> <span style="color: #002200;">&#123;</span><br>    candy <span style="color: #002200;">=</span> candies<span style="color: #002200;">&#91;</span>indexPath.row<span style="color: #002200;">&#93;</span><br>  <span style="color: #002200;">&#125;</span><br>  cell.textLabel?.text <span style="color: #002200;">=</span> candy.name<br>  cell.detailTextLabel?.text <span style="color: #002200;">=</span> candy.category<br>  <span style="color: #a61390;">return</span> cell<br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div>

<p>两个方法现在都会调用 <code>searchController</code>的属性<code>active</code> 来判断显示哪个数组。 </p><br><p>当用户点击 Search Bar的搜索区域时, <code>active</code> 会自动设置为 <code>true</code>. 如果搜索控制器是激活的, 你会看到用户是否在输入文字。 如果他们输入了, <code>filteredCandies</code> 数组会返回数据. 否则, 返回所有的数据。</p><br><p>回想一下, 搜索控制器自动处理展示和隐藏结果, 所以你的所有代码必须根据控制器的状态和用户是否输入来提供正确的数据 (过滤的或者未过滤的) 。</p><br><div align="center"><img src="http://www.raywenderlich.com/wp-content/uploads/2015/09/ragecomic.png" width="651" height="481" class="aligncenter size-full wp-image-114198" srcset="https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/ragecomic.png 651w, https://cdn4.raywenderlich.com/wp-content/uploads/2015/09/ragecomic-433x320.png 433w" sizes="(max-width: 651px) 100vw, 651px"></div><br><p>编译并允许程序。 你已经得到一个可以运行的过滤列表行的 Search Bar。 好耶! </p><br><div align="center"><img src="http://www.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Filter-281x500.png" width="281" height="500" class="aligncenter size-large wp-image-113864" srcset="https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Filter-281x500.png 281w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Filter-180x320.png 180w, https://cdn5.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Filter.png 750w" sizes="(max-width: 281px) 100vw, 281px"></div><br><p>玩一会这个程序看看能不能搜到各种糖果。</p><br><p>存在不止一个问题。当你选择搜索列表的一行, 你可能注意到了详情页展示的是错误的糖果! 是时候修复这个问题了。</p><br><h2>给详情页传递数据</h2><br><p>当传递信息给详情页时, 你要确保控制器知道用户在使用哪个内容: 是整个列表还是搜索的结果。 还是在 <em>MasterViewController.swift</em>, 在 <code>prepareForSegue(_:sender:)</code>里, 找到下面的代码:</p>

<div class="wp_codebox"><table><tr id="p1137729"><td class="code" id="p113772code9"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">let</span> candy <span style="color: #002200;">=</span> candies<span style="color: #002200;">&#91;</span>indexPath.row<span style="color: #002200;">&#93;</span></pre></td></tr></table></div>

<p>替换成下面的代码:</p>

<div class="wp_codebox"><table><tr id="p11377210"><td class="code" id="p113772code10"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">let</span> candy<span style="color: #002200;">:</span> Candy<br><span style="color: #a61390;">if</span> searchController.active <span style="color: #002200;">&amp;&amp;</span> searchController.searchBar.text <span style="color: #002200;">!=</span> <span style="color: #bf1d1a;">&quot;&quot;</span> <span style="color: #002200;">&#123;</span><br>  candy <span style="color: #002200;">=</span> filteredCandies<span style="color: #002200;">&#91;</span>indexPath.row<span style="color: #002200;">&#93;</span><br><span style="color: #002200;">&#125;</span> <span style="color: #a61390;">else</span> <span style="color: #002200;">&#123;</span><br>  candy <span style="color: #002200;">=</span> candies<span style="color: #002200;">&#91;</span>indexPath.row<span style="color: #002200;">&#93;</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div>

<p>你在这里做了 <code>tableView(<em>:numberOfRowsInSection:)</em></code> 和 <code>tableView(:cellForRowAtIndexPath:)</code> 相同的判断, 不过现在，你给详情页提供了合适的糖果对象当你执行segue的时候。</p><br><p>此时编译并允许程序，看看导航到正确的详情页是多少轻松，无论是从主界面还是搜索页面。 </p><br><div align="center"><img src="http://www.raywenderlich.com/wp-content/uploads/2015/09/CandySearch-DetailView-281x500.png" width="281" height="500" class="aligncenter size-large wp-image-114436" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/CandySearch-DetailView-281x500.png 281w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/CandySearch-DetailView-180x320.png 180w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/CandySearch-DetailView.png 750w" sizes="(max-width: 281px) 100vw, 281px"></div><br><h2>创建一个 Scope Bar 来过滤结果</h2><br><p>如果你想提供给用户其他的方式来过滤结果, 你可以添加一个 <em>Scope Bar</em> 结合你的搜索条通过分类来过滤项目。 这些分类是你在创建糖果数组时指定给 <code>Candy</code> 对象的: <em>Chocolate</em>, <em>Hard</em>, and <em>其他</em> 。</p><br><p>首先, 你要先在<code>MasterViewController</code>创建一个scope bar. 这个scope bar是个分段控件，可以通过特定范围来缩小搜索。 一个scope就是你定义的那样。 这里他是一个糖果的分类, 不过scopes也可以是类型, 范围, 或者其他完全不同的东西。</p><br><p>使用scope bar和实现一个额外的代理方法一样容易。</p><br><p>在 <em>MasterViewController.swift</em>, 你要添加另一个扩展，需要遵守 <code>UISearchBarDelegate</code>协议. 在 <code>UISearchResultsUpdating</code> 后面添加扩展方法:</p>

<div class="wp_codebox"><table><tr id="p11377211"><td class="code" id="p113772code11"><pre class="swift" style="font-family:monospace;">extension MasterViewController<span style="color: #002200;">:</span> <span style="color: #2a6f76;">UISearchBarDelegate</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #a61390;">func</span> searchBar<span style="color: #002200;">&#40;</span>searchBar<span style="color: #002200;">:</span> <span style="color: #400080;">UISearchBar</span>, selectedScopeButtonIndexDidChange selectedScope<span style="color: #002200;">:</span> <span style="color: #a61390;">Int</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>    filterContentForSearchText<span style="color: #002200;">&#40;</span>searchBar.text<span style="color: #002200;">!</span>, scope<span style="color: #002200;">:</span> searchBar.scopeButtonTitles<span style="color: #002200;">!</span><span style="color: #002200;">&#91;</span>selectedScope<span style="color: #002200;">&#93;</span><span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div>

<p>这个代理方法在用户切换scope时候调用. 当方法执行时, 你想要重做过滤, 就要调用<code>filterContentForSearchText(<em>:scope:)</em></code> 用新的scope。</p><br><p>现在修改 <code>filterContentForSearchText(:scope:)</code> 来获取提供给账户的scope:</p>

<div class="wp_codebox"><table><tr id="p11377212"><td class="code" id="p113772code12"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">func</span> filterContentForSearchText<span style="color: #002200;">&#40;</span>searchText<span style="color: #002200;">:</span> <span style="color: #a61390;">String</span>, scope<span style="color: #002200;">:</span> <span style="color: #a61390;">String</span> <span style="color: #002200;">=</span> <span style="color: #bf1d1a;">&quot;All&quot;</span><span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>  filteredCandies <span style="color: #002200;">=</span> candies.<span style="color: #a61390;">filter</span> <span style="color: #002200;">&#123;</span> candy <span style="color: #a61390;">in</span><br>    <span style="color: #a61390;">let</span> categoryMatch <span style="color: #002200;">=</span> <span style="color: #002200;">&#40;</span>scope <span style="color: #002200;">==</span> <span style="color: #bf1d1a;">&quot;All&quot;</span><span style="color: #002200;">&#41;</span> || <span style="color: #002200;">&#40;</span>candy.category <span style="color: #002200;">==</span> scope<span style="color: #002200;">&#41;</span><br>    <span style="color: #a61390;">return</span>  categoryMatch <span style="color: #002200;">&amp;&amp;</span> candy.name.lowercaseString.containsString<span style="color: #002200;">&#40;</span>searchText.lowercaseString<span style="color: #002200;">&#41;</span><br>  <span style="color: #002200;">&#125;</span><br>&nbsp;<br>  tableView.reloadData<span style="color: #002200;">&#40;</span><span style="color: #002200;">&#41;</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div>

<p>这个方法判断提供的scope是 &#8220;All&#8221; 还是匹配糖果的分类。 只有这样测试糖果名才知道是否将它加入 <code>filteredCandies</code>.</p><br><p>你快搞定了, 不过scope过滤机制还不能完全工作。你需要修改 <code>updateSearchResultsForSearchController(_:)</code> , 在第一个类扩展方法中，你用来传递当前选择的scope的:</p>

<div class="wp_codebox"><table><tr id="p11377213"><td class="code" id="p113772code13"><pre class="swift" style="font-family:monospace;"><span style="color: #a61390;">func</span> updateSearchResultsForSearchController<span style="color: #002200;">&#40;</span>searchController<span style="color: #002200;">:</span> UISearchController<span style="color: #002200;">&#41;</span> <span style="color: #002200;">&#123;</span><br>  <span style="color: #a61390;">let</span> searchBar <span style="color: #002200;">=</span> searchController.searchBar<br>  <span style="color: #a61390;">let</span> scope <span style="color: #002200;">=</span> searchBar.scopeButtonTitles<span style="color: #002200;">!</span><span style="color: #002200;">&#91;</span>searchBar.selectedScopeButtonIndex<span style="color: #002200;">&#93;</span><br>  filterContentForSearchText<span style="color: #002200;">&#40;</span>searchController.searchBar.text<span style="color: #002200;">!</span>, scope<span style="color: #002200;">:</span> scope<span style="color: #002200;">&#41;</span><br><span style="color: #002200;">&#125;</span></pre></td></tr></table></div>

<p>还剩个问题, 用户还看不到scope bar ! 来添加scope bar, 导航到 <em>MasterViewController.swift</em>, 在<code>viewDidLoad()</code>创建搜索控制器之后, 添加下面的代码:</p>

<div class="wp_codebox"><table><tr id="p11377214"><td class="code" id="p113772code14"><pre class="swift" style="font-family:monospace;">searchController.searchBar.scopeButtonTitles <span style="color: #002200;">=</span> <span style="color: #002200;">&#91;</span><span style="color: #bf1d1a;">&quot;All&quot;</span>, <span style="color: #bf1d1a;">&quot;Chocolate&quot;</span>, <span style="color: #bf1d1a;">&quot;Hard&quot;</span>, <span style="color: #bf1d1a;">&quot;Other&quot;</span><span style="color: #002200;">&#93;</span><br>searchController.searchBar.delegate <span style="color: #002200;">=</span> <span style="color: #a61390;">self</span></pre></td></tr></table></div>

<p></p><p>这个会在搜索条下面添加一个scope bar, 并且带有你指定的糖果分类。 同时包含用来忽略糖果分类的 <em>&#8220;All&#8221;</em> 。</p><p></p>
<p></p><p>现在, 当你输入的时候, 选择的scope按钮会和搜索文字一起使用。 </p><p></p>
<p></p><p>编译运行程序。 试着输入一些搜索文字, 同时改变scope。</p><p></p>
<div align="center"><img src="http://www.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Filter-with-Scope-281x500.png" width="281" height="500" class="aligncenter size-large wp-image-113863" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Filter-with-Scope-281x500.png 281w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Filter-with-Scope-180x320.png 180w, https://cdn2.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Filter-with-Scope.png 750w" sizes="(max-width: 281px) 100vw, 281px"></div><br><p>输入 &#8220;caramel&#8221; scope 设置为 All。它出现在列表里, 如果你把scope换成Chocolate, &#8220;caramel&#8221; 消失了。 因为它不是巧克力。</p><br><h2>从这里去哪里呢?</h2><br><p>恭喜 &#8211; 你现在有了一个可以直接在主列表搜索的程序。 这里是 <a href="http://www.raywenderlich.com/wp-content/uploads/2015/09/CandySearch.zip" target="_blank" rel="external">可下载的简单工程</a> 含有上面所有的代码。</p><br><p>列表视图在各种程序里运用, 提供搜索选项是个好的触摸功能。 <code>UISearchBar</code> 和 <code>UISearchController</code>, iOS 提供了大部分的功能，你没有理由不用这个功能。 在大量列表中执行搜索是用户希望含有的功能; 一旦他们发现没有这个功能，他们会不高兴的。</p><br><div align="center"><img src="http://www.raywenderlich.com/wp-content/uploads/2012/07/nosearchfunction.jpg" width="400" height="361" class="size-full wp-image-19061" srcset="https://cdn2.raywenderlich.com/wp-content/uploads/2012/07/nosearchfunction.jpg 400w, https://cdn2.raywenderlich.com/wp-content/uploads/2012/07/nosearchfunction-250x225.jpg 250w, https://cdn2.raywenderlich.com/wp-content/uploads/2012/07/nosearchfunction-354x320.jpg 354w" sizes="(max-width: 400px) 100vw, 400px"></div>


]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://www.raywenderlich.com/wp-content/uploads/2015/09/UISearchController-Square.png&quot; width=&quot;250&quot; height=&quot;250
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>项目结束后的一些思考</title>
    <link href="http://yoursite.com/2016/09/08/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9D%9F%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2016/09/08/项目结束后的一些思考/</id>
    <published>2016-09-08T08:42:51.000Z</published>
    <updated>2016-09-12T08:47:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>为什么项目又延期了？ ——–来自市场的愤怒 </p>
</blockquote>
<p>为什么项目又延期了呢？</p>
<div style="text-align:center"><br><img src="http://img306.ph.126.net/Xk7NwVjqPUtaYlY6u2m2GQ==/3852829481215481010.jpg"><br></div>

<p>从项目立项到发布，一般项目的生命周期都是如上图所示，任何一个环节出现问题，都会增加工时的消耗</p>
<p>开源中国社区 <a href="http://www.oschina.net/question/565065_86309" title="百度" target="_blank" rel="external">软件开发流程</a> 说的很详细了，我只说说自己的一些看法和见解。</p>
<h1 id="关于知识的储备"><a href="#关于知识的储备" class="headerlink" title="关于知识的储备"></a>关于知识的储备</h1><div><br><p>笔者曾经参与多个iOS项目的开发，大大小小的项目都经历，实话说，极少有项目可以按时交付，即使连最基本的问题清零都做不到，基本都需要加班加点，到最后还是会遗留一些解决不了的问题。<br></p><br><p>新人越多的项目越容易出问题，当新人逐渐变成老司机的时候，无论是代码质量还是项目进度都变的靠谱多了。现代开发虽然引入了很多提高工作效率的工具和方法，但是人的能力还是占主导地位，人的知识储备在此就显得尤为重要了。<br></p><br><p>对新人的培养必须区别于学校，培养其主动学习能力才是进步之石，作为领导或者开发组长，应该根据员工的特点为其引路，创造学习的环境和条件，而不是将任务分配完了就不管了。在我经历的项目中，发现大多数的新人做了很多重复性的工作，在很长的时期里机械的做事，根本没有机会成长，他们现在或者变成老油条或者继续做着简单的工作，在新的毕业生涌入的潮流中，彻底的沉下去了。<br><br></p></div>

<div style="text-align:center"><br><img src="http://photocdn.sohu.com/20150811/mp26839099_1439275236239_1_th.jpeg" width="280" height="300"><br></div>

<h1 id="关于责任心"><a href="#关于责任心" class="headerlink" title="关于责任心"></a>关于责任心</h1><div><br><p>责任心这个东西应该是个后天的东西，因此在新人面试的时候，怎么在短短几十分钟内辨别面试者的责任心，是需要经验和一些运气的。如果等到新人进组和接手开发任务的时候，再去辨别就有点晚了。<br></p><br><p>有责任心的员工自主性相对较强，对自己的工作进度和质量都有着高度的要求，轻易不会表现沮丧和得过且过，接手的功能和任务都会认真对待，即使能力一时不足，也会通过不断的学习和填坑来完成，并不断总结，最终他开发的功能一般都会有个比较好的结果。<br></p><br></div>

<h1 id="关于工作方式"><a href="#关于工作方式" class="headerlink" title="关于工作方式"></a>关于工作方式</h1><div><br><p>成功者都有一套自己的工作方式，普通人也有自己的工作方式，不同之处是高效和低效的区别。软件开发是体力和脑力劳动的结合，其中脑力劳动占据了主导地位，善于用脑的工程师是一般都掌握一套可以提高工作效率的工具和工作方式。<br></p><br><p>我个人认为提高工作效率的方式就是总结归纳改进，但是至于如何总结归纳改进则看情况而定。在我经历过的大大小小数十个项目中，多数的工程师变的平庸了，走向卓越的工程师非常稀少。这些人现在遍布在不同的公司，担任着重要的职务，甚至有些人已经创业成功，晋级到了富人阶层。<br></p><br></div>

<div style="text-align:center"><br><img src="http://img5.imgtn.bdimg.com/it/u=2981119672,2990184737&fm=21&gp=0.jpg" width="400" height="300"><br></div>

<h1 id="关于总结"><a href="#关于总结" class="headerlink" title="关于总结"></a>关于总结</h1><div><br><p>项目总结很重要也很必要，至少我是这么认为的。很多重复发生的错误和事故都是因为没及时总结造成的，这简直是犯罪。作为项目管理者，不能指望所有的工程师都会及时总结经验，汲取教训，更不会主动去帮别人总结。<br><br>人的惰性是天性，勤奋的人都是养成习惯才勤奋的，作为管理者要让工程师养成总结的习惯，而不是让他们自己去发挥主观能动性。参与总结的人越多，工程师越是放松，越能说出真实的想法，并付诸行动。<br><br>我开总结会，一般从三个方面来进行，一是自身的不足和改进，二是项目的不足和改进，三是公司提供的资源是否到位。一般来说，前面两点大部分的工程师都能讲出几条不足和改进意见，唯独第三条不知为什么要考虑这个因素。我的观点是，项目不是独立的，研发和测试只是产品生命周期的一个阶段，公司的很多部门都会对研发工作产生影响，很多工程师看不到这点。学会与各个部门打交道，不止是领导层的工作，也是工程师需要具备的能力。<br></p><br></div>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;为什么项目又延期了？ ——–来自市场的愤怒 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么项目又延期了呢？&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://img306.ph.12
    
    </summary>
    
    
  </entry>
  
</feed>
